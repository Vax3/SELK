"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiNavDrawer = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.function.name");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _list_group = require("../list_group");

var _nav_drawer_flyout = require("./nav_drawer_flyout");

var _outside_click_detector = require("../outside_click_detector");

var _i18n = require("../i18n");

var _flex = require("../flex");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EuiNavDrawer =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiNavDrawer, _Component);

  function EuiNavDrawer(props) {
    var _this;

    _classCallCheck(this, EuiNavDrawer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiNavDrawer).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "timeoutID", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleOpen", function () {
      _this.setState({
        isCollapsed: !_this.state.isCollapsed
      });

      setTimeout(function () {
        _this.setState({
          outsideClickDisabled: _this.state.isCollapsed ? true : false,
          toolTipsEnabled: _this.state.isCollapsed ? true : false
        });
      }, 150);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "expandDrawer", function () {
      _this.setState({
        isCollapsed: false,
        outsideClickDisabled: false
      });

      setTimeout(function () {
        _this.setState({
          toolTipsEnabled: false
        });
      }, 150);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "collapseDrawer", function () {
      _this.setState({
        isCollapsed: true,
        outsideClickDisabled: _this.state.flyoutIsCollapsed ? true : false,
        toolTipsEnabled: true
      }); // Scrolls the menu and flyout back to top when the nav drawer collapses


      setTimeout(function () {
        document.getElementById('navDrawerMenu').scrollTop = 0;
      }, 50);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "manageFocus", function () {
      // This prevents the drawer from collapsing when tabbing through children
      // by clearing the timeout thus cancelling the onBlur event (see focusOut).
      // This means isManagingFocus remains true as long as a child element
      // has focus. This is the case since React bubbles up onFocus and onBlur
      // events from the child elements.
      clearTimeout(_this.timeoutID);

      if (!_this.state.isManagingFocus) {
        _this.setState({
          isManagingFocus: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focusOut", function () {
      // This collapses the drawer when no children have focus (i.e. tabbed out).
      // In other words, if focus does not bubble up from a child element, then
      // the drawer will collapse. See the corresponding block in expandDrawer
      // (called by onFocus) which cancels this operation via clearTimeout.
      _this.timeoutID = setTimeout(function () {
        if (_this.state.isManagingFocus) {
          _this.setState({
            isManagingFocus: false
          });

          _this.closeBoth();
        }
      }, 0);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "expandFlyout", function (links, title) {
      var content = links;

      if (_this.state.navFlyoutTitle === title) {
        _this.collapseFlyout();
      } else {
        _this.setState({
          flyoutIsCollapsed: false,
          navFlyoutTitle: title,
          navFlyoutContent: content,
          isCollapsed: true,
          toolTipsEnabled: false,
          outsideClickDisabled: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "collapseFlyout", function () {
      _this.setState({
        flyoutIsCollapsed: true,
        navFlyoutTitle: null,
        navFlyoutContent: null,
        toolTipsEnabled: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "closeBoth", function () {
      _this.collapseDrawer();

      _this.collapseFlyout();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDrawerMenuClick", function (e) {
      // walk up e.target until either:
      // 1. a[href] - close the menu
      // 2. document.body - do nothing
      var element = e.target;

      while (element !== undefined && element !== document.body && (element.tagName !== 'A' || element.getAttribute('href') === undefined)) {
        element = element.parentElement;
      }

      if (element !== document.body) {
        // this is an anchor with an href
        _this.closeBoth();
      }
    });

    _this.state = {
      isCollapsed: true,
      flyoutIsCollapsed: true,
      outsideClickDisabled: true,
      isManagingFocus: false,
      toolTipsEnabled: true
    };
    return _this;
  }

  _createClass(EuiNavDrawer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          showExpandButton = _this$props.showExpandButton,
          showToolTips = _this$props.showToolTips,
          rest = _objectWithoutProperties(_this$props, ["children", "className", "showExpandButton", "showToolTips"]);

      var classes = (0, _classnames.default)('euiNavDrawer', {
        'euiNavDrawer-isCollapsed': this.state.isCollapsed,
        'euiNavDrawer-isExpanded': !this.state.isCollapsed,
        'euiNavDrawer-flyoutIsCollapsed': this.state.flyoutIsCollapsed,
        'euiNavDrawer-flyoutIsExpanded': !this.state.flyoutIsCollapsed
      }, className);
      var footerContent;

      if (showExpandButton) {
        footerContent = _react.default.createElement(_list_group.EuiListGroup, {
          className: "euiNavDrawer__expandButton",
          flush: true
        }, _react.default.createElement(_i18n.EuiI18n, {
          tokens: ['euiNavDrawer.sideNavCollapse', 'euiNavDrawer.sideNavExpand'],
          defaults: ['Collapse', 'Expand']
        }, function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              sideNavCollapse = _ref2[0],
              sideNavExpand = _ref2[1];

          return _react.default.createElement(_list_group.EuiListGroupItem, {
            label: _this2.state.isCollapsed ? sideNavExpand : sideNavCollapse,
            iconType: _this2.state.isCollapsed ? 'menuRight' : 'menuLeft',
            size: "s",
            showToolTip: _this2.state.isCollapsed,
            onClick: _this2.state.isCollapsed ? function () {
              _this2.expandDrawer();

              _this2.collapseFlyout();
            } : function () {
              return _this2.collapseDrawer();
            },
            "data-test-subj": _this2.state.isCollapsed ? 'navDrawerExpandButton-isCollapsed' : 'navDrawerExpandButton-isExpanded'
          });
        }));
      }

      var flyoutContent = _react.default.createElement(_nav_drawer_flyout.EuiNavDrawerFlyout, {
        id: "navDrawerFlyout",
        title: this.state.navFlyoutTitle,
        isCollapsed: this.state.flyoutIsCollapsed,
        listItems: this.state.navFlyoutContent,
        wrapText: true
      }); // Add an onClick that expands the flyout sub menu for any list items (links)
      // that have a flyoutMenu prop (sub links)


      var modifiedChildren = children; // 1. Loop through the EuiNavDrawer children (EuiListGroup, EuiHorizontalRules, etc)

      modifiedChildren = _react.default.Children.map(this.props.children, function (child) {
        // 2. Check if child is an EuiNavDrawerGroup and if it does have a flyout, add the expand function
        if (child.type.name === 'EuiNavDrawerGroup') {
          var item = _react.default.cloneElement(child, {
            flyoutMenuButtonClick: _this2.expandFlyout,
            showToolTips: _this2.state.toolTipsEnabled && showToolTips
          });

          return item;
        } else {
          return child;
        }
      });
      var menuClasses = (0, _classnames.default)('euiNavDrawerMenu', {
        'euiNavDrawerMenu-hasFooter': footerContent
      });
      return _react.default.createElement(_outside_click_detector.EuiOutsideClickDetector, {
        onOutsideClick: function onOutsideClick() {
          return _this2.closeBoth();
        },
        isDisabled: this.state.outsideClickDisabled
      }, _react.default.createElement("div", _extends({
        className: classes,
        onBlur: this.focusOut,
        onFocus: this.manageFocus
      }, rest), _react.default.createElement(_flex.EuiFlexItem, {
        grow: false
      }, _react.default.createElement("div", {
        id: "navDrawerMenu",
        className: menuClasses,
        onClick: this.handleDrawerMenuClick
      }, footerContent, modifiedChildren)), flyoutContent));
    }
  }]);

  return EuiNavDrawer;
}(_react.Component);

exports.EuiNavDrawer = EuiNavDrawer;
EuiNavDrawer.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string,

  /**
   * Adds fixed toggle button to bottom of menu area
   */
  showExpandButton: _propTypes.default.bool,

  /**
   * Display tooltips on side nav items
   */
  showToolTips: _propTypes.default.bool
};
EuiNavDrawer.defaultProps = {
  showExpandButton: true,
  showToolTips: true
};
EuiNavDrawer.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "toggleOpen",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "expandDrawer",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "collapseDrawer",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "manageFocus",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "focusOut",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "expandFlyout",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "links",
      "type": null
    }, {
      "name": "title",
      "type": null
    }],
    "returns": null
  }, {
    "name": "collapseFlyout",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "closeBoth",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "handleDrawerMenuClick",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "e",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "EuiNavDrawer",
  "props": {
    "showExpandButton": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Adds fixed toggle button to bottom of menu area"
    },
    "showToolTips": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Display tooltips on side nav items"
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};