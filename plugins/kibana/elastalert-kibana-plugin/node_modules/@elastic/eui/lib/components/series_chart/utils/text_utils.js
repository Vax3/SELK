"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiSeriesChartTextUtils = void 0;

require("core-js/modules/es6.regexp.constructor");

require("core-js/modules/es6.regexp.match");

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Word wrapper that takes a long text and wrap words into lines of the same length.
 * and return a SVG component composed by tspan tags.
 * source: https://j11y.io/snippets/wordwrap-for-javascript/
 * @param {Array of Strings} texts - an array of splitted text, one per line
 * @return {Object} Return a Fragment of SVG tspan elements to be used inside axis label formatter.
 */
function labelWordWrap(text, width) {
  var pieces = wordWrap(text, width);
  return _react.default.createElement(_react.Fragment, null, pieces.map(function (piece, i) {
    return _react.default.createElement("tspan", {
      x: 0,
      dy: "1em",
      key: "text-span-".concat(i)
    }, piece);
  }));
}

function wordWrap(text) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 75;
  var cut = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!text) {
    return text;
  }

  var regex = ".{1,".concat(width, "}(s|$)").concat(cut ? "|.{".concat(width, "}|.+$") : '|S+?(s|$)');
  return text.match(RegExp(regex, 'g'));
}

var EuiSeriesChartTextUtils = {
  labelWordWrap: labelWordWrap
};
exports.EuiSeriesChartTextUtils = EuiSeriesChartTextUtils;