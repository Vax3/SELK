"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiBadge = exports.ICON_SIDES = exports.COLORS = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.string.includes");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _color = require("../../services/color");

var _accessibility = require("../accessibility");

var _icon = require("../icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var colorToClassNameMap = {
  default: 'euiBadge--default',
  primary: 'euiBadge--primary',
  secondary: 'euiBadge--secondary',
  accent: 'euiBadge--accent',
  warning: 'euiBadge--warning',
  danger: 'euiBadge--danger',
  hollow: 'euiBadge--hollow'
};
var COLORS = Object.keys(colorToClassNameMap);
exports.COLORS = COLORS;
var iconSideToClassNameMap = {
  left: '',
  right: 'euiBadge--iconRight'
};
var ICON_SIDES = Object.keys(iconSideToClassNameMap);
exports.ICON_SIDES = ICON_SIDES;

var EuiBadge = function EuiBadge(_ref) {
  var children = _ref.children,
      color = _ref.color,
      iconType = _ref.iconType,
      iconSide = _ref.iconSide,
      className = _ref.className,
      onClick = _ref.onClick,
      iconOnClick = _ref.iconOnClick,
      onClickAriaLabel = _ref.onClickAriaLabel,
      iconOnClickAriaLabel = _ref.iconOnClickAriaLabel,
      closeButtonProps = _ref.closeButtonProps,
      rest = _objectWithoutProperties(_ref, ["children", "color", "iconType", "iconSide", "className", "onClick", "iconOnClick", "onClickAriaLabel", "iconOnClickAriaLabel", "closeButtonProps"]);

  var optionalColorClass = null;
  var optionalCustomStyles = null;
  var textColor = null;

  if (COLORS.indexOf(color) > -1) {
    optionalColorClass = colorToClassNameMap[color];
  } else {
    if (_color.isColorDark.apply(void 0, _toConsumableArray((0, _color.hexToRgb)(color)))) {
      textColor = '#FFFFFF';
    } else {
      textColor = '#000000';
    }

    optionalCustomStyles = {
      backgroundColor: color,
      color: textColor
    };
  }

  var classes = (0, _classnames.default)('euiBadge', iconSideToClassNameMap[iconSide], optionalColorClass, className);
  var closeClassNames = (0, _classnames.default)('euiBadge__icon', closeButtonProps && closeButtonProps.className);
  var optionalIcon = null;

  if (iconType) {
    if (iconOnClick) {
      optionalIcon = _react.default.createElement(_accessibility.EuiKeyboardAccessible, null, _react.default.createElement(_icon.EuiIcon, _extends({
        onClick: iconOnClick,
        type: iconType,
        size: "s",
        "aria-label": iconOnClickAriaLabel
      }, closeButtonProps, {
        className: closeClassNames
      })));
    } else {
      optionalIcon = _react.default.createElement(_icon.EuiIcon, {
        type: iconType,
        size: "s",
        className: "euiBadge__icon"
      });
    }
  }

  if (onClick) {
    return _react.default.createElement("button", _extends({
      className: classes,
      style: optionalCustomStyles,
      onClick: onClick,
      "aria-label": onClickAriaLabel
    }, rest), _react.default.createElement("span", {
      className: "euiBadge__content"
    }, optionalIcon, _react.default.createElement("span", null, children)));
  } else {
    return _react.default.createElement("span", _extends({
      className: classes,
      style: optionalCustomStyles
    }, rest), _react.default.createElement("span", {
      className: "euiBadge__content"
    }, optionalIcon, _react.default.createElement("span", {
      className: "euiBadge__text"
    }, children)));
  }
};

exports.EuiBadge = EuiBadge;

function checkValidColor(props, propName, componentName) {
  var validHex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(props.color);

  if (props.color != null && !validHex && !COLORS.includes(props.color)) {
    throw new Error("".concat(componentName, " needs to pass a valid color. This can either be a three ") + "or six character hex value or one of the following: ".concat(COLORS));
  }
}

EuiBadge.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string,

  /**
   * Accepts any string from our icon library
   */
  iconType: _icon.IconPropType,

  /**
   * The side of the badge the icon should sit
   */
  iconSide: _propTypes.default.string,

  /**
   * Will apply an onclick to icon within the badge
   */
  iconOnClick: _utils.EuiPropTypes.withRequiredProp(_propTypes.default.func, 'iconOnClickAriaLabel', 'Please provide an aria label to complement your iconOnClick'),

  /**
   * Aria label applied to the iconOnClick button
   */
  iconOnClickAriaLabel: _propTypes.default.string,

  /**
   * Will apply an onclick to the badge itself
   */
  onClick: _utils.EuiPropTypes.withRequiredProp(_propTypes.default.func, 'onClickAriaLabel', 'Please provide an aria label to complement your onClick'),

  /**
   * Aria label applied to the onClick button
   */
  onClickAriaLabel: _propTypes.default.string,

  /**
   * Accepts either our palette colors (primary, secondary ..etc) or a hex value `#FFFFFF`, `#000`.
   */
  color: checkValidColor,

  /**
   * Props passed to the close button.
   */
  closeButtonProps: _propTypes.default.object
};
EuiBadge.defaultProps = {
  color: 'default',
  iconSide: 'left'
};
EuiBadge.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiBadge",
  "props": {
    "color": {
      "defaultValue": {
        "value": "'default'",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "checkValidColor"
      },
      "required": false,
      "description": "Accepts either our palette colors (primary, secondary ..etc) or a hex value `#FFFFFF`, `#000`."
    },
    "iconSide": {
      "defaultValue": {
        "value": "'left'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The side of the badge the icon should sit"
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "iconType": {
      "type": {
        "name": "custom",
        "raw": "IconPropType"
      },
      "required": false,
      "description": "Accepts any string from our icon library"
    },
    "iconOnClick": {
      "type": {
        "name": "custom",
        "raw": "EuiPropTypes.withRequiredProp(\n  PropTypes.func,\n  'iconOnClickAriaLabel',\n  'Please provide an aria label to complement your iconOnClick'\n)"
      },
      "required": false,
      "description": "Will apply an onclick to icon within the badge"
    },
    "iconOnClickAriaLabel": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Aria label applied to the iconOnClick button"
    },
    "onClick": {
      "type": {
        "name": "custom",
        "raw": "EuiPropTypes.withRequiredProp(\n  PropTypes.func,\n  'onClickAriaLabel',\n  'Please provide an aria label to complement your onClick'\n)"
      },
      "required": false,
      "description": "Will apply an onclick to the badge itself"
    },
    "onClickAriaLabel": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Aria label applied to the onClick button"
    },
    "closeButtonProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Props passed to the close button."
    }
  }
};