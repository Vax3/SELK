"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiBetaBadge = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tool_tip = require("../../tool_tip");

var _icon = require("../../icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var EuiBetaBadge = function EuiBetaBadge(_ref) {
  var className = _ref.className,
      label = _ref.label,
      tooltipContent = _ref.tooltipContent,
      tooltipPosition = _ref.tooltipPosition,
      title = _ref.title,
      iconType = _ref.iconType,
      rest = _objectWithoutProperties(_ref, ["className", "label", "tooltipContent", "tooltipPosition", "title", "iconType"]);

  var classes = (0, _classnames.default)('euiBetaBadge', {
    'euiBetaBadge--iconOnly': iconType
  }, className);
  var icon;

  if (iconType) {
    icon = _react.default.createElement(_icon.EuiIcon, {
      className: "euiBetaBadge__icon",
      type: iconType,
      size: "m",
      "aria-hidden": "true"
    });
  }

  if (tooltipContent) {
    return _react.default.createElement(_tool_tip.EuiToolTip, {
      position: tooltipPosition,
      content: tooltipContent,
      title: title || label
    }, _react.default.createElement("span", _extends({
      className: classes
    }, rest), icon || label));
  } else {
    return _react.default.createElement("span", _extends({
      className: classes,
      title: title || label
    }, rest), icon || label);
  }
};

exports.EuiBetaBadge = EuiBetaBadge;
EuiBetaBadge.propTypes = {
  className: _propTypes.default.string,

  /**
   * One word label like "Beta" or "Lab"
   */
  label: _propTypes.default.node.isRequired,

  /**
   * Supply an icon type if the badge should just be an icon
   */
  iconType: _icon.IconPropType,

  /**
   * Content for the tooltip
   */
  tooltipContent: _propTypes.default.node,

  /**
   * Custom position of the tooltip
   */
  tooltipPosition: _propTypes.default.string,

  /**
   * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used
   */
  title: _propTypes.default.string
};
EuiBetaBadge.defaultProps = {
  tooltipPosition: 'top'
};
EuiBetaBadge.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiBetaBadge",
  "props": {
    "tooltipPosition": {
      "defaultValue": {
        "value": "'top'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Custom position of the tooltip"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "label": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": "One word label like \"Beta\" or \"Lab\""
    },
    "iconType": {
      "type": {
        "name": "custom",
        "raw": "IconPropType"
      },
      "required": false,
      "description": "Supply an icon type if the badge should just be an icon"
    },
    "tooltipContent": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Content for the tooltip"
    },
    "title": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Optional title will be supplied as tooltip title or title attribute otherwise the label will be used"
    }
  }
};