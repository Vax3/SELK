"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiButtonToggle = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.function.name");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _toggle = require("../../toggle");

var _button = require("../button");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var EuiButtonToggle = function EuiButtonToggle(_ref) {
  var className = _ref.className,
      color = _ref.color,
      isDisabled = _ref.isDisabled,
      isEmpty = _ref.isEmpty,
      isIconOnly = _ref.isIconOnly,
      isSelected = _ref.isSelected,
      label = _ref.label,
      name = _ref.name,
      onChange = _ref.onChange,
      toggleClassName = _ref.toggleClassName,
      type = _ref.type,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, ["className", "color", "isDisabled", "isEmpty", "isIconOnly", "isSelected", "label", "name", "onChange", "toggleClassName", "type", "value"]);

  var classes = (0, _classnames.default)('euiButtonToggle', {
    'euiButtonToggle--isIconOnly': isIconOnly,
    'euiButtonToggle--isEmpty': isEmpty
  }, className);
  var wrapperClasses = (0, _classnames.default)('euiButtonToggle__wrapper', {
    'euiButtonToggle--isDisabled': isDisabled
  }, toggleClassName);
  var buttonContent = isIconOnly ? '' : label;
  return _react.default.createElement(_toggle.EuiToggle, {
    className: wrapperClasses,
    inputClassName: "euiButtonToggle__input",
    checked: isSelected,
    isDisabled: isDisabled,
    label: label,
    name: name,
    onChange: onChange,
    type: type,
    title: label,
    value: value
  }, _react.default.createElement(_button.EuiButton, _extends({
    tabIndex: "-1" // prevents double focus from input to button
    ,
    className: classes,
    color: color,
    disabled: isDisabled,
    size: isIconOnly ? 's' : undefined // only force small if it's the icon only version

  }, rest), buttonContent));
};

exports.EuiButtonToggle = EuiButtonToggle;
EuiButtonToggle.propTypes = {
  className: _propTypes.default.string,

  /**
   * Button label, which is also passed to `EuiToggle` as the input's label
   */
  label: _propTypes.default.string.isRequired,
  onChange: _propTypes.default.func,

  /**
   * See `EuiButton`
   */
  color: _propTypes.default.string,
  isDisabled: _propTypes.default.bool,

  /**
   * Hides the label from the button content and only displays the icon
   */
  isIconOnly: _propTypes.default.bool,

  /**
   * Simulates a `EuiButtonEmpty`
   */
  isEmpty: _propTypes.default.bool,

  /**
   * Initial state of the toggle
   */
  isSelected: _propTypes.default.bool,

  /**
   * Classnames to add to `EuiToggle` instead of the `EuiButton`
   */
  toggleClassName: _propTypes.default.string,

  /**
   * Is the button a single action or part of a group (multi)?
   * Used primarily for `EuiButtonGroup`
   */
  type: _propTypes.default.oneOf(_toggle.TOGGLE_TYPES)
};
EuiButtonToggle.defaultProps = {
  color: 'primary'
};
EuiButtonToggle.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiButtonToggle",
  "props": {
    "color": {
      "defaultValue": {
        "value": "'primary'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "See `EuiButton`"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "label": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": "Button label, which is also passed to `EuiToggle` as the input's label"
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "isDisabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isIconOnly": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Hides the label from the button content and only displays the icon"
    },
    "isEmpty": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Simulates a `EuiButtonEmpty`"
    },
    "isSelected": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Initial state of the toggle"
    },
    "toggleClassName": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Classnames to add to `EuiToggle` instead of the `EuiButton`"
    },
    "type": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": "TOGGLE_TYPES"
      },
      "required": false,
      "description": "Is the button a single action or part of a group (multi)?\nUsed primarily for `EuiButtonGroup`"
    }
  }
};