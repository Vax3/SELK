"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiHorizontalBarSeries = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.function.name");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactVis = require("react-vis");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EuiHorizontalBarSeries =
/*#__PURE__*/
function (_HorizontalBarSeries) {
  _inherits(EuiHorizontalBarSeries, _HorizontalBarSeries);

  function EuiHorizontalBarSeries() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, EuiHorizontalBarSeries);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EuiHorizontalBarSeries)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      isMouseOverValue: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onValueMouseOver", function () {
      _this.setState(function () {
        return {
          isMouseOverValue: true
        };
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onValueMouseOut", function () {
      _this.setState(function () {
        return {
          isMouseOverValue: false
        };
      });
    });

    return _this;
  }

  _createClass(EuiHorizontalBarSeries, [{
    key: "render",
    value: function render() {
      var isMouseOverValue = this.state.isMouseOverValue;

      var _this$props = this.props,
          name = _this$props.name,
          data = _this$props.data,
          color = _this$props.color,
          onValueClick = _this$props.onValueClick,
          rest = _objectWithoutProperties(_this$props, ["name", "data", "color", "onValueClick"]);

      var isHighDataVolume = data.length > 80 ? true : false;
      var classes = (0, _classnames.default)('euiBarSeries', isHighDataVolume && 'euiBarSeries--highDataVolume', isMouseOverValue && onValueClick && 'euiBarSeries--hoverEnabled');
      return _react.default.createElement(_reactVis.HorizontalBarSeries, _extends({
        key: name,
        className: classes,
        onValueClick: onValueClick,
        onValueMouseOver: this._onValueMouseOver,
        onValueMouseOut: this._onValueMouseOut,
        color: color,
        data: data
      }, rest));
    }
  }]);

  return EuiHorizontalBarSeries;
}(_reactVis.HorizontalBarSeries);

exports.EuiHorizontalBarSeries = EuiHorizontalBarSeries;
EuiHorizontalBarSeries.displayName = 'EuiHorizontalBarSeries';
EuiHorizontalBarSeries.propTypes = {
  /** The name used to define the data in tooltips and legends */
  name: _propTypes.default.string.isRequired,

  /** Array<{x: number, y: string|number}> */
  data: _propTypes.default.arrayOf(_propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  })).isRequired,

  /** See eui_palettes.js or colorPalette service for recommended colors */
  color: _propTypes.default.string,

  /**
   * Callback when clicking on a bar. Returns { x, y } object.
   */
  onValueClick: _propTypes.default.func
};
EuiHorizontalBarSeries.defaultProps = {};
EuiHorizontalBarSeries.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "_onValueMouseOver",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "_onValueMouseOut",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiHorizontalBarSeries",
  "props": {
    "name": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": "The name used to define the data in tooltips and legends"
    },
    "data": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "x": {
              "name": "number",
              "required": false
            },
            "y": {
              "name": "union",
              "value": [{
                "name": "string"
              }, {
                "name": "number"
              }],
              "required": false
            }
          }
        }
      },
      "required": true,
      "description": "Array<{x: number, y: string|number}>"
    },
    "color": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "See eui_palettes.js or colorPalette service for recommended colors"
    },
    "onValueClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Callback when clicking on a bar. Returns { x, y } object."
    }
  }
};