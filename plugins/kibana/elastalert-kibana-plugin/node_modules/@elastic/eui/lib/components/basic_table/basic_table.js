"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getItemId = getItemId;
exports.EuiBasicTable = exports.SelectionType = exports.ItemIdType = exports.ColumnType = exports.ComputedColumnType = exports.FieldDataColumnType = exports.FieldDataColumnTypeShape = exports.ActionsColumnType = void 0;

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.array.find");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.array.find-index");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _services = require("../../services");

var _predicate = require("../../services/predicate");

var _objects = require("../../services/objects");

var _flex = require("../flex");

var _table = require("../table/table");

var _table_header_cell_checkbox = require("../table/table_header_cell_checkbox");

var _checkbox = require("../form/checkbox/checkbox");

var _table_header_cell = require("../table/table_header_cell");

var _table_header = require("../table/table_header");

var _table_body = require("../table/table_body");

var _table_footer_cell = require("../table/table_footer_cell");

var _table_footer = require("../table/table_footer");

var _table_row_cell_checkbox = require("../table/table_row_cell_checkbox");

var _button_icon = require("../button/button_icon/button_icon");

var _icon = require("../icon");

var _collapsed_item_actions = require("./collapsed_item_actions");

var _expanded_item_actions = require("./expanded_item_actions");

var _table_row_cell = require("../table/table_row_cell");

var _table_row = require("../table/table_row");

var _pagination_bar = require("./pagination_bar");

var _icon2 = require("../icon/icon");

var _loading_table_body = require("./loading_table_body");

var _table_header_mobile = require("../table/mobile/table_header_mobile");

var _table_sort_mobile = require("../table/mobile/table_sort_mobile");

var _with_required_prop = require("../../utils/prop_types/with_required_prop");

var _accessibility = require("../accessibility");

var _i18n = require("../i18n");

var _make_id = _interopRequireDefault(require("../form/form_row/make_id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var dataTypesProfiles = {
  auto: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatAuto)(value);
    }
  },
  string: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatText)(value);
    }
  },
  number: {
    align: _services.RIGHT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatNumber)(value);
    }
  },
  boolean: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatBoolean)(value);
    }
  },
  date: {
    align: _services.LEFT_ALIGNMENT,
    render: function render(value) {
      return (0, _services.formatDate)(value);
    }
  }
};
var DATA_TYPES = Object.keys(dataTypesProfiles);

var DefaultItemActionType = _propTypes.default.shape({
  type: _propTypes.default.oneOf(['icon', 'button']),
  // default is 'button'
  name: _propTypes.default.string.isRequired,
  description: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func,
  // (item) => void,
  href: _propTypes.default.string,
  target: _propTypes.default.string,
  available: _propTypes.default.func,
  // (item) => boolean;
  enabled: _propTypes.default.func,
  // (item) => boolean;
  isPrimary: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([// required when type is 'icon'
  _propTypes.default.oneOf(_icon.ICON_TYPES), _propTypes.default.func // (item) => oneOf(ICON_TYPES)
  ]),
  color: _propTypes.default.oneOfType([_propTypes.default.oneOf(_button_icon.COLORS), _propTypes.default.func // (item) => oneOf(ICON_BUTTON_COLORS)
  ])
});

var CustomItemActionType = _propTypes.default.shape({
  render: _propTypes.default.func.isRequired,
  // (item, enabled) => PropTypes.node;
  available: _propTypes.default.func,
  // (item) => boolean;
  enabled: _propTypes.default.func,
  // (item) => boolean;
  isPrimary: _propTypes.default.bool
});

var SupportedItemActionType = _propTypes.default.oneOfType([DefaultItemActionType, CustomItemActionType]);

var ActionsColumnType = _propTypes.default.shape({
  actions: _propTypes.default.arrayOf(SupportedItemActionType).isRequired,
  name: _propTypes.default.node,
  description: _propTypes.default.string,
  width: _propTypes.default.string
});

exports.ActionsColumnType = ActionsColumnType;
var FieldDataColumnTypeShape = {
  field: _propTypes.default.string.isRequired,
  name: _propTypes.default.node.isRequired,
  description: _propTypes.default.string,
  dataType: _propTypes.default.oneOf(DATA_TYPES),
  width: _propTypes.default.string,
  sortable: _propTypes.default.bool,
  align: _propTypes.default.oneOf([_services.LEFT_ALIGNMENT, _services.RIGHT_ALIGNMENT]),
  truncateText: _propTypes.default.bool,
  render: _propTypes.default.func,
  // ((value, record) => PropTypes.node (also see [services/value_renderer] for basic implementations)
  footer: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element, _propTypes.default.func])
};
exports.FieldDataColumnTypeShape = FieldDataColumnTypeShape;

var FieldDataColumnType = _propTypes.default.shape(FieldDataColumnTypeShape);

exports.FieldDataColumnType = FieldDataColumnType;

var ComputedColumnType = _propTypes.default.shape({
  render: _propTypes.default.func.isRequired,
  // (record) => PropTypes.node
  name: _propTypes.default.node,
  description: _propTypes.default.string,
  width: _propTypes.default.string,
  truncateText: _propTypes.default.bool
});

exports.ComputedColumnType = ComputedColumnType;

var ColumnType = _propTypes.default.oneOfType([FieldDataColumnType, ComputedColumnType, ActionsColumnType]);

exports.ColumnType = ColumnType;

var ItemIdType = _propTypes.default.oneOfType([_propTypes.default.string, // the name of the item id property
_propTypes.default.func // (item) => string
]);

exports.ItemIdType = ItemIdType;

var SelectionType = _propTypes.default.shape({
  onSelectionChange: _propTypes.default.func,
  // (selection: item[]) => void;,
  selectable: _propTypes.default.func,
  // (item) => boolean;
  selectableMessage: _propTypes.default.func // (selectable, item) => boolean;

});

exports.SelectionType = SelectionType;

var SortingType = _propTypes.default.shape({
  sort: _services.PropertySortType,
  allowNeutralSort: _propTypes.default.bool
});

var BasicTablePropTypes = {
  itemId: ItemIdType,
  itemIdToExpandedRowMap: (0, _with_required_prop.withRequiredProp)(_propTypes.default.object, 'itemId', 'row expansion uses the itemId prop to identify each row'),
  items: _propTypes.default.array.isRequired,
  cellProps: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  className: _propTypes.default.string,
  columns: _propTypes.default.arrayOf(ColumnType).isRequired,
  compressed: _propTypes.default.bool,
  error: _propTypes.default.string,
  hasActions: _propTypes.default.bool,
  isExpandable: _propTypes.default.bool,
  isSelectable: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  noItemsMessage: _propTypes.default.node,
  onChange: _propTypes.default.func,
  pagination: _pagination_bar.PaginationType,
  responsive: _propTypes.default.bool,
  rowProps: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  selection: (0, _with_required_prop.withRequiredProp)(SelectionType, 'itemId', 'row selection uses the itemId prop to identify each row'),
  sorting: SortingType
};

function getItemId(item, itemId) {
  if (itemId) {
    if ((0, _predicate.isFunction)(itemId)) {
      return itemId(item);
    }

    return item[itemId];
  }
}

function getRowProps(item, rowProps) {
  if (rowProps) {
    if ((0, _predicate.isFunction)(rowProps)) {
      return rowProps(item);
    }

    return rowProps;
  }

  return {};
}

function getCellProps(item, column, cellProps) {
  if (cellProps) {
    if ((0, _predicate.isFunction)(cellProps)) {
      return cellProps(item, column);
    }

    return cellProps;
  }

  return {};
}

function getColumnFooter(column, _ref) {
  var items = _ref.items,
      pagination = _ref.pagination;

  if (column.footer) {
    if ((0, _predicate.isFunction)(column.footer)) {
      return column.footer({
        items: items,
        pagination: pagination
      });
    }

    return column.footer;
  }

  return undefined;
}

var EuiBasicTable =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiBasicTable, _Component);

  _createClass(EuiBasicTable, null, [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (!nextProps.selection) {
        // next props doesn't have a selection, reset our state
        return {
          selection: []
        };
      }

      var itemId = nextProps.itemId;
      var selection = prevState.selection.filter(function (selectedItem) {
        return nextProps.items.findIndex(function (item) {
          return getItemId(item, itemId) === getItemId(selectedItem, itemId);
        }) !== -1;
      });

      if (selection.length !== prevState.selection.length) {
        if (nextProps.selection.onSelectionChange) {
          nextProps.selection.onSelectionChange(selection);
        }

        return {
          selection: selection
        };
      }

      return null;
    }
  }]);

  function EuiBasicTable(props) {
    var _this;

    _classCallCheck(this, EuiBasicTable);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiBasicTable).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderSelectAll", function (isMobile) {
      var _this$props = _this.props,
          items = _this$props.items,
          selection = _this$props.selection;

      if (!selection) {
        return;
      }

      var selectableItems = items.filter(function (item) {
        return !selection.selectable || selection.selectable(item);
      });
      var checked = _this.state.selection && selectableItems.length > 0 && _this.state.selection.length === selectableItems.length;
      var disabled = selectableItems.length === 0;

      var onChange = function onChange(event) {
        if (event.target.checked) {
          _this.changeSelection(selectableItems);
        } else {
          _this.changeSelection([]);
        }
      };

      return _react.default.createElement(_i18n.EuiI18n, {
        token: "euiBasicTable.selectAllRows",
        default: "Select all rows"
      }, function (selectAllRows) {
        return _react.default.createElement(_checkbox.EuiCheckbox, {
          id: "_selection_column-checkbox_".concat((0, _make_id.default)()),
          type: isMobile ? null : 'inList',
          checked: checked,
          disabled: disabled,
          onChange: onChange // Only add data-test-subj to one of the checkboxes
          ,
          "data-test-subj": isMobile ? null : 'checkboxSelectAll',
          "aria-label": selectAllRows,
          label: isMobile ? selectAllRows : null
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resolveColumnSortDirection", function (column) {
      var sorting = _this.props.sorting;

      if (!sorting || !sorting.sort || !column.sortable) {
        return;
      }

      if (sorting.sort.field === column.field) {
        return sorting.sort.direction;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resolveColumnOnSort", function (column) {
      var sorting = _this.props.sorting;

      if (!sorting || !column.sortable) {
        return;
      }

      if (!_this.props.onChange) {
        throw new Error("BasicTable is configured to be sortable on column [".concat(column.field, "] but\n          [onChange] is not configured. This callback must be implemented to handle the sort requests"));
      }

      return function () {
        return _this.onColumnSortChange(column);
      };
    });

    _this.state = {
      selection: []
    };
    return _this;
  }

  _createClass(EuiBasicTable, [{
    key: "changeSelection",
    value: function changeSelection(selection) {
      if (!this.props.selection) {
        return;
      }

      this.setState({
        selection: selection
      });

      if (this.props.selection.onSelectionChange) {
        this.props.selection.onSelectionChange(selection);
      }
    }
  }, {
    key: "clearSelection",
    value: function clearSelection() {
      this.changeSelection([]);
    }
  }, {
    key: "onPageSizeChange",
    value: function onPageSizeChange(size) {
      this.clearSelection();
      var currentCriteria = EuiBasicTable.buildCriteria(this.props);

      var criteria = _objectSpread({}, currentCriteria, {
        page: {
          index: 0,
          // when page size changes, we take the user back to the first page
          size: size
        }
      });

      this.props.onChange(criteria);
    }
  }, {
    key: "onPageChange",
    value: function onPageChange(index) {
      this.clearSelection();
      var currentCriteria = EuiBasicTable.buildCriteria(this.props);

      var criteria = _objectSpread({}, currentCriteria, {
        page: _objectSpread({}, currentCriteria.page, {
          index: index
        })
      });

      this.props.onChange(criteria);
    }
  }, {
    key: "onColumnSortChange",
    value: function onColumnSortChange(column) {
      this.clearSelection();
      var currentCriteria = EuiBasicTable.buildCriteria(this.props);
      var direction = _services.SortDirection.ASC;

      if (currentCriteria && currentCriteria.sort && currentCriteria.sort.field === column.field) {
        direction = _services.SortDirection.reverse(currentCriteria.sort.direction);
      }

      var criteria = _objectSpread({}, currentCriteria, {
        // resetting the page if the criteria has one
        page: !currentCriteria.page ? undefined : {
          index: 0,
          size: currentCriteria.page.size
        },
        sort: {
          field: column.field,
          direction: direction
        }
      });

      this.props.onChange(criteria);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          loading = _this$props2.loading,
          items = _this$props2.items,
          itemId = _this$props2.itemId,
          columns = _this$props2.columns,
          pagination = _this$props2.pagination,
          sorting = _this$props2.sorting,
          selection = _this$props2.selection,
          onChange = _this$props2.onChange,
          error = _this$props2.error,
          noItemsMessage = _this$props2.noItemsMessage,
          compressed = _this$props2.compressed,
          itemIdToExpandedRowMap = _this$props2.itemIdToExpandedRowMap,
          responsive = _this$props2.responsive,
          isSelectable = _this$props2.isSelectable,
          isExpandable = _this$props2.isExpandable,
          hasActions = _this$props2.hasActions,
          rowProps = _this$props2.rowProps,
          cellProps = _this$props2.cellProps,
          rest = _objectWithoutProperties(_this$props2, ["className", "loading", "items", "itemId", "columns", "pagination", "sorting", "selection", "onChange", "error", "noItemsMessage", "compressed", "itemIdToExpandedRowMap", "responsive", "isSelectable", "isExpandable", "hasActions", "rowProps", "cellProps"]);

      var classes = (0, _classnames.default)('euiBasicTable', {
        'euiBasicTable-loading': loading
      }, className);
      var table = this.renderTable();
      var paginationBar = this.renderPaginationBar();
      return _react.default.createElement("div", _extends({
        className: classes
      }, rest), table, paginationBar);
    }
  }, {
    key: "renderTable",
    value: function renderTable() {
      var _this2 = this;

      var _this$props3 = this.props,
          compressed = _this$props3.compressed,
          responsive = _this$props3.responsive;
      var mobileHeader = responsive ? _react.default.createElement(_table_header_mobile.EuiTableHeaderMobile, null, _react.default.createElement(_flex.EuiFlexGroup, {
        responsive: false,
        justifyContent: "spaceBetween",
        alignItems: "baseline"
      }, _react.default.createElement(_flex.EuiFlexItem, {
        grow: false
      }, this.renderSelectAll(true)), _react.default.createElement(_flex.EuiFlexItem, {
        grow: false
      }, this.renderTableMobileSort()))) : undefined;
      var caption = this.renderTableCaption();
      var head = this.renderTableHead();
      var body = this.renderTableBody();
      var footer = this.renderTableFooter();
      return _react.default.createElement("div", {
        ref: function ref(element) {
          _this2.tableElement = element;
        }
      }, mobileHeader, _react.default.createElement(_table.EuiTable, {
        responsive: responsive,
        compressed: compressed
      }, caption, head, body, footer));
    }
  }, {
    key: "renderTableMobileSort",
    value: function renderTableMobileSort() {
      var _this3 = this;

      var _this$props4 = this.props,
          columns = _this$props4.columns,
          sorting = _this$props4.sorting;
      var items = [];

      if (!sorting) {
        return null;
      }

      columns.forEach(function (column, index) {
        if (!column.sortable || column.hideForMobile) {
          return;
        }

        var sortDirection = _this3.resolveColumnSortDirection(column);

        items.push({
          name: column.name,
          key: "_data_s_".concat(column.field, "_").concat(index),
          onSort: _this3.resolveColumnOnSort(column),
          isSorted: !!sortDirection,
          isSortAscending: sortDirection ? _services.SortDirection.isAsc(sortDirection) : undefined
        });
      });
      return items.length ? _react.default.createElement(_table_sort_mobile.EuiTableSortMobile, {
        items: items
      }) : null;
    }
  }, {
    key: "renderTableCaption",
    value: function renderTableCaption() {
      var items = this.props.items;
      return _react.default.createElement(_accessibility.EuiScreenReaderOnly, null, _react.default.createElement("caption", {
        role: "status",
        "aria-relevant": "text",
        "aria-live": "polite"
      }, _react.default.createElement(_i18n.EuiI18n, {
        token: "euiBasicTable.tableDescription",
        default: "Below is a table of {itemCount} items.",
        values: {
          itemCount: items.length
        }
      })));
    }
  }, {
    key: "renderTableHead",
    value: function renderTableHead() {
      var _this4 = this;

      var _this$props5 = this.props,
          columns = _this$props5.columns,
          selection = _this$props5.selection;
      var headers = [];

      if (selection) {
        headers.push(_react.default.createElement(_table_header_cell_checkbox.EuiTableHeaderCellCheckbox, {
          key: "_selection_column_h",
          width: "24px"
        }, this.renderSelectAll()));
      }

      columns.forEach(function (column, index) {
        var actions = column.actions,
            width = column.width,
            name = column.name,
            field = column.field,
            align = column.align,
            dataType = column.dataType,
            sortable = column.sortable,
            mobileOptions = column.mobileOptions,
            isMobileHeader = column.isMobileHeader,
            hideForMobile = column.hideForMobile;

        var columnAlign = align || _this4.getAlignForDataType(dataType); // actions column


        if (actions) {
          headers.push(_react.default.createElement(_table_header_cell.EuiTableHeaderCell, {
            key: "_actions_h_".concat(index),
            align: "right",
            width: width,
            mobileOptions: mobileOptions
          }, name));
          return;
        } // computed column


        if (!field) {
          headers.push(_react.default.createElement(_table_header_cell.EuiTableHeaderCell, {
            key: "_computed_column_h_".concat(index),
            align: columnAlign,
            width: width,
            mobileOptions: mobileOptions
          }, name));
          return;
        } // field data column


        var sorting = {};

        if (_this4.props.sorting && sortable) {
          var sortDirection = _this4.resolveColumnSortDirection(column);

          sorting.isSorted = !!sortDirection;
          sorting.isSortAscending = sortDirection ? _services.SortDirection.isAsc(sortDirection) : undefined;
          sorting.onSort = _this4.resolveColumnOnSort(column);
          sorting.allowNeutralSort = _this4.props.sorting.allowNeutralSort;
        }

        headers.push(_react.default.createElement(_table_header_cell.EuiTableHeaderCell, _extends({
          key: "_data_h_".concat(field, "_").concat(index),
          align: columnAlign,
          width: width,
          isMobileHeader: isMobileHeader,
          hideForMobile: hideForMobile,
          mobileOptions: mobileOptions,
          "data-test-subj": "tableHeaderCell_".concat(field, "_").concat(index)
        }, sorting), name));
      });
      return _react.default.createElement(_table_header.EuiTableHeader, null, headers);
    }
  }, {
    key: "renderTableFooter",
    value: function renderTableFooter() {
      var _this$props6 = this.props,
          items = _this$props6.items,
          columns = _this$props6.columns,
          pagination = _this$props6.pagination,
          selection = _this$props6.selection;
      var footers = [];
      var hasDefinedFooter = false;

      if (selection) {
        // Create an empty cell to compensate for additional selection column
        footers.push(_react.default.createElement(_table_footer_cell.EuiTableFooterCell, {
          key: "_selection_column_f"
        }, undefined));
      }

      columns.forEach(function (column) {
        var footer = getColumnFooter(column, {
          items: items,
          pagination: pagination
        });

        if (column.mobileOptions && column.mobileOptions.only || column.isMobileHeader) {
          return; // exclude columns that only exist for mobile headers
        }

        if (footer) {
          footers.push(_react.default.createElement(_table_footer_cell.EuiTableFooterCell, {
            key: "footer_".concat(column.field),
            align: column.align
          }, footer));
          hasDefinedFooter = true;
        } else {
          // Footer is undefined, so create an empty cell to preserve layout
          footers.push(_react.default.createElement(_table_footer_cell.EuiTableFooterCell, {
            key: "footer_empty_".concat(footers.length - 1),
            align: column.align
          }, undefined));
        }
      });
      return footers.length && hasDefinedFooter ? _react.default.createElement(_table_footer.EuiTableFooter, null, footers) : null;
    }
  }, {
    key: "renderTableBody",
    value: function renderTableBody() {
      var _this5 = this;

      if (this.props.error) {
        return this.renderErrorBody(this.props.error);
      }

      var items = this.props.items;

      if (items.length === 0) {
        return this.renderEmptyBody();
      }

      var rows = items.map(function (item, index) {
        // if there's pagination the item's index must be adjusted to the where it is in the whole dataset
        var tableItemIndex = _this5.props.pagination ? _this5.props.pagination.pageIndex * _this5.props.pagination.pageSize + index : index;
        return _this5.renderItemRow(item, tableItemIndex);
      });

      if (this.props.loading) {
        return _react.default.createElement(_loading_table_body.LoadingTableBody, null, rows);
      }

      return _react.default.createElement(_table_body.EuiTableBody, null, rows);
    }
  }, {
    key: "renderErrorBody",
    value: function renderErrorBody(error) {
      var colSpan = this.props.columns.length + (this.props.selection ? 1 : 0);
      return _react.default.createElement(_table_body.EuiTableBody, null, _react.default.createElement(_table_row.EuiTableRow, null, _react.default.createElement(_table_row_cell.EuiTableRowCell, {
        align: "center",
        colSpan: colSpan,
        isMobileFullWidth: true
      }, _react.default.createElement(_icon2.EuiIcon, {
        type: "minusInCircle",
        color: "danger"
      }), " ", error)));
    }
  }, {
    key: "renderEmptyBody",
    value: function renderEmptyBody() {
      var _this$props7 = this.props,
          columns = _this$props7.columns,
          selection = _this$props7.selection,
          noItemsMessage = _this$props7.noItemsMessage;
      var colSpan = columns.length + (selection ? 1 : 0);
      return _react.default.createElement(_table_body.EuiTableBody, null, _react.default.createElement(_table_row.EuiTableRow, null, _react.default.createElement(_table_row_cell.EuiTableRowCell, {
        align: "center",
        colSpan: colSpan,
        isMobileFullWidth: true
      }, noItemsMessage)));
    }
  }, {
    key: "renderItemRow",
    value: function renderItemRow(item, rowIndex) {
      var _this6 = this;

      var _this$props8 = this.props,
          columns = _this$props8.columns,
          selection = _this$props8.selection,
          isSelectable = _this$props8.isSelectable,
          hasActions = _this$props8.hasActions,
          _this$props8$itemIdTo = _this$props8.itemIdToExpandedRowMap,
          itemIdToExpandedRowMap = _this$props8$itemIdTo === void 0 ? {} : _this$props8$itemIdTo,
          isExpandable = _this$props8.isExpandable;
      var cells = [];
      var itemIdCallback = this.props.itemId;
      var itemId = getItemId(item, itemIdCallback) || rowIndex;
      var selected = !selection ? false : this.state.selection && !!this.state.selection.find(function (selectedItem) {
        return getItemId(selectedItem, itemIdCallback) === itemId;
      });
      var calculatedHasSelection;

      if (selection) {
        cells.push(this.renderItemSelectionCell(itemId, item, selected));
        calculatedHasSelection = true;
      }

      var calculatedHasActions;
      columns.forEach(function (column, columnIndex) {
        if (column.actions) {
          cells.push(_this6.renderItemActionsCell(itemId, item, column, columnIndex, rowIndex));
          calculatedHasActions = true;
        } else if (column.field) {
          cells.push(_this6.renderItemFieldDataCell(itemId, item, column, columnIndex));
        } else {
          cells.push(_this6.renderItemComputedCell(itemId, item, column, columnIndex));
        }
      }); // Occupy full width of table, taking checkbox & mobile only columns into account.

      var expandedRowColSpan = selection ? columns.length + 1 : columns.length;
      var mobileOnlyCols = columns.reduce(function (num, column) {
        if (column.mobileOptions && column.mobileOptions.only) {
          return num + 1;
        }

        return column.isMobileHeader ? num + 1 : num + 0; // BWC only
      }, 0);
      expandedRowColSpan = expandedRowColSpan - mobileOnlyCols; // We'll use the ID to associate the expanded row with the original.

      var hasExpandedRow = itemIdToExpandedRowMap.hasOwnProperty(itemId);
      var expandedRowId = hasExpandedRow ? "row_".concat(itemId, "_expansion") : undefined;
      var expandedRow = hasExpandedRow ? _react.default.createElement(_table_row.EuiTableRow, {
        id: expandedRowId,
        isExpandedRow: true,
        isSelectable: isSelectable
      }, _react.default.createElement(_table_row_cell.EuiTableRowCell, {
        colSpan: expandedRowColSpan
      }, itemIdToExpandedRowMap[itemId])) : undefined;
      var rowPropsCallback = this.props.rowProps;
      var rowProps = getRowProps(item, rowPropsCallback);

      var row = _react.default.createElement(_table_row.EuiTableRow, _extends({
        "aria-owns": expandedRowId,
        isSelectable: isSelectable == null ? calculatedHasSelection : isSelectable,
        isSelected: selected,
        hasActions: hasActions == null ? calculatedHasActions : hasActions,
        isExpandable: isExpandable
      }, rowProps), cells);

      return _react.default.createElement(_react.Fragment, {
        key: "row_".concat(itemId)
      }, rowProps.onClick ? _react.default.createElement(_accessibility.EuiKeyboardAccessible, null, row) : row, expandedRow);
    }
  }, {
    key: "renderItemSelectionCell",
    value: function renderItemSelectionCell(itemId, item, selected) {
      var _this7 = this;

      var selection = this.props.selection;
      var key = "_selection_column_".concat(itemId);
      var checked = selected;
      var disabled = selection.selectable && !selection.selectable(item);
      var title = selection.selectableMessage && selection.selectableMessage(!disabled, item);

      var onChange = function onChange(event) {
        if (event.target.checked) {
          _this7.changeSelection(_toConsumableArray(_this7.state.selection).concat([item]));
        } else {
          var itemIdCallback = _this7.props.itemId;

          _this7.changeSelection(_this7.state.selection.reduce(function (selection, selectedItem) {
            if (getItemId(selectedItem, itemIdCallback) !== itemId) {
              selection.push(selectedItem);
            }

            return selection;
          }, []));
        }
      };

      return _react.default.createElement(_table_row_cell_checkbox.EuiTableRowCellCheckbox, {
        key: key
      }, _react.default.createElement(_i18n.EuiI18n, {
        token: "euiBasicTable.selectThisRow",
        default: "Select this row"
      }, function (selectThisRow) {
        return _react.default.createElement(_checkbox.EuiCheckbox, {
          id: "".concat(key, "-checkbox"),
          type: "inList",
          disabled: disabled,
          checked: checked,
          onChange: onChange,
          title: title,
          "aria-label": selectThisRow,
          "data-test-subj": "checkboxSelectRow-".concat(itemId)
        });
      }));
    }
  }, {
    key: "renderItemActionsCell",
    value: function renderItemActionsCell(itemId, item, column, columnIndex) {
      var _this8 = this;

      var actionEnabled = function actionEnabled(action) {
        return _this8.state.selection.length === 0 && (!action.enabled || action.enabled(item));
      };

      var actualActions = column.actions;

      if (column.actions.length > 2) {
        // if any of the actions `isPrimary`, add them inline as well, but only the first 2
        var primaryActions = column.actions.filter(function (o) {
          return o.isPrimary;
        });
        actualActions = primaryActions.slice(0, 2); // if we have more than 1 action, we don't show them all in the cell, instead we
        // put them all in a popover tool. This effectively means we can only have a maximum
        // of one tool per row (it's either and normal action, or it's a popover that shows multiple actions)
        //
        // here we create a single custom action that triggers the popover with all the configured actions

        actualActions.push({
          name: 'All actions',
          render: function render(item) {
            return _react.default.createElement(_collapsed_item_actions.CollapsedItemActions, {
              actions: column.actions,
              itemId: itemId,
              item: item,
              actionEnabled: actionEnabled
            });
          }
        });
      }

      var tools = _react.default.createElement(_expanded_item_actions.ExpandedItemActions, {
        actions: actualActions,
        itemId: itemId,
        item: item,
        actionEnabled: actionEnabled
      });

      var key = "record_actions_".concat(itemId, "_").concat(columnIndex);
      return _react.default.createElement(_table_row_cell.EuiTableRowCell, {
        showOnHover: true,
        key: key,
        align: "right",
        textOnly: false,
        hasActions: true
      }, tools);
    }
  }, {
    key: "renderItemFieldDataCell",
    value: function renderItemFieldDataCell(itemId, item, column, columnIndex) {
      var field = column.field,
          render = column.render,
          dataType = column.dataType;
      var key = "_data_column_".concat(field, "_").concat(itemId, "_").concat(columnIndex);
      var contentRenderer = render || this.getRendererForDataType(dataType);
      var value = (0, _objects.get)(item, field);
      var content = contentRenderer(value, item);
      return this.renderItemCell(item, column, key, content);
    }
  }, {
    key: "renderItemComputedCell",
    value: function renderItemComputedCell(itemId, item, column, columnIndex) {
      var render = column.render,
          dataType = column.dataType;
      var key = "_computed_column_".concat(itemId, "_").concat(columnIndex);
      var contentRenderer = render || this.getRendererForDataType(dataType);
      var content = contentRenderer(item);
      return this.renderItemCell(item, column, key, content);
    }
  }, {
    key: "renderItemCell",
    value: function renderItemCell(item, column, key, content) {
      var align = column.align,
          render = column.render,
          dataType = column.dataType,
          isExpander = column.isExpander,
          textOnly = column.textOnly,
          name = column.name,
          field = column.field,
          description = column.description,
          sortable = column.sortable,
          footer = column.footer,
          mobileOptions = column.mobileOptions,
          rest = _objectWithoutProperties(column, ["align", "render", "dataType", "isExpander", "textOnly", "name", "field", "description", "sortable", "footer", "mobileOptions"]);

      var columnAlign = align || this.getAlignForDataType(dataType);
      var cellPropsCallback = this.props.cellProps;
      var cellProps = getCellProps(item, column, cellPropsCallback);
      return _react.default.createElement(_table_row_cell.EuiTableRowCell, _extends({
        key: key,
        align: columnAlign,
        isExpander: isExpander,
        textOnly: textOnly || !render,
        mobileOptions: _objectSpread({}, mobileOptions, {
          render: mobileOptions && mobileOptions.render && mobileOptions.render(item),
          header: mobileOptions && mobileOptions.header === false ? false : name
        })
      }, cellProps, rest), content);
    }
  }, {
    key: "getRendererForDataType",
    value: function getRendererForDataType() {
      var dataType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto';
      var profile = dataTypesProfiles[dataType];

      if (!profile) {
        throw new Error("Unknown dataType [".concat(dataType, "]. The supported data types are [").concat(DATA_TYPES.join(', '), "]"));
      }

      return profile.render;
    }
  }, {
    key: "getAlignForDataType",
    value: function getAlignForDataType() {
      var dataType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto';
      var profile = dataTypesProfiles[dataType];

      if (!profile) {
        throw new Error("Unknown dataType [".concat(dataType, "]. The supported data types are [").concat(DATA_TYPES.join(', '), "]"));
      }

      return profile.align;
    }
  }, {
    key: "renderPaginationBar",
    value: function renderPaginationBar() {
      var _this$props9 = this.props,
          error = _this$props9.error,
          pagination = _this$props9.pagination,
          onChange = _this$props9.onChange;

      if (!error && pagination) {
        if (!onChange) {
          throw new Error("The Basic Table is configured with pagination but [onChange] is\n        not configured. This callback must be implemented to handle pagination changes");
        }

        return _react.default.createElement(_pagination_bar.PaginationBar, {
          pagination: pagination,
          onPageSizeChange: this.onPageSizeChange.bind(this),
          onPageChange: this.onPageChange.bind(this)
        });
      }
    }
  }], [{
    key: "buildCriteria",
    value: function buildCriteria(props) {
      var criteria = {};

      if (props.pagination) {
        criteria.page = {
          index: props.pagination.pageIndex,
          size: props.pagination.pageSize
        };
      }

      if (props.sorting) {
        criteria.sort = props.sorting.sort;
      }

      return criteria;
    }
  }]);

  return EuiBasicTable;
}(_react.Component);

exports.EuiBasicTable = EuiBasicTable;

_defineProperty(EuiBasicTable, "propTypes", BasicTablePropTypes);

_defineProperty(EuiBasicTable, "defaultProps", {
  responsive: true,
  noItemsMessage: 'No items found'
});

EuiBasicTable.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "getDerivedStateFromProps",
    "docblock": null,
    "modifiers": ["static"],
    "params": [{
      "name": "nextProps",
      "type": null
    }, {
      "name": "prevState",
      "type": null
    }],
    "returns": null
  }, {
    "name": "buildCriteria",
    "docblock": null,
    "modifiers": ["static"],
    "params": [{
      "name": "props",
      "type": null
    }],
    "returns": null
  }, {
    "name": "changeSelection",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "selection",
      "type": null
    }],
    "returns": null
  }, {
    "name": "clearSelection",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "onPageSizeChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "size",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onPageChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "index",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onColumnSortChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "column",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderTable",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderTableMobileSort",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderTableCaption",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderSelectAll",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "isMobile",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderTableHead",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderTableFooter",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderTableBody",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderErrorBody",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "error",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderEmptyBody",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderItemRow",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "item",
      "type": null
    }, {
      "name": "rowIndex",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderItemSelectionCell",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "itemId",
      "type": null
    }, {
      "name": "item",
      "type": null
    }, {
      "name": "selected",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderItemActionsCell",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "itemId",
      "type": null
    }, {
      "name": "item",
      "type": null
    }, {
      "name": "column",
      "type": null
    }, {
      "name": "columnIndex",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderItemFieldDataCell",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "itemId",
      "type": null
    }, {
      "name": "item",
      "type": null
    }, {
      "name": "column",
      "type": null
    }, {
      "name": "columnIndex",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderItemComputedCell",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "itemId",
      "type": null
    }, {
      "name": "item",
      "type": null
    }, {
      "name": "column",
      "type": null
    }, {
      "name": "columnIndex",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderItemCell",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "item",
      "type": null
    }, {
      "name": "column",
      "type": null
    }, {
      "name": "key",
      "type": null
    }, {
      "name": "content",
      "type": null
    }],
    "returns": null
  }, {
    "name": "resolveColumnSortDirection",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "column",
      "type": null
    }],
    "returns": null
  }, {
    "name": "resolveColumnOnSort",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "column",
      "type": null
    }],
    "returns": null
  }, {
    "name": "getRendererForDataType",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "dataType",
      "type": null
    }],
    "returns": null
  }, {
    "name": "getAlignForDataType",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "dataType",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderPaginationBar",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiBasicTable",
  "props": {
    "responsive": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "noItemsMessage": {
      "defaultValue": {
        "value": "'No items found'",
        "computed": false
      },
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "itemId": {
      "type": {
        "name": "custom",
        "raw": "ItemIdType"
      },
      "required": false,
      "description": ""
    },
    "itemIdToExpandedRowMap": {
      "type": {
        "name": "custom",
        "raw": "withRequiredProp(PropTypes.object, 'itemId', 'row expansion uses the itemId prop to identify each row')"
      },
      "required": false,
      "description": ""
    },
    "items": {
      "type": {
        "name": "array"
      },
      "required": true,
      "description": ""
    },
    "cellProps": {
      "type": {
        "name": "union",
        "value": [{
          "name": "func"
        }, {
          "name": "object"
        }]
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "columns": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "custom",
          "raw": "ColumnType"
        }
      },
      "required": true,
      "description": ""
    },
    "compressed": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "error": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "hasActions": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isExpandable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isSelectable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "loading": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "pagination": {
      "type": {
        "name": "custom",
        "raw": "PaginationType"
      },
      "required": false,
      "description": ""
    },
    "rowProps": {
      "type": {
        "name": "union",
        "value": [{
          "name": "func"
        }, {
          "name": "object"
        }]
      },
      "required": false,
      "description": ""
    },
    "selection": {
      "type": {
        "name": "custom",
        "raw": "withRequiredProp(SelectionType, 'itemId', 'row selection uses the itemId prop to identify each row')"
      },
      "required": false,
      "description": ""
    },
    "sorting": {
      "type": {
        "name": "custom",
        "raw": "SortingType"
      },
      "required": false,
      "description": ""
    }
  }
};