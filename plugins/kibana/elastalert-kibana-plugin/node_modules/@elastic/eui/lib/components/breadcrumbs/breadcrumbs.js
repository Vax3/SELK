"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiBreadcrumbs = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _link = require("../link");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var limitBreadcrumbs = function limitBreadcrumbs(breadcrumbs, max) {
  var breadcrumbsAtStart = [];
  var breadcrumbsAtEnd = [];
  var limit = Math.min(max, breadcrumbs.length);

  for (var i = 0; i < limit; i++) {
    // We'll alternate with displaying breadcrumbs at the end and at the start, but be biased
    // towards breadcrumbs the end so that if max is an odd number, we'll have one more
    // breadcrumb visible at the end than at the beginning.
    var isEven = i % 2 === 0; // We're picking breadcrumbs from the front AND the back, so we treat each iteration as a
    // half-iteration.

    var normalizedIndex = Math.floor(i * 0.5);
    var indexOfBreadcrumb = isEven ? breadcrumbs.length - 1 - normalizedIndex : normalizedIndex;
    var breadcrumb = breadcrumbs[indexOfBreadcrumb];

    if (isEven) {
      breadcrumbsAtEnd.unshift(breadcrumb);
    } else {
      breadcrumbsAtStart.push(breadcrumb);
    }
  }

  if (max < breadcrumbs.length) {
    breadcrumbsAtStart.push(_react.default.createElement(EuiBreadcrumbCollapsed, {
      key: "collapsed"
    }));
  }

  return breadcrumbsAtStart.concat(breadcrumbsAtEnd);
};

var EuiBreadcrumbCollapsed = function EuiBreadcrumbCollapsed() {
  return _react.default.createElement(_react.Fragment, null, _react.default.createElement("div", {
    className: "euiBreadcrumb euiBreadcrumb--collapsed"
  }, "\u2026"), _react.default.createElement(EuiBreadcrumbSeparator, null));
};

var EuiBreadcrumbSeparator = function EuiBreadcrumbSeparator() {
  return _react.default.createElement("div", {
    className: "euiBreadcrumbSeparator"
  });
};

var EuiBreadcrumbs = function EuiBreadcrumbs(_ref) {
  var breadcrumbs = _ref.breadcrumbs,
      className = _ref.className,
      responsive = _ref.responsive,
      truncate = _ref.truncate,
      max = _ref.max,
      rest = _objectWithoutProperties(_ref, ["breadcrumbs", "className", "responsive", "truncate", "max"]);

  var breadcrumbElements = breadcrumbs.map(function (breadcrumb, index) {
    var text = breadcrumb.text,
        href = breadcrumb.href,
        onClick = breadcrumb.onClick,
        truncate = breadcrumb.truncate,
        breadcrumbClassName = breadcrumb.className,
        breadcrumbRest = _objectWithoutProperties(breadcrumb, ["text", "href", "onClick", "truncate", "className"]);

    var isLastBreadcrumb = index === breadcrumbs.length - 1;
    var breadcrumbClasses = (0, _classnames.default)('euiBreadcrumb', breadcrumbClassName, {
      'euiBreadcrumb--last': isLastBreadcrumb,
      'euiBreadcrumb--truncate': truncate
    });
    var link;

    if (isLastBreadcrumb && !href) {
      link = _react.default.createElement("span", _extends({
        className: breadcrumbClasses,
        title: text,
        "aria-current": "page"
      }, breadcrumbRest), text);
    } else {
      link = _react.default.createElement(_link.EuiLink, _extends({
        color: isLastBreadcrumb ? 'text' : 'subdued',
        onClick: onClick,
        href: href,
        className: breadcrumbClasses,
        title: text
      }, breadcrumbRest), text);
    }

    var separator;

    if (!isLastBreadcrumb) {
      separator = _react.default.createElement(EuiBreadcrumbSeparator, null);
    }

    return _react.default.createElement(_react.Fragment, {
      key: index
    }, link, separator);
  });
  var limitedBreadcrumbs = max ? limitBreadcrumbs(breadcrumbElements, max) : breadcrumbElements;
  var classes = (0, _classnames.default)('euiBreadcrumbs', className, {
    'euiBreadcrumbs--truncate': truncate,
    'euiBreadcrumbs--responsive': responsive
  });
  return _react.default.createElement("nav", _extends({
    "aria-label": "breadcrumb",
    className: classes
  }, rest), limitedBreadcrumbs);
};

exports.EuiBreadcrumbs = EuiBreadcrumbs;
EuiBreadcrumbs.propTypes = {
  className: _propTypes.default.string,

  /**
   * Hides left most breadcrumbs as window gets smaller
   */
  responsive: _propTypes.default.bool,

  /**
   * Forces all breadcrumbs to single line and
   * truncates each breadcrumb to a particular width,
   * except for the last item
   */
  truncate: _propTypes.default.bool,

  /**
   * Condenses the inner items past the maximum set here
   * into a single ellipses item
   */
  max: _propTypes.default.number,

  /**
   * The array of individual breadcrumbs, takes the following props.
   * `text` (node) (required): visible label of the breadcrumb,
   * `href` or `onClick`: provide only one (last breadcrumb will not apply either),
   * `truncate` (bool): Force a max-width on the breadcrumb text
   */
  breadcrumbs: _propTypes.default.arrayOf(_propTypes.default.shape({
    text: _propTypes.default.node.isRequired,
    href: _propTypes.default.string,
    onClick: _propTypes.default.func,
    truncate: _propTypes.default.bool
  })).isRequired
};
EuiBreadcrumbs.defaultProps = {
  responsive: true,
  truncate: true,
  max: 5
};
EuiBreadcrumbs.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiBreadcrumbs",
  "props": {
    "responsive": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Hides left most breadcrumbs as window gets smaller"
    },
    "truncate": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Forces all breadcrumbs to single line and\ntruncates each breadcrumb to a particular width,\nexcept for the last item"
    },
    "max": {
      "defaultValue": {
        "value": "5",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Condenses the inner items past the maximum set here\ninto a single ellipses item"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "breadcrumbs": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "text": {
              "name": "node",
              "required": true
            },
            "href": {
              "name": "string",
              "required": false
            },
            "onClick": {
              "name": "func",
              "required": false
            },
            "truncate": {
              "name": "bool",
              "required": false
            }
          }
        }
      },
      "required": true,
      "description": "The array of individual breadcrumbs, takes the following props.\n`text` (node) (required): visible label of the breadcrumb,\n`href` or `onClick`: provide only one (last breadcrumb will not apply either),\n`truncate` (bool): Force a max-width on the breadcrumb text"
    }
  }
};