"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiInMemoryTable = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.array.find");

require("core-js/modules/es6.regexp.search");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.string.includes");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _basic_table = require("./basic_table");

var _pagination_bar = require("./pagination_bar");

var _predicate = require("../../services/predicate");

var _sort = require("../../services/sort");

var _search_bar = require("../search_bar");

var _spacer = require("../spacer/spacer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// same as ColumnType from EuiBasicTable, but need to modify the `sortable` type
var ColumnType = _propTypes.default.oneOfType([_propTypes.default.shape(_objectSpread({}, _basic_table.FieldDataColumnTypeShape, {
  sortable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func])
})), _basic_table.ComputedColumnType, _basic_table.ActionsColumnType]);

var InMemoryTablePropTypes = {
  columns: _propTypes.default.arrayOf(ColumnType).isRequired,
  items: _propTypes.default.array,
  loading: _propTypes.default.bool,
  message: _propTypes.default.node,
  error: _propTypes.default.string,
  compressed: _propTypes.default.bool,
  search: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
    defaultQuery: _search_bar.QueryType,
    box: _propTypes.default.shape(_objectSpread({}, _search_bar.SearchBoxConfigPropTypes, {
      schema: _propTypes.default.oneOfType([// here we enable the user to just assign 'true' to the schema, in which case
      // we will auto-generate it out of the columns configuration
      _propTypes.default.bool, _search_bar.SearchBoxConfigPropTypes.schema])
    })),
    filters: _search_bar.SearchFiltersFiltersType,
    onChange: _propTypes.default.func,
    executeQueryOptions: _propTypes.default.shape({
      defaultFields: _propTypes.default.arrayOf(_propTypes.default.string),
      isClauseMatcher: _propTypes.default.func,
      explain: _propTypes.default.bool
    })
  })]),
  pagination: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
    pageSizeOptions: _propTypes.default.arrayOf(_propTypes.default.number)
  }), _propTypes.default.shape({
    initialPageIndex: _propTypes.default.number,
    initialPageSize: _propTypes.default.number,
    pageSizeOptions: _propTypes.default.arrayOf(_propTypes.default.number)
  })]),
  sorting: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
    sort: _sort.PropertySortType
  })]),

  /**
   * Set `allowNeutralSort` to false to force column sorting. Defaults to true.
   */
  allowNeutralSort: _propTypes.default.bool,
  selection: _basic_table.SelectionType,
  itemId: _basic_table.ItemIdType,
  rowProps: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  cellProps: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  onTableChange: _propTypes.default.func
};

var getInitialQuery = function getInitialQuery(search) {
  if (!search) {
    return;
  }

  var query = search.defaultQuery || '';
  return (0, _predicate.isString)(query) ? _search_bar.EuiSearchBar.Query.parse(query) : query;
};

var getInitialPagination = function getInitialPagination(pagination) {
  if (!pagination) {
    return {
      pageIndex: undefined,
      pageSize: undefined
    };
  }

  var _pagination$initialPa = pagination.initialPageIndex,
      initialPageIndex = _pagination$initialPa === void 0 ? 0 : _pagination$initialPa,
      initialPageSize = pagination.initialPageSize,
      _pagination$pageSizeO = pagination.pageSizeOptions,
      pageSizeOptions = _pagination$pageSizeO === void 0 ? _pagination_bar.defaults.pageSizeOptions : _pagination$pageSizeO,
      hidePerPageOptions = pagination.hidePerPageOptions;

  if (!hidePerPageOptions && initialPageSize && (!pageSizeOptions || !pageSizeOptions.includes(initialPageSize))) {
    throw new Error("EuiInMemoryTable received initialPageSize ".concat(initialPageSize, ", which wasn't provided within pageSizeOptions."));
  }

  var defaultPageSize = pageSizeOptions ? pageSizeOptions[0] : _pagination_bar.defaults.pageSizeOptions[0];
  return {
    pageIndex: initialPageIndex,
    pageSize: initialPageSize || defaultPageSize,
    pageSizeOptions: pageSizeOptions,
    hidePerPageOptions: hidePerPageOptions
  };
};

var getInitialSorting = function getInitialSorting(sorting) {
  if (!sorting || !sorting.sort) {
    return {
      sortField: undefined,
      sortDirection: undefined
    };
  }

  var _sorting$sort = sorting.sort,
      sortField = _sorting$sort.field,
      sortDirection = _sorting$sort.direction;
  return {
    sortField: sortField,
    sortDirection: sortDirection
  };
};

var EuiInMemoryTable =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiInMemoryTable, _Component);

  _createClass(EuiInMemoryTable, null, [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.items !== prevState.prevProps.items) {
        // We have new items because an external search has completed, so reset pagination state.
        return {
          prevProps: {
            items: nextProps.items
          },
          pageIndex: 0
        };
      } else {
        return null;
      }
    }
  }]);

  function EuiInMemoryTable(props) {
    var _this;

    _classCallCheck(this, EuiInMemoryTable);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiInMemoryTable).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTableChange", function (_ref) {
      var _ref$page = _ref.page,
          page = _ref$page === void 0 ? {} : _ref$page,
          _ref$sort = _ref.sort,
          sort = _ref$sort === void 0 ? {} : _ref$sort;

      if (_this.props.onTableChange) {
        _this.props.onTableChange({
          page: page,
          sort: sort
        });
      }

      var pageIndex = page.index,
          pageSize = page.size;
      var sortField = sort.field,
          sortDirection = sort.direction; // Allow going back to 'neutral' sorting

      if (_this.state.allowNeutralSort && _this.state.sortField === sortField && _this.state.sortDirection === 'desc' && sortDirection === 'asc') {
        sortField = '';
        sortDirection = '';
      }

      _this.setState({
        pageIndex: pageIndex,
        pageSize: pageSize,
        sortField: sortField,
        sortDirection: sortDirection
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onQueryChange", function (_ref2) {
      var query = _ref2.query,
          queryText = _ref2.queryText,
          error = _ref2.error;

      if (_this.props.search.onChange) {
        var shouldQueryInMemory = _this.props.search.onChange({
          query: query,
          queryText: queryText,
          error: error
        });

        if (!shouldQueryInMemory) {
          return;
        }
      } // Reset pagination state.


      _this.setState({
        query: query,
        pageIndex: 0
      });
    });

    var search = props.search,
        pagination = props.pagination,
        sorting = props.sorting,
        allowNeutralSort = props.allowNeutralSort;

    var _getInitialPagination = getInitialPagination(pagination),
        _pageIndex = _getInitialPagination.pageIndex,
        _pageSize = _getInitialPagination.pageSize,
        pageSizeOptions = _getInitialPagination.pageSizeOptions,
        hidePerPageOptions = _getInitialPagination.hidePerPageOptions;

    var _getInitialSorting = getInitialSorting(sorting),
        _sortField = _getInitialSorting.sortField,
        _sortDirection = _getInitialSorting.sortDirection;

    _this.state = {
      prevProps: {
        items: props.items
      },
      query: getInitialQuery(search),
      pageIndex: _pageIndex,
      pageSize: _pageSize,
      pageSizeOptions: pageSizeOptions,
      sortField: _sortField,
      sortDirection: _sortDirection,
      allowNeutralSort: allowNeutralSort === false ? false : true,
      hidePerPageOptions: hidePerPageOptions
    };
    return _this;
  }

  _createClass(EuiInMemoryTable, [{
    key: "renderSearchBar",
    value: function renderSearchBar() {
      var search = this.props.search;

      if (search) {
        var _ref3 = (0, _predicate.isBoolean)(search) ? {} : search,
            onChange = _ref3.onChange,
            searchBarProps = _objectWithoutProperties(_ref3, ["onChange"]);

        if (searchBarProps.box && searchBarProps.box.schema === true) {
          searchBarProps.box.schema = this.resolveSearchSchema();
        }

        return _react.default.createElement(_search_bar.EuiSearchBar, _extends({
          onChange: this.onQueryChange
        }, searchBarProps));
      }
    }
  }, {
    key: "resolveSearchSchema",
    value: function resolveSearchSchema() {
      var columns = this.props.columns;
      return columns.reduce(function (schema, column) {
        if (column.field) {
          var type = column.dataType || 'string';
          schema.fields[column.field] = {
            type: type
          };
        }

        return schema;
      }, {
        strict: true,
        fields: {}
      });
    }
  }, {
    key: "getItemSorter",
    value: function getItemSorter() {
      var _this$state = this.state,
          sortField = _this$state.sortField,
          sortDirection = _this$state.sortDirection;
      var columns = this.props.columns;
      var sortColumn = columns.find(function (_ref4) {
        var field = _ref4.field;
        return field === sortField;
      });
      var sortable = sortColumn.sortable;

      if (typeof sortable === 'function') {
        return _sort.Comparators.value(sortable, _sort.Comparators.default(sortDirection));
      }

      return _sort.Comparators.property(sortField, _sort.Comparators.default(sortDirection));
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var executeQueryOptions = this.props.executeQueryOptions;
      var items = this.state.prevProps.items;

      if (!items.length) {
        return {
          items: [],
          totalItemCount: 0
        };
      }

      var _this$state2 = this.state,
          query = _this$state2.query,
          sortField = _this$state2.sortField,
          pageIndex = _this$state2.pageIndex,
          pageSize = _this$state2.pageSize;
      var matchingItems = query ? _search_bar.EuiSearchBar.Query.execute(query, items, executeQueryOptions) : items;
      var sortedItems = sortField ? matchingItems.slice(0) // avoid mutating the source array
      .sort(this.getItemSorter()) // sort, causes mutation
      : matchingItems;
      var visibleItems = pageSize ? function () {
        var startIndex = pageIndex * pageSize;
        return sortedItems.slice(startIndex, Math.min(startIndex + pageSize, sortedItems.length));
      }() : sortedItems;
      return {
        items: visibleItems,
        totalItemCount: matchingItems.length
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          columns = _this$props.columns,
          loading = _this$props.loading,
          message = _this$props.message,
          error = _this$props.error,
          selection = _this$props.selection,
          isSelectable = _this$props.isSelectable,
          hasActions = _this$props.hasActions,
          compressed = _this$props.compressed,
          hasPagination = _this$props.pagination,
          hasSorting = _this$props.sorting,
          itemIdToExpandedRowMap = _this$props.itemIdToExpandedRowMap,
          itemId = _this$props.itemId,
          rowProps = _this$props.rowProps,
          cellProps = _this$props.cellProps,
          _unuseditems = _this$props.items,
          search = _this$props.search,
          onTableChange = _this$props.onTableChange,
          executeQueryOptions = _this$props.executeQueryOptions,
          allowNeutralSort = _this$props.allowNeutralSort,
          rest = _objectWithoutProperties(_this$props, ["columns", "loading", "message", "error", "selection", "isSelectable", "hasActions", "compressed", "pagination", "sorting", "itemIdToExpandedRowMap", "itemId", "rowProps", "cellProps", "items", "search", "onTableChange", "executeQueryOptions", "allowNeutralSort"]);

      var _this$state3 = this.state,
          pageIndex = _this$state3.pageIndex,
          pageSize = _this$state3.pageSize,
          pageSizeOptions = _this$state3.pageSizeOptions,
          sortField = _this$state3.sortField,
          sortDirection = _this$state3.sortDirection,
          hidePerPageOptions = _this$state3.hidePerPageOptions;

      var _this$getItems = this.getItems(),
          items = _this$getItems.items,
          totalItemCount = _this$getItems.totalItemCount;

      var pagination = !hasPagination ? undefined : {
        pageIndex: pageIndex,
        pageSize: pageSize,
        pageSizeOptions: pageSizeOptions,
        totalItemCount: totalItemCount,
        hidePerPageOptions: hidePerPageOptions
      }; // Data loaded from a server can have a default sort order which is meaningful to the
      // user, but can't be reproduced with client-side sort logic. So we allow the table to display
      // rows in the order in which they're initially loaded by providing an undefined sorting prop.

      var sorting = !hasSorting ? undefined : {
        sort: !sortField && !sortDirection ? undefined : {
          field: sortField,
          direction: sortDirection
        },
        allowNeutralSort: this.state.allowNeutralSort
      };
      var searchBar = this.renderSearchBar(); // EuiInMemoryTable's column type supports sortable as a function, but
      // EuiBasicTable requires those functions to be cast to a boolean

      var mappedColumns = columns.map(function (column) {
        return _objectSpread({}, column, {
          sortable: !!column.sortable
        });
      });

      var table = _react.default.createElement(_basic_table.EuiBasicTable, _extends({
        items: items,
        itemId: itemId,
        rowProps: rowProps,
        cellProps: cellProps,
        columns: mappedColumns,
        pagination: pagination,
        sorting: sorting,
        selection: selection,
        isSelectable: isSelectable,
        hasActions: hasActions,
        onChange: this.onTableChange,
        error: error,
        loading: loading,
        noItemsMessage: message,
        compressed: compressed,
        itemIdToExpandedRowMap: itemIdToExpandedRowMap
      }, rest));

      if (!searchBar) {
        return table;
      }

      return _react.default.createElement("div", null, searchBar, _react.default.createElement(_spacer.EuiSpacer, {
        size: "l"
      }), table);
    }
  }]);

  return EuiInMemoryTable;
}(_react.Component);

exports.EuiInMemoryTable = EuiInMemoryTable;

_defineProperty(EuiInMemoryTable, "propTypes", InMemoryTablePropTypes);

_defineProperty(EuiInMemoryTable, "defaultProps", {
  items: [],
  pagination: false,
  sorting: false,
  responsive: true,
  executeQueryOptions: {}
});

EuiInMemoryTable.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "getDerivedStateFromProps",
    "docblock": null,
    "modifiers": ["static"],
    "params": [{
      "name": "nextProps",
      "type": null
    }, {
      "name": "prevState",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onTableChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "{ page = {}, sort = {} }",
      "type": null
    }],
    "returns": null
  }, {
    "name": "onQueryChange",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "{ query, queryText, error }",
      "type": null
    }],
    "returns": null
  }, {
    "name": "renderSearchBar",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "resolveSearchSchema",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "getItemSorter",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "getItems",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiInMemoryTable",
  "props": {
    "items": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "array"
      },
      "required": false,
      "description": ""
    },
    "pagination": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "union",
        "value": [{
          "name": "bool"
        }, {
          "name": "shape",
          "value": {
            "pageSizeOptions": {
              "name": "arrayOf",
              "value": {
                "name": "number"
              },
              "required": false
            }
          }
        }, {
          "name": "shape",
          "value": {
            "initialPageIndex": {
              "name": "number",
              "required": false
            },
            "initialPageSize": {
              "name": "number",
              "required": false
            },
            "pageSizeOptions": {
              "name": "arrayOf",
              "value": {
                "name": "number"
              },
              "required": false
            }
          }
        }]
      },
      "required": false,
      "description": ""
    },
    "sorting": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "union",
        "value": [{
          "name": "bool"
        }, {
          "name": "shape",
          "value": {
            "sort": {
              "name": "custom",
              "raw": "PropertySortType",
              "required": false
            }
          }
        }]
      },
      "required": false,
      "description": ""
    },
    "responsive": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "required": false
    },
    "executeQueryOptions": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "required": false
    },
    "columns": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "custom",
          "raw": "ColumnType"
        }
      },
      "required": true,
      "description": ""
    },
    "loading": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "message": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "error": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "compressed": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "search": {
      "type": {
        "name": "union",
        "value": [{
          "name": "bool"
        }, {
          "name": "shape",
          "value": {
            "defaultQuery": {
              "name": "custom",
              "raw": "QueryType",
              "required": false
            },
            "box": {
              "name": "shape",
              "value": {
                "schema": {
                  "name": "union",
                  "value": [{
                    "name": "bool"
                  }, {
                    "name": "custom",
                    "raw": "SearchBoxConfigPropTypes.schema"
                  }],
                  "required": false
                }
              },
              "required": false
            },
            "filters": {
              "name": "custom",
              "raw": "SearchFiltersFiltersType",
              "required": false
            },
            "onChange": {
              "name": "func",
              "required": false
            },
            "executeQueryOptions": {
              "name": "shape",
              "value": {
                "defaultFields": {
                  "name": "arrayOf",
                  "value": {
                    "name": "string"
                  },
                  "required": false
                },
                "isClauseMatcher": {
                  "name": "func",
                  "required": false
                },
                "explain": {
                  "name": "bool",
                  "required": false
                }
              },
              "required": false
            }
          }
        }]
      },
      "required": false,
      "description": ""
    },
    "allowNeutralSort": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Set `allowNeutralSort` to false to force column sorting. Defaults to true."
    },
    "selection": {
      "type": {
        "name": "custom",
        "raw": "SelectionType"
      },
      "required": false,
      "description": ""
    },
    "itemId": {
      "type": {
        "name": "custom",
        "raw": "ItemIdType"
      },
      "required": false,
      "description": ""
    },
    "rowProps": {
      "type": {
        "name": "union",
        "value": [{
          "name": "func"
        }, {
          "name": "object"
        }]
      },
      "required": false,
      "description": ""
    },
    "cellProps": {
      "type": {
        "name": "union",
        "value": [{
          "name": "func"
        }, {
          "name": "object"
        }]
      },
      "required": false,
      "description": ""
    },
    "onTableChange": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    }
  }
};