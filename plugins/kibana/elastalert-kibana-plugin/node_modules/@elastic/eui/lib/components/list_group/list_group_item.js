"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiListGroupItem = exports.SIZES = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = require("../button");

var _icon = require("../icon");

var _tool_tip = require("../tool_tip");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var sizeToClassNameMap = {
  xs: 'euiListGroupItem--xSmall',
  s: 'euiListGroupItem--small',
  m: 'euiListGroupItem--medium',
  l: 'euiListGroupItem--large'
};
var SIZES = Object.keys(sizeToClassNameMap);
exports.SIZES = SIZES;

var EuiListGroupItem = function EuiListGroupItem(_ref) {
  var label = _ref.label,
      isActive = _ref.isActive,
      isDisabled = _ref.isDisabled,
      href = _ref.href,
      className = _ref.className,
      iconType = _ref.iconType,
      icon = _ref.icon,
      extraAction = _ref.extraAction,
      onClick = _ref.onClick,
      size = _ref.size,
      showToolTip = _ref.showToolTip,
      wrapText = _ref.wrapText,
      rest = _objectWithoutProperties(_ref, ["label", "isActive", "isDisabled", "href", "className", "iconType", "icon", "extraAction", "onClick", "size", "showToolTip", "wrapText"]);

  var classes = (0, _classnames.default)('euiListGroupItem', sizeToClassNameMap[size], {
    'euiListGroupItem-isActive': isActive,
    'euiListGroupItem-isDisabled': isDisabled,
    'euiListGroupItem-isClickable': href || onClick,
    'euiListGroupItem-hasExtraAction': extraAction,
    'euiListGroupItem--wrapText': wrapText
  }, className);
  var iconNode;

  if (iconType) {
    iconNode = _react.default.createElement(_icon.EuiIcon, {
      className: "euiListGroupItem__icon",
      type: iconType
    });

    if (icon) {
      console.warn('Both `iconType` and `icon` were passed to EuiListGroupItem but only one can exist. The `iconType` was used.');
    }
  } else if (icon) {
    iconNode = _react.default.cloneElement(icon, {
      className: (0, _classnames.default)('euiListGroupItem__icon', icon.props.className)
    });
  }

  var extraActionNode;

  if (extraAction) {
    var _iconType = extraAction.iconType,
        alwaysShow = extraAction.alwaysShow,
        _rest = _objectWithoutProperties(extraAction, ["iconType", "alwaysShow"]);

    var extraActionClasses = (0, _classnames.default)('euiListGroupItem__extraAction', {
      'euiListGroupItem__extraAction-alwaysShow': alwaysShow
    });
    extraActionNode = _react.default.createElement(_button.EuiButtonIcon, _extends({
      className: extraActionClasses,
      iconType: _iconType
    }, _rest, {
      disabled: isDisabled
    }));
  } // Only add the label as the title attribute if it's possibly truncated


  var labelContent = _react.default.createElement("span", {
    className: "euiListGroupItem__label",
    title: wrapText ? undefined : label
  }, label); // Handle the variety of interaction behavior


  var itemContent;

  if (href && !isDisabled) {
    itemContent = _react.default.createElement("a", _extends({
      href: href,
      className: "euiListGroupItem__button"
    }, rest), iconNode, labelContent);

    if (onClick) {
      console.warn('Both `href` and `onClick` were passed to EuiListGroupItem but only one can exist. The `href` was used.');
    }
  } else if (href && isDisabled || onClick) {
    itemContent = _react.default.createElement("button", _extends({
      type: "button",
      className: "euiListGroupItem__button",
      disabled: isDisabled,
      onClick: onClick
    }, rest), iconNode, labelContent);
  } else {
    itemContent = _react.default.createElement("span", _extends({
      className: "euiListGroupItem__text"
    }, rest), iconNode, labelContent);
  }

  if (showToolTip) {
    itemContent = _react.default.createElement("li", {
      className: classes
    }, _react.default.createElement(_tool_tip.EuiToolTip, {
      anchorClassName: "euiListGroupItem__tooltip",
      content: label,
      position: "right",
      delay: "long",
      size: "s"
    }, itemContent));
  } else {
    itemContent = _react.default.createElement("li", {
      className: classes
    }, itemContent, extraActionNode);
  }

  return _react.default.createElement(_react.Fragment, null, itemContent);
};

exports.EuiListGroupItem = EuiListGroupItem;
EuiListGroupItem.propTypes = {
  className: _propTypes.default.string,

  /**
   * Set the size of the label text
   */
  size: _propTypes.default.oneOf(SIZES),

  /**
   * Content to be displyed in the list item
   */
  label: _propTypes.default.node.isRequired,

  /**
   * Apply styles indicating an item is active
   */
  isActive: _propTypes.default.bool,

  /**
   * Apply styles indicating an item is disabled
   */
  isDisabled: _propTypes.default.bool,

  /**
   * Make the list item label a link
   */
  href: _propTypes.default.string,

  /**
   * Adds `EuiIcon` of `EuiIcon.type`
   */
  iconType: _icon.IconPropType,

  /**
   * Custom node to pass as the icon. Cannot be used in conjunction
   * with `iconType`.
   */
  icon: _propTypes.default.element,

  /**
   * Display tooltip on list item
   */
  showToolTip: _propTypes.default.bool,

  /**
   * Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;
   * pass `alwaysShow` if you don't want the default behavior of only showing on hover
   */
  extraAction: _propTypes.default.shape({
    iconType: _icon.IconPropType.isRequired,
    alwaysShow: _propTypes.default.bool
  }),
  onClick: _propTypes.default.func,

  /**
   * Allow link text to wrap
   */
  wrapText: _propTypes.default.bool
};
EuiListGroupItem.defaultProps = {
  isActive: false,
  isDisabled: false,
  size: 'm',
  showToolTip: false
};
EuiListGroupItem.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiListGroupItem",
  "props": {
    "isActive": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Apply styles indicating an item is active"
    },
    "isDisabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Apply styles indicating an item is disabled"
    },
    "size": {
      "defaultValue": {
        "value": "'m'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"xs\"",
          "computed": false
        }, {
          "value": "\"s\"",
          "computed": false
        }, {
          "value": "\"m\"",
          "computed": false
        }, {
          "value": "\"l\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "Set the size of the label text"
    },
    "showToolTip": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Display tooltip on list item"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "label": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": "Content to be displyed in the list item"
    },
    "href": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Make the list item label a link"
    },
    "iconType": {
      "type": {
        "name": "custom",
        "raw": "IconPropType"
      },
      "required": false,
      "description": "Adds `EuiIcon` of `EuiIcon.type`"
    },
    "icon": {
      "type": {
        "name": "element"
      },
      "required": false,
      "description": "Custom node to pass as the icon. Cannot be used in conjunction\nwith `iconType`."
    },
    "extraAction": {
      "type": {
        "name": "shape",
        "value": {
          "iconType": {
            "name": "custom",
            "raw": "IconPropType.isRequired",
            "required": true
          },
          "alwaysShow": {
            "name": "bool",
            "required": false
          }
        }
      },
      "required": false,
      "description": "Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;\npass `alwaysShow` if you don't want the default behavior of only showing on hover"
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "wrapText": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Allow link text to wrap"
    }
  }
};