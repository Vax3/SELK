"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiEmptyPrompt = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _title = require("../title/title");

var _flex = require("../flex");

var _spacer = require("../spacer");

var _icon = require("../icon/icon");

var _text = require("../text");

var _title2 = require("../title");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var EuiEmptyPrompt = function EuiEmptyPrompt(_ref) {
  var iconType = _ref.iconType,
      iconColor = _ref.iconColor,
      title = _ref.title,
      titleSize = _ref.titleSize,
      body = _ref.body,
      actions = _ref.actions,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ["iconType", "iconColor", "title", "titleSize", "body", "actions", "className"]);

  var classes = (0, _classnames.default)('euiEmptyPrompt', className);
  var icon;

  if (iconType) {
    icon = _react.default.createElement(_react.Fragment, null, _react.default.createElement(_icon.EuiIcon, {
      type: iconType,
      size: "xxl",
      color: iconColor
    }), _react.default.createElement(_spacer.EuiSpacer, {
      size: "s"
    }));
  }

  var content;

  if (body || title) {
    var titleEl;

    if (title) {
      titleEl = _react.default.createElement(_react.Fragment, null, _react.default.createElement(_title2.EuiTitle, {
        size: titleSize
      }, title), _react.default.createElement(_spacer.EuiSpacer, {
        size: "m"
      }));
    }

    var bodyEl;

    if (body) {
      bodyEl = _react.default.createElement(_react.Fragment, null, _react.default.createElement(_text.EuiText, null, body));
    }

    content = _react.default.createElement(_text.EuiTextColor, {
      color: "subdued"
    }, titleEl, bodyEl);
  }

  var actionsEl;

  if (actions) {
    var actionsRow;

    if (Array.isArray(actions)) {
      actionsRow = _react.default.createElement(_flex.EuiFlexGroup, {
        gutterSize: "m",
        alignItems: "center",
        justifyContent: "center",
        direction: "column"
      }, actions.map(function (action, index) {
        return _react.default.createElement(_flex.EuiFlexItem, {
          key: index,
          grow: false
        }, action);
      }));
    } else {
      actionsRow = actions;
    }

    actionsEl = _react.default.createElement(_react.Fragment, null, _react.default.createElement(_spacer.EuiSpacer, {
      size: "s"
    }), actionsRow);
  }

  return _react.default.createElement("div", _extends({
    className: classes
  }, rest), icon, content, body && actions && _react.default.createElement(_spacer.EuiSpacer, {
    size: "l"
  }), actionsEl);
};

exports.EuiEmptyPrompt = EuiEmptyPrompt;
EuiEmptyPrompt.propTypes = {
  iconType: _icon.IconPropType,

  /**
   * Pass `null` to use original icon color
   */
  iconColor: _propTypes.default.oneOf(_icon.COLORS),
  title: _propTypes.default.node,
  titleSize: _propTypes.default.oneOf(_title.TITLE_SIZES),
  body: _propTypes.default.node,
  actions: _propTypes.default.node,
  className: _propTypes.default.string
};
EuiEmptyPrompt.defaultProps = {
  iconColor: 'subdued'
};
EuiEmptyPrompt.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiEmptyPrompt",
  "props": {
    "iconColor": {
      "defaultValue": {
        "value": "'subdued'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "computed": true,
        "value": "COLORS"
      },
      "required": false,
      "description": "Pass `null` to use original icon color"
    },
    "iconType": {
      "type": {
        "name": "custom",
        "raw": "IconPropType"
      },
      "required": false,
      "description": ""
    },
    "title": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "titleSize": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": "TITLE_SIZES"
      },
      "required": false,
      "description": ""
    },
    "body": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "actions": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};