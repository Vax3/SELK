import "core-js/modules/es7.symbol.async-iterator";
import "core-js/modules/es6.symbol";
import "core-js/modules/es6.object.set-prototype-of";
import "core-js/modules/es6.function.name";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Component } from 'react';
import { isString } from '../../services/predicate';
import { EuiButtonEmpty, EuiButtonIcon } from '../button';
import { EuiToolTip } from '../tool_tip';
var defaults = {
  color: 'primary'
};
export var DefaultItemAction =
/*#__PURE__*/
function (_Component) {
  _inherits(DefaultItemAction, _Component);

  function DefaultItemAction(props) {
    _classCallCheck(this, DefaultItemAction);

    return _possibleConstructorReturn(this, _getPrototypeOf(DefaultItemAction).call(this, props));
  }

  _createClass(DefaultItemAction, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          action = _this$props.action,
          enabled = _this$props.enabled,
          item = _this$props.item,
          className = _this$props.className;

      if (!action.onClick && !action.href) {
        throw new Error("Cannot render item action [".concat(action.name, "]. Missing required 'onClick' callback\n        or 'href' string. If you want to provide a custom action control, make sure to define the 'render' callback"));
      }

      var onClick = action.onClick ? function () {
        return action.onClick(item);
      } : undefined;
      var color = this.resolveActionColor();
      var icon = this.resolveActionIcon();
      var button;

      if (action.type === 'icon') {
        if (!icon) {
          throw new Error("Cannot render item action [".concat(action.name, "]. It is configured to render as an icon but no\n        icon is provided. Make sure to set the 'icon' property of the action"));
        }

        button = React.createElement(EuiButtonIcon, {
          className: className,
          "aria-label": action.name,
          isDisabled: !enabled,
          color: color,
          iconType: icon,
          onClick: onClick,
          href: action.href,
          target: action.target
        });
      } else {
        button = React.createElement(EuiButtonEmpty, {
          className: className,
          size: "s",
          isDisabled: !enabled,
          color: color,
          iconType: icon,
          onClick: onClick,
          href: action.href,
          target: action.target,
          flush: "right"
        }, action.name);
      }

      return enabled && action.description ? React.createElement(EuiToolTip, {
        content: action.description,
        delay: "long"
      }, button) : button;
    }
  }, {
    key: "resolveActionIcon",
    value: function resolveActionIcon() {
      var _this$props2 = this.props,
          action = _this$props2.action,
          item = _this$props2.item;

      if (action.icon) {
        return isString(action.icon) ? action.icon : action.icon(item);
      }
    }
  }, {
    key: "resolveActionColor",
    value: function resolveActionColor() {
      var _this$props3 = this.props,
          action = _this$props3.action,
          item = _this$props3.item;

      if (action.color) {
        return isString(action.color) ? action.color : action.color(item);
      }

      return defaults.color;
    }
  }]);

  return DefaultItemAction;
}(Component);
DefaultItemAction.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "resolveActionIcon",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "resolveActionColor",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "DefaultItemAction"
};