import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { getSecureRelForTarget } from '../../services';
import { EuiText } from '../text';
import { EuiTitle } from '../title';
import { EuiBetaBadge } from '../badge/beta_badge';
import { EuiCardSelect, EuiCardSelectProps, euiCardSelectableColor } from './card_select';
import makeId from '../form/form_row/make_id';
var textAlignToClassNameMap = {
  left: 'euiCard--leftAligned',
  center: 'euiCard--centerAligned',
  right: 'euiCard--rightAligned'
};
export var ALIGNMENTS = Object.keys(textAlignToClassNameMap);
var layoutToClassNameMap = {
  vertical: '',
  horizontal: 'euiCard--horizontal'
};
export var LAYOUT_ALIGNMENTS = Object.keys(layoutToClassNameMap);
var oneOfLayouts = PropTypes.oneOf(LAYOUT_ALIGNMENTS);

var cardLayout = function cardLayout(props, propName, componentName) {
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  var oneOfResult = oneOfLayouts.apply(void 0, [props, propName, componentName].concat(rest));
  if (oneOfResult) return oneOfResult;

  if (props[propName] === 'horizontal') {
    if (props.image || props.footer) {
      return new Error("".concat(componentName, ": '").concat(propName, " = horizontal' cannot be used in conjunction with 'image', 'footer', or 'textAlign'."));
    }
  }
};

export var EuiCard = function EuiCard(_ref) {
  var className = _ref.className,
      description = _ref.description,
      title = _ref.title,
      titleElement = _ref.titleElement,
      icon = _ref.icon,
      image = _ref.image,
      footer = _ref.footer,
      onClick = _ref.onClick,
      href = _ref.href,
      rel = _ref.rel,
      target = _ref.target,
      textAlign = _ref.textAlign,
      isClickable = _ref.isClickable,
      betaBadgeLabel = _ref.betaBadgeLabel,
      betaBadgeTooltipContent = _ref.betaBadgeTooltipContent,
      betaBadgeTitle = _ref.betaBadgeTitle,
      layout = _ref.layout,
      bottomGraphic = _ref.bottomGraphic,
      selectable = _ref.selectable,
      rest = _objectWithoutProperties(_ref, ["className", "description", "title", "titleElement", "icon", "image", "footer", "onClick", "href", "rel", "target", "textAlign", "isClickable", "betaBadgeLabel", "betaBadgeTooltipContent", "betaBadgeTitle", "layout", "bottomGraphic", "selectable"]);

  var selectableColorClass = selectable ? "euiCard--isSelectable--".concat(euiCardSelectableColor(selectable.color, selectable.isSelected)) : undefined;
  var classes = classNames('euiCard', textAlignToClassNameMap[textAlign], layoutToClassNameMap[layout], {
    'euiCard--isClickable': onClick || href || isClickable,
    'euiCard--hasBetaBadge': betaBadgeLabel,
    'euiCard--hasIcon': icon,
    'euiCard--hasBottomGraphic': bottomGraphic,
    'euiCard--isSelectable': selectable,
    'euiCard-isSelected': selectable && selectable.isSelected
  }, selectableColorClass, className);
  var ariaId = makeId();
  var secureRel;

  if (href) {
    secureRel = getSecureRelForTarget({
      href: href,
      target: target,
      rel: rel
    });
  }

  var imageNode;

  if (image && layout === 'vertical') {
    imageNode = React.createElement("img", {
      className: "euiCard__image",
      src: image,
      alt: ""
    });
  }

  var iconNode;

  if (icon) {
    iconNode = React.cloneElement(icon, {
      className: classNames(icon.props.className, 'euiCard__icon')
    });
  }

  var OuterElement = 'div';

  if (href) {
    OuterElement = 'a';
  } else if (onClick) {
    OuterElement = 'button';
  }

  var TitleElement = titleElement;

  if (OuterElement === 'button') {
    TitleElement = 'span';
  }

  var optionalCardTop;

  if (imageNode || iconNode) {
    optionalCardTop = React.createElement("span", {
      className: "euiCard__top"
    }, imageNode, iconNode);
  }

  var optionalBetaBadge;

  if (betaBadgeLabel) {
    optionalBetaBadge = React.createElement("span", {
      className: "euiCard__betaBadgeWrapper"
    }, React.createElement(EuiBetaBadge, {
      label: betaBadgeLabel,
      title: betaBadgeTitle,
      tooltipContent: betaBadgeTooltipContent,
      className: "euiCard__betaBadge"
    }));
  }

  var optionalBottomGraphic;

  if (bottomGraphic) {
    optionalBottomGraphic = React.createElement("span", {
      className: "euiCard__graphic"
    }, bottomGraphic);
  }

  var optionalSelectButton;

  if (selectable) {
    if (bottomGraphic) {
      console.warn('EuiCard cannot support both `bottomGraphic` and `selectable`. It will ignore the bottomGraphic.');
    }

    optionalSelectButton = React.createElement(EuiCardSelect, _extends({
      "aria-describedby": "".concat(ariaId, "Title ").concat(ariaId, "Description")
    }, selectable));
  }

  return React.createElement(OuterElement, _extends({
    onClick: onClick,
    className: classes,
    href: href,
    target: target,
    rel: secureRel
  }, rest), optionalBetaBadge, optionalCardTop, React.createElement("span", {
    className: "euiCard__content"
  }, React.createElement(EuiTitle, {
    id: "".concat(ariaId, "Title"),
    className: "euiCard__title"
  }, React.createElement(TitleElement, null, title)), React.createElement(EuiText, {
    id: "".concat(ariaId, "Description"),
    size: "s",
    className: "euiCard__description"
  }, React.createElement("p", null, description))), layout === 'vertical' && React.createElement("span", {
    className: "euiCard__footer"
  }, footer), optionalSelectButton || optionalBottomGraphic);
};
EuiCard.propTypes = {
  className: PropTypes.string,
  title: PropTypes.node.isRequired,

  /**
   * Determines the title's heading element. Will force to 'span' if
   * the card is a button.
   */
  titleElement: PropTypes.oneOf(['h2', 'h3', 'h4', 'h5', 'h6', 'span']),
  description: PropTypes.node.isRequired,

  /**
   * Requires a <EuiIcon> node
   */
  icon: PropTypes.node,

  /**
   * Accepts a url in string form
   */
  image: PropTypes.string,

  /**
   * Accepts any combination of elements
   */
  footer: PropTypes.node,

  /**
   * Use only if you want to forego a button in the footer and make the whole card clickable
   */
  onClick: PropTypes.func,
  href: PropTypes.string,
  target: PropTypes.string,
  rel: PropTypes.string,
  textAlign: PropTypes.oneOf(ALIGNMENTS),

  /**
   * Change to "horizontal" if you need the icon to be left of the content
   */
  layout: cardLayout,

  /**
   * Add a badge to the card to label it as "Beta" or other non-GA state
   */
  betaBadgeLabel: PropTypes.string,

  /**
   * Add a description to the beta badge (will appear in a tooltip)
   */
  betaBadgeTooltipContent: PropTypes.node,

  /**
   * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used
   */
  betaBadgeTitle: PropTypes.string,

  /**
   * Adds a button to the bottom of the card to allow for in-place selection.
   */
  selectable: PropTypes.shape(EuiCardSelectProps),

  /**
   * Add a decorative bottom graphic to the card.
   * This should be used sparingly, consult the Kibana Design team before use.
   */
  bottomGraphic: PropTypes.node
};
EuiCard.defaultProps = {
  textAlign: 'center',
  layout: 'vertical',
  titleElement: 'span'
};
EuiCard.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiCard",
  "props": {
    "textAlign": {
      "defaultValue": {
        "value": "'center'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"left\"",
          "computed": false
        }, {
          "value": "\"center\"",
          "computed": false
        }, {
          "value": "\"right\"",
          "computed": false
        }]
      },
      "required": false,
      "description": ""
    },
    "layout": {
      "defaultValue": {
        "value": "'vertical'",
        "computed": false
      },
      "type": {
        "name": "custom",
        "raw": "cardLayout"
      },
      "required": false,
      "description": "Change to \"horizontal\" if you need the icon to be left of the content"
    },
    "titleElement": {
      "defaultValue": {
        "value": "'span'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "'h2'",
          "computed": false
        }, {
          "value": "'h3'",
          "computed": false
        }, {
          "value": "'h4'",
          "computed": false
        }, {
          "value": "'h5'",
          "computed": false
        }, {
          "value": "'h6'",
          "computed": false
        }, {
          "value": "'span'",
          "computed": false
        }]
      },
      "required": false,
      "description": "Determines the title's heading element. Will force to 'span' if\nthe card is a button."
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "title": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": ""
    },
    "description": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": ""
    },
    "icon": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Requires a <EuiIcon> node"
    },
    "image": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Accepts a url in string form"
    },
    "footer": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Accepts any combination of elements"
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Use only if you want to forego a button in the footer and make the whole card clickable"
    },
    "href": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "target": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "rel": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "betaBadgeLabel": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Add a badge to the card to label it as \"Beta\" or other non-GA state"
    },
    "betaBadgeTooltipContent": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Add a description to the beta badge (will appear in a tooltip)"
    },
    "betaBadgeTitle": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Optional title will be supplied as tooltip title or title attribute otherwise the label will be used"
    },
    "selectable": {
      "type": {
        "name": "shape",
        "value": "import { EuiCardSelect, EuiCardSelectProps, euiCardSelectableColor } from './card_select';",
        "computed": true
      },
      "required": false,
      "description": "Adds a button to the bottom of the card to allow for in-place selection."
    },
    "bottomGraphic": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Add a decorative bottom graphic to the card.\nThis should be used sparingly, consult the Kibana Design team before use."
    }
  }
};