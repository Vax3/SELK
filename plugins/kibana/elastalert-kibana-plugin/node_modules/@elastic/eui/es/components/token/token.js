import "core-js/modules/es6.object.assign";
import "core-js/modules/es6.array.fill";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { IconPropType, EuiIcon } from '../icon';
import { TOKEN_MAP } from './token_map';
var sizeToClassMap = {
  s: 'euiToken--small',
  m: 'euiToken--medium',
  l: 'euiToken--large'
};
export var SIZES = Object.keys(sizeToClassMap);
var shapeToClassMap = {
  circle: 'euiToken--circle',
  square: 'euiToken--square',
  rectangle: 'euiToken--rectangle'
};
export var SHAPES = Object.keys(shapeToClassMap);
var colorToClassMap = {
  tokenTint01: 'euiToken--tokenTint01',
  tokenTint02: 'euiToken--tokenTint02',
  tokenTint03: 'euiToken--tokenTint03',
  tokenTint04: 'euiToken--tokenTint04',
  tokenTint05: 'euiToken--tokenTint05',
  tokenTint06: 'euiToken--tokenTint06',
  tokenTint07: 'euiToken--tokenTint07',
  tokenTint08: 'euiToken--tokenTint08',
  tokenTint09: 'euiToken--tokenTint09',
  tokenTint10: 'euiToken--tokenTint10',
  tokenTint11: 'euiToken--tokenTint11',
  tokenTint12: 'euiToken--tokenTint12'
};
export var COLORS = Object.keys(colorToClassMap);
export var EuiToken = function EuiToken(_ref) {
  var iconType = _ref.iconType,
      displayOptions = _ref.displayOptions,
      size = _ref.size,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ["iconType", "displayOptions", "size", "className"]);

  // Check if display options is empty
  var displayOptionsIsEmpty = Object.keys(displayOptions).length === 0 && displayOptions.constructor === Object;
  var tokenShape;
  var tokenColor;
  var fill;
  var tokenHidesBorder; // Check if this has a mapping, and doesn't have custom displayOptions

  if (iconType in TOKEN_MAP && displayOptionsIsEmpty) {
    tokenShape = TOKEN_MAP[iconType].shape;
    tokenColor = TOKEN_MAP[iconType].color;
    fill = TOKEN_MAP[iconType].fill ? true : false;
    tokenHidesBorder = TOKEN_MAP[iconType].hideBorder ? true : false;
  } else {
    // Use the displayOptions passed or use some defaults
    tokenShape = displayOptions.shape ? displayOptions.shape : 'square';
    tokenColor = displayOptions.color ? displayOptions.color : 'tokenTint01';
    fill = displayOptions.fill ? true : false;
    tokenHidesBorder = displayOptions.hideBorder ? true : false;
  }

  var classes = classNames('euiToken', colorToClassMap[tokenColor], shapeToClassMap[tokenShape], sizeToClassMap[size], {
    'euiToken--fill': fill,
    'euiToken--no-border': tokenHidesBorder
  }, className);
  return React.createElement("div", _extends({
    className: classes
  }, rest), React.createElement(EuiIcon, {
    type: iconType
  }));
};
EuiToken.propTypes = {
  /**
   * An EUI icon type
   */
  iconType: IconPropType.isRequired,

  /**
   * Size of the token
   */
  size: PropTypes.oneOf(SIZES),

  /**
   * By default EUI will auto color tokens. You can can however control it
   * - `color`: can be `tokenTint01` thru `tokenTint10`
   * - `shape`: square, circle, rectangle as options
   * - `fill`: makes it a solid color
   * - `hideBorder`: disables the outer border
   */
  displayOptions: PropTypes.shape({
    color: PropTypes.oneOf(COLORS),
    shape: PropTypes.oneOf(SHAPES),
    fill: PropTypes.boolean,
    hideBorder: PropTypes.boolean
  })
};
EuiToken.defaultProps = {
  size: 's',
  displayOptions: {}
};
EuiToken.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiToken",
  "props": {
    "size": {
      "defaultValue": {
        "value": "'s'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"s\"",
          "computed": false
        }, {
          "value": "\"m\"",
          "computed": false
        }, {
          "value": "\"l\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "Size of the token"
    },
    "displayOptions": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "shape",
        "value": {
          "color": {
            "name": "enum",
            "value": [{
              "value": "\"tokenTint01\"",
              "computed": false
            }, {
              "value": "\"tokenTint02\"",
              "computed": false
            }, {
              "value": "\"tokenTint03\"",
              "computed": false
            }, {
              "value": "\"tokenTint04\"",
              "computed": false
            }, {
              "value": "\"tokenTint05\"",
              "computed": false
            }, {
              "value": "\"tokenTint06\"",
              "computed": false
            }, {
              "value": "\"tokenTint07\"",
              "computed": false
            }, {
              "value": "\"tokenTint08\"",
              "computed": false
            }, {
              "value": "\"tokenTint09\"",
              "computed": false
            }, {
              "value": "\"tokenTint10\"",
              "computed": false
            }, {
              "value": "\"tokenTint11\"",
              "computed": false
            }, {
              "value": "\"tokenTint12\"",
              "computed": false
            }],
            "required": false
          },
          "shape": {
            "name": "enum",
            "value": [{
              "value": "\"circle\"",
              "computed": false
            }, {
              "value": "\"square\"",
              "computed": false
            }, {
              "value": "\"rectangle\"",
              "computed": false
            }],
            "required": false
          },
          "fill": {
            "name": "custom",
            "raw": "PropTypes.boolean",
            "required": false
          },
          "hideBorder": {
            "name": "custom",
            "raw": "PropTypes.boolean",
            "required": false
          }
        }
      },
      "required": false,
      "description": "By default EUI will auto color tokens. You can can however control it\n- `color`: can be `tokenTint01` thru `tokenTint10`\n- `shape`: square, circle, rectangle as options\n- `fill`: makes it a solid color\n- `hideBorder`: disables the outer border"
    },
    "iconType": {
      "type": {
        "name": "custom",
        "raw": "IconPropType.isRequired"
      },
      "required": false,
      "description": "An EUI icon type"
    }
  }
};