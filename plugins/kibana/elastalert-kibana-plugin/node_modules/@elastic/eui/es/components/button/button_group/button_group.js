import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";
import "core-js/modules/es6.function.name";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { EuiScreenReaderOnly } from '../../accessibility';
import { EuiButtonToggle } from '../button_toggle';
import { TOGGLE_TYPES } from '../../toggle';
export var EuiButtonGroup = function EuiButtonGroup(_ref) {
  var className = _ref.className,
      buttonSize = _ref.buttonSize,
      color = _ref.color,
      idSelected = _ref.idSelected,
      idToSelectedMap = _ref.idToSelectedMap,
      isDisabled = _ref.isDisabled,
      isFullWidth = _ref.isFullWidth,
      isIconOnly = _ref.isIconOnly,
      name = _ref.name,
      legend = _ref.legend,
      _onChange = _ref.onChange,
      options = _ref.options,
      type = _ref.type,
      rest = _objectWithoutProperties(_ref, ["className", "buttonSize", "color", "idSelected", "idToSelectedMap", "isDisabled", "isFullWidth", "isIconOnly", "name", "legend", "onChange", "options", "type"]);

  var classes = classNames('euiButtonGroup', {
    'euiButtonGroup--fullWidth': isFullWidth
  }, className);
  var legendNode;

  if (legend) {
    legendNode = React.createElement(EuiScreenReaderOnly, null, React.createElement("legend", null, legend));
  }

  return React.createElement("fieldset", null, legendNode, React.createElement("div", _extends({
    className: classes
  }, rest), options.map(function (option, index) {
    var isSelectedState;

    if (type === 'multi') {
      isSelectedState = idToSelectedMap[option.id] || false;
    } else {
      isSelectedState = option.id === idSelected;
    }

    return React.createElement(EuiButtonToggle, {
      className: "euiButtonGroup__button",
      color: color,
      fill: isSelectedState,
      iconSide: option.iconSide,
      iconType: option.iconType,
      id: option.id,
      isDisabled: isDisabled || option.isDisabled,
      isIconOnly: isIconOnly,
      isSelected: isSelectedState,
      key: index,
      label: option.label,
      name: option.name || name,
      onChange: function onChange() {
        return _onChange(option.id, option.value);
      },
      size: buttonSize,
      toggleClassName: "euiButtonGroup__toggle",
      type: type,
      value: option.value
    });
  })));
};
EuiButtonGroup.propTypes = {
  options: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    label: PropTypes.string.isRequired,
    isDisabled: PropTypes.bool
  })).isRequired,
  onChange: PropTypes.func.isRequired,

  /**
   * See `EuiButton`
   */
  color: PropTypes.string,

  /**
   * Most button groups should be the small button size,
   * but if you NEED to bump it to regular, change this to 'm'
   */
  buttonSize: PropTypes.string,

  /**
   * Hides the label from the button content and only displays the icon
   */
  isIconOnly: PropTypes.bool,
  isDisabled: PropTypes.bool,

  /**
   * Makes the whole group 100% of its parent
   */
  isFullWidth: PropTypes.bool,

  /**
   * Can only a "single" option be selected or "multi"ple?
   */
  type: PropTypes.oneOf(TOGGLE_TYPES),

  /**
   * Id of selected option for `type="single"`
   */
  idSelected: PropTypes.string,

  /**
   * Map of ids of selected options for `type="multi"`
   */
  idToSelectedMap: PropTypes.objectOf(PropTypes.bool),

  /**
   * Adds a hidden legend to the group for accessiblity
   */
  legend: PropTypes.string
};
EuiButtonGroup.defaultProps = {
  buttonSize: 's',
  color: 'text',
  idToSelectedMap: {},
  options: [],
  type: 'single'
};
EuiButtonGroup.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiButtonGroup",
  "props": {
    "buttonSize": {
      "defaultValue": {
        "value": "'s'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Most button groups should be the small button size,\nbut if you NEED to bump it to regular, change this to 'm'"
    },
    "color": {
      "defaultValue": {
        "value": "'text'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "See `EuiButton`"
    },
    "idToSelectedMap": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "type": {
        "name": "objectOf",
        "value": {
          "name": "bool"
        }
      },
      "required": false,
      "description": "Map of ids of selected options for `type=\"multi\"`"
    },
    "options": {
      "defaultValue": {
        "value": "[]",
        "computed": false
      },
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "id": {
              "name": "string",
              "required": true
            },
            "label": {
              "name": "string",
              "required": true
            },
            "isDisabled": {
              "name": "bool",
              "required": false
            }
          }
        }
      },
      "required": false,
      "description": ""
    },
    "type": {
      "defaultValue": {
        "value": "'single'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "computed": true,
        "value": "TOGGLE_TYPES"
      },
      "required": false,
      "description": "Can only a \"single\" option be selected or \"multi\"ple?"
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    },
    "isIconOnly": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Hides the label from the button content and only displays the icon"
    },
    "isDisabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "isFullWidth": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Makes the whole group 100% of its parent"
    },
    "idSelected": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Id of selected option for `type=\"single\"`"
    },
    "legend": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Adds a hidden legend to the group for accessiblity"
    }
  }
};