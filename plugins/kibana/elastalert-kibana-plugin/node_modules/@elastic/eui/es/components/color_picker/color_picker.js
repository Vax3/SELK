import "core-js/modules/es7.symbol.async-iterator";
import "core-js/modules/es6.symbol";
import "core-js/modules/es6.object.set-prototype-of";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { ChromePicker } from 'react-color';
import { EuiOutsideClickDetector } from '../outside_click_detector';
import { EuiColorPickerSwatch } from './color_picker_swatch';
import { EuiI18n } from '../i18n';
export var EuiColorPicker =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiColorPicker, _Component);

  function EuiColorPicker(props) {
    var _this;

    _classCallCheck(this, EuiColorPicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiColorPicker).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "closeColorSelector", function () {
      _this.setState({
        showColorSelector: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleColorSelector", function () {
      _this.setState({
        showColorSelector: !_this.state.showColorSelector
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleColorSelection", function (color) {
      _this.props.onChange(color.hex);
    });

    _this.state = {
      showColorSelector: false
    };
    return _this;
  }

  _createClass(EuiColorPicker, [{
    key: "getColorLabel",
    value: function getColorLabel() {
      var _this2 = this;

      return React.createElement(EuiI18n, {
        token: "euiColorPicker.transparentColor",
        default: "transparent"
      }, function (transparentColor) {
        var color = _this2.props.color;
        var colorValue = color === null ? "(".concat(transparentColor, ")") : color;
        return React.createElement(EuiI18n, {
          token: "euiColorPicker.colorSelectionLabel",
          default: "Color selection is {colorValue}",
          values: {
            colorValue: colorValue
          }
        }, function (colorSelectionLabel) {
          return React.createElement("div", {
            className: "euiColorPicker__label",
            "aria-label": colorSelectionLabel
          }, colorValue);
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          color = _this$props.color,
          className = _this$props.className,
          showColorLabel = _this$props.showColorLabel;
      var classes = classNames('euiColorPicker', className);
      return React.createElement(EuiOutsideClickDetector, {
        isDisabled: !this.state.showColorSelector,
        onOutsideClick: this.closeColorSelector
      }, React.createElement("div", {
        className: classes,
        "data-test-subj": this.props['data-test-subj']
      }, React.createElement("div", {
        className: "euiColorPicker__preview",
        onClick: this.toggleColorSelector
      }, React.createElement(EuiColorPickerSwatch, {
        color: color,
        "aria-label": this.props['aria-label']
      }), showColorLabel ? this.getColorLabel() : null), this.state.showColorSelector ? React.createElement("div", {
        className: "euiColorPickerPopUp",
        "data-test-subj": "colorPickerPopup"
      }, React.createElement(ChromePicker, {
        color: color ? color : '#ffffff',
        disableAlpha: true,
        onChange: this.handleColorSelection
      })) : null));
    }
  }]);

  return EuiColorPicker;
}(Component);
EuiColorPicker.propTypes = {
  className: PropTypes.string,
  color: PropTypes.string,
  onChange: PropTypes.func.isRequired,
  showColorLabel: PropTypes.bool
};
EuiColorPicker.defaultProps = {
  'aria-label': 'Select a color',
  showColorLabel: true
};
EuiColorPicker.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "closeColorSelector",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "toggleColorSelector",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "handleColorSelection",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "color",
      "type": null
    }],
    "returns": null
  }, {
    "name": "getColorLabel",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiColorPicker",
  "props": {
    "aria-label": {
      "defaultValue": {
        "value": "'Select a color'",
        "computed": false
      },
      "required": false
    },
    "showColorLabel": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "color": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    }
  }
};