import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { EuiIcon } from '../icon';
import { EuiToolTip } from './tool_tip';
export var EuiIconTip = function EuiIconTip(_ref) {
  var type = _ref.type,
      ariaLabel = _ref['aria-label'],
      color = _ref.color,
      size = _ref.size,
      iconProps = _ref.iconProps,
      rest = _objectWithoutProperties(_ref, ["type", "aria-label", "color", "size", "iconProps"]);

  return React.createElement(EuiToolTip, rest, React.createElement(EuiIcon, _extends({
    tabIndex: "0",
    type: type,
    color: color,
    size: size,
    "aria-label": ariaLabel
  }, iconProps)));
};
EuiIconTip.propTypes = {
  /**
   * The icon type.
   */
  type: PropTypes.string,

  /**
   * The icon color.
   */
  color: PropTypes.string,

  /**
   * The icon size.
   */
  size: PropTypes.string,

  /**
   * Explain what this icon means for screen readers.
   */
  'aria-label': PropTypes.string,

  /**
   * Pass certain props down to `EuiIcon`
   */
  iconProps: PropTypes.object
};
EuiIconTip.defaultProps = {
  type: 'questionInCircle',
  'aria-label': 'Info'
};
EuiIconTip.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiIconTip",
  "props": {
    "type": {
      "defaultValue": {
        "value": "'questionInCircle'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The icon type."
    },
    "aria-label": {
      "defaultValue": {
        "value": "'Info'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Explain what this icon means for screen readers."
    },
    "color": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The icon color."
    },
    "size": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "The icon size."
    },
    "iconProps": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Pass certain props down to `EuiIcon`"
    }
  }
};