import "core-js/modules/es7.symbol.async-iterator";
import "core-js/modules/es6.symbol";
import "core-js/modules/es6.object.assign";
import "core-js/modules/es6.object.keys";
import "core-js/modules/es6.object.set-prototype-of";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es7.object.values";
import "core-js/modules/es6.function.name";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { LineSeries, MarkSeries, AbstractSeries } from 'react-vis';
import { CURVE } from '../utils/chart_utils';
export var EuiLineSeries =
/*#__PURE__*/
function (_AbstractSeries) {
  _inherits(EuiLineSeries, _AbstractSeries);

  function EuiLineSeries() {
    _classCallCheck(this, EuiLineSeries);

    return _possibleConstructorReturn(this, _getPrototypeOf(EuiLineSeries).apply(this, arguments));
  }

  _createClass(EuiLineSeries, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          data = _this$props.data,
          name = _this$props.name,
          curve = _this$props.curve,
          onSeriesClick = _this$props.onSeriesClick,
          onValueClick = _this$props.onValueClick,
          showLineMarks = _this$props.showLineMarks,
          lineSize = _this$props.lineSize,
          lineMarkColor = _this$props.lineMarkColor,
          lineMarkSize = _this$props.lineMarkSize,
          color = _this$props.color,
          borderOpacity = _this$props.borderOpacity,
          rest = _objectWithoutProperties(_this$props, ["data", "name", "curve", "onSeriesClick", "onValueClick", "showLineMarks", "lineSize", "lineMarkColor", "lineMarkSize", "color", "borderOpacity"]);

      return React.createElement(Fragment, null, React.createElement(LineSeries, _extends({}, rest, {
        key: "".concat(name, "-border"),
        curve: curve,
        data: data,
        onSeriesClick: onSeriesClick,
        style: {
          pointerEvents: 'visiblestroke',
          strokeWidth: lineSize + 2,
          // border margin
          opacity: borderOpacity
        },
        _colorValue: 'white'
      })), React.createElement(LineSeries, _extends({}, rest, {
        key: name,
        curve: curve,
        data: data,
        opacity: 1,
        style: {
          pointerEvents: 'visiblestroke',
          strokeWidth: lineSize
        },
        color: color
      })), showLineMarks && React.createElement(MarkSeries, _extends({}, rest, {
        key: "".concat(name, "-mark"),
        data: data,
        color: color || lineMarkColor,
        size: lineMarkSize,
        stroke: 'white',
        opacity: 1,
        onValueClick: onValueClick,
        strokeWidth: 2
      })));
    }
  }]);

  return EuiLineSeries;
}(AbstractSeries);
EuiLineSeries.displayName = 'EuiLineSeries';
EuiLineSeries.propTypes = {
  /** The name used to define the data in tooltips and legends */
  name: PropTypes.string.isRequired,

  /** Array<{x: string|number, y: string|number}> */
  data: PropTypes.arrayOf(PropTypes.shape({
    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
  })).isRequired,

  /** See eui_palettes.js or colorPalette service for recommended colors */
  color: PropTypes.string,
  curve: PropTypes.oneOf(Object.values(CURVE)),
  showLineMarks: PropTypes.bool,
  lineSize: PropTypes.number,
  lineMarkColor: PropTypes.string,
  lineMarkSize: PropTypes.number,
  onSeriesClick: PropTypes.func,
  onValueClick: PropTypes.func,
  borderOpacity: PropTypes.number
};
EuiLineSeries.defaultProps = {
  curve: CURVE.LINEAR,
  showLineMarks: false,
  lineSize: 1,
  lineMarkSize: 0,
  borderOpacity: 1
};
EuiLineSeries.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiLineSeries",
  "props": {
    "curve": {
      "defaultValue": {
        "value": "CURVE.LINEAR",
        "computed": true
      },
      "type": {
        "name": "enum",
        "computed": true,
        "value": "Object.values(CURVE)"
      },
      "required": false,
      "description": ""
    },
    "showLineMarks": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "lineSize": {
      "defaultValue": {
        "value": "1",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "lineMarkSize": {
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "borderOpacity": {
      "defaultValue": {
        "value": "1",
        "computed": false
      },
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "name": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": "The name used to define the data in tooltips and legends"
    },
    "data": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "x": {
              "name": "union",
              "value": [{
                "name": "string"
              }, {
                "name": "number"
              }],
              "required": false
            },
            "y": {
              "name": "union",
              "value": [{
                "name": "string"
              }, {
                "name": "number"
              }],
              "required": false
            }
          }
        }
      },
      "required": true,
      "description": "Array<{x: string|number, y: string|number}>"
    },
    "color": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "See eui_palettes.js or colorPalette service for recommended colors"
    },
    "lineMarkColor": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "onSeriesClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onValueClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    }
  }
};