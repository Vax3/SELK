import "core-js/modules/es7.symbol.async-iterator";
import "core-js/modules/es6.symbol";
import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";
import "core-js/modules/es6.object.set-prototype-of";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Fragment, Component } from 'react';
import PropTypes from 'prop-types';
import { EuiLoadingSpinner } from '../../loading';
import { EuiFormControlLayoutClearButton } from './form_control_layout_clear_button';
import { EuiFormControlLayoutCustomIcon } from './form_control_layout_custom_icon';
export var ICON_SIDES = ['left', 'right'];
export var EuiFormControlLayoutIcons =
/*#__PURE__*/
function (_Component) {
  _inherits(EuiFormControlLayoutIcons, _Component);

  function EuiFormControlLayoutIcons() {
    _classCallCheck(this, EuiFormControlLayoutIcons);

    return _possibleConstructorReturn(this, _getPrototypeOf(EuiFormControlLayoutIcons).apply(this, arguments));
  }

  _createClass(EuiFormControlLayoutIcons, [{
    key: "render",
    value: function render() {
      var icon = this.props.icon;
      var iconSide = icon && icon.side ? icon.side : 'left';
      var customIcon = this.renderCustomIcon();
      var loadingSpinner = this.renderLoadingSpinner();
      var clearButton = this.renderClearButton();
      var leftIcons;

      if (customIcon && iconSide === 'left') {
        leftIcons = React.createElement("div", {
          className: "euiFormControlLayoutIcons"
        }, customIcon);
      }

      var rightIcons; // If the icon is on the right, it should be placed after the clear button in the DOM.

      if (clearButton || loadingSpinner || customIcon && iconSide === 'right') {
        rightIcons = React.createElement("div", {
          className: "euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
        }, clearButton, loadingSpinner, iconSide === 'right' ? customIcon : undefined);
      }

      return React.createElement(Fragment, null, leftIcons, rightIcons);
    }
  }, {
    key: "renderCustomIcon",
    value: function renderCustomIcon() {
      var icon = this.props.icon;

      if (!icon) {
        return null;
      } // Normalize the icon to an object if it's a string.


      var iconProps = typeof icon === 'string' ? {
        type: icon
      } : icon;

      var iconRef = iconProps.ref,
          side = iconProps.side,
          iconRest = _objectWithoutProperties(iconProps, ["ref", "side"]);

      return React.createElement(EuiFormControlLayoutCustomIcon, _extends({
        iconRef: iconRef
      }, iconRest));
    }
  }, {
    key: "renderLoadingSpinner",
    value: function renderLoadingSpinner() {
      var isLoading = this.props.isLoading;

      if (!isLoading) {
        return null;
      }

      return React.createElement(EuiLoadingSpinner, {
        size: "m"
      });
    }
  }, {
    key: "renderClearButton",
    value: function renderClearButton() {
      var clear = this.props.clear;

      if (!clear) {
        return null;
      }

      return React.createElement(EuiFormControlLayoutClearButton, clear);
    }
  }]);

  return EuiFormControlLayoutIcons;
}(Component);
EuiFormControlLayoutIcons.propTypes = {
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    type: PropTypes.string,
    side: PropTypes.oneOf(ICON_SIDES),
    onClick: PropTypes.func
  })]),
  clear: PropTypes.shape({
    onClick: PropTypes.func
  }),
  isLoading: PropTypes.bool
};
EuiFormControlLayoutIcons.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "renderCustomIcon",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderLoadingSpinner",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "renderClearButton",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiFormControlLayoutIcons",
  "props": {
    "icon": {
      "type": {
        "name": "union",
        "value": [{
          "name": "string"
        }, {
          "name": "shape",
          "value": {
            "type": {
              "name": "string",
              "required": false
            },
            "side": {
              "name": "enum",
              "value": [{
                "value": "'left'",
                "computed": false
              }, {
                "value": "'right'",
                "computed": false
              }],
              "required": false
            },
            "onClick": {
              "name": "func",
              "required": false
            }
          }
        }]
      },
      "required": false,
      "description": ""
    },
    "clear": {
      "type": {
        "name": "shape",
        "value": {
          "onClick": {
            "name": "func",
            "required": false
          }
        }
      },
      "required": false,
      "description": ""
    },
    "isLoading": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    }
  }
};