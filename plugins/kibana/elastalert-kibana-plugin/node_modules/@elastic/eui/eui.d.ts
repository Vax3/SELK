declare module '@elastic/eui/src/components/common' {
	import { Component, FunctionComponent, SFC } from 'react';
	export interface CommonProps {
	    className?: string;
	    'aria-label'?: string;
	    'data-test-subj'?: string;
	}
	export type NoArgCallback<T> = () => T;
	export type RefCallback<Element extends HTMLElement> = (element: Element) => void;
	export type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
	/**
	 * Wraps Object.keys with proper typescript definition of the resulting array
	 */
	export function keysOf<T, K extends keyof T>(obj: T): K[];
	export type PropsOf<C> = C extends SFC<infer SFCProps> ? SFCProps : C extends FunctionComponent<infer FunctionProps> ? FunctionProps : C extends Component<infer ComponentProps> ? ComponentProps : never;
	/**
	 * Returns member keys in U not present in T set to never
	 * T = { 'one', 'two', 'three' }
	 * U = { 'three', 'four', 'five' }
	 * returns { 'four': never, 'five': never }
	 */
	export type DisambiguateSet<T, U> = {
	    [P in Exclude<keyof T, keyof U>]?: never;
	};
	/**
	 * Allow either T or U, preventing any additional keys of the other type from being present
	 */
	export type ExclusiveUnion<T, U> = (T | U) extends object ? (DisambiguateSet<T, U> & U) | (DisambiguateSet<U, T> & T) : T | U;

}
declare module '@elastic/eui' {
	import { HTMLAttributes, Component, ReactNode } from 'react';

	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiAccordionSize = 'none' | 'xs' | 's' | 'm' | 'l' | 'xl';

	  export interface EuiAccordionProps {
	    id: string;
	    buttonContentClassName?: string;
	    buttonContent?: ReactNode;
	    extraAction?: ReactNode;
	    initialIsOpen?: boolean;
	    paddingSize?: EuiAccordionSize;
	  }

	  export class EuiAccordion extends Component<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiAccordionProps
	    > {}
	}

}
declare module '@elastic/eui/src/components/icon/icon' {
	import { Component, ReactElement, SVGAttributes } from 'react';
	import PropTypes from 'prop-types';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const typeToPathMap: {
	    addDataApp: string;
	    advancedSettingsApp: string;
	    alert: string;
	    apmApp: string;
	    apmTrace: string;
	    apps: string;
	    arrowDown: string;
	    arrowLeft: string;
	    arrowRight: string;
	    arrowUp: string;
	    asterisk: string;
	    auditbeatApp: string;
	    beaker: string;
	    bell: string;
	    bolt: string;
	    boxesHorizontal: string;
	    boxesVertical: string;
	    branch: string;
	    broom: string;
	    brush: string;
	    bug: string;
	    bullseye: string;
	    calendar: string;
	    canvasApp: string;
	    codeApp: string;
	    check: string;
	    checkInCircleFilled: string;
	    clock: string;
	    compute: string;
	    console: string;
	    consoleApp: string;
	    controlsHorizontal: string;
	    controlsVertical: string;
	    copy: string;
	    copyClipboard: string;
	    createAdvancedJob: string;
	    createMultiMetricJob: string;
	    createPopulationJob: string;
	    createSingleMetricJob: string;
	    cross: string;
	    crossClusterReplicationApp: string;
	    crosshairs: string;
	    crossInACircleFilled: string;
	    cut: string;
	    dashboardApp: string;
	    database: string;
	    dataVisualizer: string;
	    devToolsApp: string;
	    discoverApp: string;
	    document: string;
	    dot: string;
	    editorAlignCenter: string;
	    editorAlignLeft: string;
	    editorAlignRight: string;
	    editorBold: string;
	    editorCodeBlock: string;
	    editorComment: string;
	    editorHeading: string;
	    editorItalic: string;
	    editorLink: string;
	    editorOrderedList: string;
	    editorRedo: string;
	    editorStrike: string;
	    editorTable: string;
	    editorUnderline: string;
	    editorUndo: string;
	    editorUnorderedList: string;
	    email: string;
	    empty: string;
	    emsApp: string;
	    exit: string;
	    expand: string;
	    exportAction: string;
	    eye: string;
	    eyeClosed: string;
	    faceHappy: string;
	    faceNeutral: string;
	    faceSad: string;
	    filebeatApp: string;
	    filter: string;
	    flag: string;
	    folderClosed: string;
	    folderOpen: string;
	    fullScreen: string;
	    gear: string;
	    gisApp: string;
	    glasses: string;
	    globe: string;
	    grab: string;
	    grabHorizontal: string;
	    graphApp: string;
	    grid: string;
	    grokApp: string;
	    heart: string;
	    heartbeatApp: string;
	    heatmap: string;
	    help: string;
	    iInCircle: string;
	    importAction: string;
	    indexClose: string;
	    indexEdit: string;
	    indexFlush: string;
	    indexManagementApp: string;
	    indexMapping: string;
	    indexOpen: string;
	    indexPatternApp: string;
	    indexRollupApp: string;
	    indexSettings: string;
	    infraApp: string;
	    inputOutput: string;
	    inspect: string;
	    invert: string;
	    kqlField: string;
	    kqlFunction: string;
	    kqlOperand: string;
	    kqlSelector: string;
	    kqlValue: string;
	    link: string;
	    list: string;
	    listAdd: string;
	    lock: string;
	    lockOpen: string;
	    loggingApp: string;
	    logoAerospike: string;
	    logoApache: string;
	    logoAPM: string;
	    logoAppSearch: string;
	    logoAWS: string;
	    logoAWSMono: string;
	    logoAzure: string;
	    logoAzureMono: string;
	    logoBeats: string;
	    logoBusinessAnalytics: string;
	    logoCeph: string;
	    logoCloud: string;
	    logoCloudEnterprise: string;
	    logoCodesandbox: string;
	    logoCouchbase: string;
	    logoDocker: string;
	    logoDropwizard: string;
	    logoElastic: string;
	    logoElasticsearch: string;
	    logoElasticStack: string;
	    logoEnterpriseSearch: string;
	    logoEtcd: string;
	    logoGCP: string;
	    logoGCPMono: string;
	    logoGithub: string;
	    logoGmail: string;
	    logoGolang: string;
	    logoHAproxy: string;
	    logoIBM: string;
	    logoIBMMono: string;
	    logoKafka: string;
	    logoKibana: string;
	    logoKubernetes: string;
	    logoLogstash: string;
	    logoMemcached: string;
	    logoMetrics: string;
	    logoMongodb: string;
	    logoMySQL: string;
	    logoNginx: string;
	    logoOsquery: string;
	    logoPhp: string;
	    logoPostgres: string;
	    logoPrometheus: string;
	    logoRabbitmq: string;
	    logoRedis: string;
	    logoSiteSearch: string;
	    logoSketch: string;
	    logoSlack: string;
	    logoWebhook: string;
	    logoWindows: string;
	    logoXpack: string;
	    logstashFilter: string;
	    logstashIf: string;
	    logstashInput: string;
	    logstashOutput: string;
	    logstashQueue: string;
	    machineLearningApp: string;
	    managementApp: string;
	    mapMarker: string;
	    memory: string;
	    menuLeft: string;
	    menuRight: string;
	    merge: string;
	    metricbeatApp: string;
	    minusInCircle: string;
	    minusInCircleFilled: string;
	    monitoringApp: string;
	    moon: string;
	    node: string;
	    notebookApp: string;
	    number: string;
	    offline: string;
	    online: string;
	    packetbeatApp: string;
	    pause: string;
	    pencil: string;
	    pin: string;
	    pinFilled: string;
	    pipelineApp: string;
	    play: string;
	    plusInCircle: string;
	    plusInCircleFilled: string;
	    popout: string;
	    questionInCircle: string;
	    refresh: string;
	    reportingApp: string;
	    save: string;
	    savedObjectsApp: string;
	    scale: string;
	    search: string;
	    searchProfilerApp: string;
	    securityAnalyticsApp: string;
	    securityApp: string;
	    shard: string;
	    share: string;
	    snowflake: string;
	    sortable: string;
	    sortDown: string;
	    sortLeft: string;
	    sortRight: string;
	    sortUp: string;
	    spacesApp: string;
	    sqlApp: string;
	    starEmpty: string;
	    starEmptySpace: string;
	    starFilled: string;
	    starFilledSpace: string;
	    starMinusEmpty: string;
	    starMinusFilled: string;
	    starPlusEmpty: string;
	    starPlusFilled: string;
	    stats: string;
	    stop: string;
	    stopFilled: string;
	    storage: string;
	    string: string;
	    submodule: string;
	    symlink: string;
	    tableOfContents: string;
	    tag: string;
	    tear: string;
	    temperature: string;
	    timelionApp: string;
	    trash: string;
	    upgradeAssistantApp: string;
	    uptimeApp: string;
	    user: string;
	    usersRolesApp: string;
	    vector: string;
	    visArea: string;
	    visBarHorizontal: string;
	    visBarVertical: string;
	    visControls: string;
	    visGauge: string;
	    visGoal: string;
	    visHeatmap: string;
	    visLine: string;
	    visMapCoordinate: string;
	    visMapRegion: string;
	    visMetric: string;
	    visPie: string;
	    visTable: string;
	    visTagCloud: string;
	    visText: string;
	    visTimelion: string;
	    visualizeApp: string;
	    visVega: string;
	    visVisualBuilder: string;
	    watchesApp: string;
	    wrench: string;
	    tokenClass: string;
	    tokenProperty: string;
	    tokenEnum: string;
	    tokenVariable: string;
	    tokenMethod: string;
	    tokenAnnotation: string;
	    tokenException: string;
	    tokenInterface: string;
	    tokenParameter: string;
	    tokenField: string;
	    tokenElement: string;
	    tokenFunction: string;
	    tokenBoolean: string;
	    tokenString: string;
	    tokenArray: string;
	    tokenNumber: string;
	    tokenConstant: string;
	    tokenObject: string;
	    tokenEvent: string;
	    tokenKey: string;
	    tokenNull: string;
	    tokenStruct: string;
	    tokenPackage: string;
	    tokenOperator: string;
	    tokenEnumMember: string;
	    tokenRepo: string;
	    tokenSymbol: string;
	    tokenFile: string;
	    tokenModule: string;
	    tokenNamespace: string;
	};
	export const TYPES: ("string" | "number" | "search" | "link" | "alert" | "apps" | "asterisk" | "beaker" | "bell" | "bolt" | "branch" | "broom" | "brush" | "bug" | "bullseye" | "calendar" | "check" | "checkInCircleFilled" | "clock" | "compute" | "console" | "copy" | "cross" | "crosshairs" | "crossInACircleFilled" | "cut" | "database" | "document" | "dot" | "email" | "empty" | "exit" | "expand" | "eye" | "faceNeutral" | "filter" | "flag" | "gear" | "glasses" | "globe" | "grab" | "grid" | "heart" | "heatmap" | "help" | "iInCircle" | "inputOutput" | "inspect" | "invert" | "list" | "lock" | "lockOpen" | "memory" | "menuLeft" | "menuRight" | "merge" | "moon" | "node" | "offline" | "online" | "pause" | "pencil" | "pin" | "play" | "popout" | "refresh" | "save" | "scale" | "shard" | "share" | "snowflake" | "sortable" | "sortLeft" | "sortRight" | "starPlusEmpty" | "starPlusFilled" | "stats" | "stop" | "storage" | "submodule" | "symlink" | "tableOfContents" | "tag" | "tear" | "temperature" | "trash" | "user" | "vector" | "wrench" | "addDataApp" | "advancedSettingsApp" | "apmApp" | "apmTrace" | "arrowDown" | "arrowLeft" | "arrowRight" | "arrowUp" | "auditbeatApp" | "boxesHorizontal" | "boxesVertical" | "canvasApp" | "codeApp" | "consoleApp" | "controlsHorizontal" | "controlsVertical" | "copyClipboard" | "createAdvancedJob" | "createMultiMetricJob" | "createPopulationJob" | "createSingleMetricJob" | "crossClusterReplicationApp" | "dashboardApp" | "dataVisualizer" | "devToolsApp" | "discoverApp" | "editorAlignCenter" | "editorAlignLeft" | "editorAlignRight" | "editorBold" | "editorCodeBlock" | "editorComment" | "editorHeading" | "editorItalic" | "editorLink" | "editorOrderedList" | "editorRedo" | "editorStrike" | "editorTable" | "editorUnderline" | "editorUndo" | "editorUnorderedList" | "emsApp" | "exportAction" | "eyeClosed" | "faceHappy" | "faceSad" | "filebeatApp" | "folderClosed" | "folderOpen" | "fullScreen" | "gisApp" | "grabHorizontal" | "graphApp" | "grokApp" | "heartbeatApp" | "importAction" | "indexClose" | "indexEdit" | "indexFlush" | "indexManagementApp" | "indexMapping" | "indexOpen" | "indexPatternApp" | "indexRollupApp" | "indexSettings" | "infraApp" | "kqlField" | "kqlFunction" | "kqlOperand" | "kqlSelector" | "kqlValue" | "listAdd" | "loggingApp" | "logoAerospike" | "logoApache" | "logoAPM" | "logoAppSearch" | "logoAWS" | "logoAWSMono" | "logoAzure" | "logoAzureMono" | "logoBeats" | "logoBusinessAnalytics" | "logoCeph" | "logoCloud" | "logoCloudEnterprise" | "logoCodesandbox" | "logoCouchbase" | "logoDocker" | "logoDropwizard" | "logoElastic" | "logoElasticsearch" | "logoElasticStack" | "logoEnterpriseSearch" | "logoEtcd" | "logoGCP" | "logoGCPMono" | "logoGithub" | "logoGmail" | "logoGolang" | "logoHAproxy" | "logoIBM" | "logoIBMMono" | "logoKafka" | "logoKibana" | "logoKubernetes" | "logoLogstash" | "logoMemcached" | "logoMetrics" | "logoMongodb" | "logoMySQL" | "logoNginx" | "logoOsquery" | "logoPhp" | "logoPostgres" | "logoPrometheus" | "logoRabbitmq" | "logoRedis" | "logoSiteSearch" | "logoSketch" | "logoSlack" | "logoWebhook" | "logoWindows" | "logoXpack" | "logstashFilter" | "logstashIf" | "logstashInput" | "logstashOutput" | "logstashQueue" | "machineLearningApp" | "managementApp" | "mapMarker" | "metricbeatApp" | "minusInCircle" | "minusInCircleFilled" | "monitoringApp" | "notebookApp" | "packetbeatApp" | "pinFilled" | "pipelineApp" | "plusInCircle" | "plusInCircleFilled" | "questionInCircle" | "reportingApp" | "savedObjectsApp" | "searchProfilerApp" | "securityAnalyticsApp" | "securityApp" | "sortDown" | "sortUp" | "spacesApp" | "sqlApp" | "starEmpty" | "starEmptySpace" | "starFilled" | "starFilledSpace" | "starMinusEmpty" | "starMinusFilled" | "stopFilled" | "timelionApp" | "upgradeAssistantApp" | "uptimeApp" | "usersRolesApp" | "visArea" | "visBarHorizontal" | "visBarVertical" | "visControls" | "visGauge" | "visGoal" | "visHeatmap" | "visLine" | "visMapCoordinate" | "visMapRegion" | "visMetric" | "visPie" | "visTable" | "visTagCloud" | "visText" | "visTimelion" | "visualizeApp" | "visVega" | "visVisualBuilder" | "watchesApp" | "tokenClass" | "tokenProperty" | "tokenEnum" | "tokenVariable" | "tokenMethod" | "tokenAnnotation" | "tokenException" | "tokenInterface" | "tokenParameter" | "tokenField" | "tokenElement" | "tokenFunction" | "tokenBoolean" | "tokenString" | "tokenArray" | "tokenNumber" | "tokenConstant" | "tokenObject" | "tokenEvent" | "tokenKey" | "tokenNull" | "tokenStruct" | "tokenPackage" | "tokenOperator" | "tokenEnumMember" | "tokenRepo" | "tokenSymbol" | "tokenFile" | "tokenModule" | "tokenNamespace")[];
	export type EuiIconType = keyof typeof typeToPathMap;
	export type IconType = EuiIconType | string | ReactElement;
	export const IconPropType: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>; const colorToClassMap: {
	    default: null;
	    primary: string;
	    secondary: string;
	    success: string;
	    accent: string;
	    warning: string;
	    danger: string;
	    text: string;
	    subdued: string;
	    ghost: string;
	};
	export const COLORS: NamedColor[]; type NamedColor = keyof typeof colorToClassMap;
	export type IconColor = string | NamedColor; const sizeToClassNameMap: {
	    original: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: IconSize[];
	export type IconSize = keyof typeof sizeToClassNameMap;
	export interface EuiIconProps {
	    /**
	     * `Enum` is any of the named icons listed in the docs, `Element` is any React SVG element, and `string` is usually a URL to an SVG file
	     */
	    type: IconType;
	    /**
	     * One of EUI's color palette or a valid CSS color value https://developer.mozilla.org/en-US/docs/Web/CSS/color_value.
	     * Note that coloring only works if your SVG is removed of fill attributes.
	     */
	    color?: IconColor;
	    /**
	     * Note that every size other than `original` assumes the provided SVG sits on a square viewbox.
	     */
	    size?: IconSize;
	} type Props = CommonProps & Omit<SVGAttributes<SVGElement>, keyof EuiIconProps> & EuiIconProps;
	interface State {
	    icon: undefined | ReactElement | string;
	    isLoading: boolean;
	}
	export class EuiIcon extends Component<Props, State> {
	    isMounted: boolean;
	    constructor(props: Props);
	    componentDidUpdate(prevProps: Props): void;
	    componentWillUnmount(): void;
	    loadIconComponent: (iconType: "string" | "number" | "search" | "link" | "alert" | "apps" | "asterisk" | "beaker" | "bell" | "bolt" | "branch" | "broom" | "brush" | "bug" | "bullseye" | "calendar" | "check" | "checkInCircleFilled" | "clock" | "compute" | "console" | "copy" | "cross" | "crosshairs" | "crossInACircleFilled" | "cut" | "database" | "document" | "dot" | "email" | "empty" | "exit" | "expand" | "eye" | "faceNeutral" | "filter" | "flag" | "gear" | "glasses" | "globe" | "grab" | "grid" | "heart" | "heatmap" | "help" | "iInCircle" | "inputOutput" | "inspect" | "invert" | "list" | "lock" | "lockOpen" | "memory" | "menuLeft" | "menuRight" | "merge" | "moon" | "node" | "offline" | "online" | "pause" | "pencil" | "pin" | "play" | "popout" | "refresh" | "save" | "scale" | "shard" | "share" | "snowflake" | "sortable" | "sortLeft" | "sortRight" | "starPlusEmpty" | "starPlusFilled" | "stats" | "stop" | "storage" | "submodule" | "symlink" | "tableOfContents" | "tag" | "tear" | "temperature" | "trash" | "user" | "vector" | "wrench" | "addDataApp" | "advancedSettingsApp" | "apmApp" | "apmTrace" | "arrowDown" | "arrowLeft" | "arrowRight" | "arrowUp" | "auditbeatApp" | "boxesHorizontal" | "boxesVertical" | "canvasApp" | "codeApp" | "consoleApp" | "controlsHorizontal" | "controlsVertical" | "copyClipboard" | "createAdvancedJob" | "createMultiMetricJob" | "createPopulationJob" | "createSingleMetricJob" | "crossClusterReplicationApp" | "dashboardApp" | "dataVisualizer" | "devToolsApp" | "discoverApp" | "editorAlignCenter" | "editorAlignLeft" | "editorAlignRight" | "editorBold" | "editorCodeBlock" | "editorComment" | "editorHeading" | "editorItalic" | "editorLink" | "editorOrderedList" | "editorRedo" | "editorStrike" | "editorTable" | "editorUnderline" | "editorUndo" | "editorUnorderedList" | "emsApp" | "exportAction" | "eyeClosed" | "faceHappy" | "faceSad" | "filebeatApp" | "folderClosed" | "folderOpen" | "fullScreen" | "gisApp" | "grabHorizontal" | "graphApp" | "grokApp" | "heartbeatApp" | "importAction" | "indexClose" | "indexEdit" | "indexFlush" | "indexManagementApp" | "indexMapping" | "indexOpen" | "indexPatternApp" | "indexRollupApp" | "indexSettings" | "infraApp" | "kqlField" | "kqlFunction" | "kqlOperand" | "kqlSelector" | "kqlValue" | "listAdd" | "loggingApp" | "logoAerospike" | "logoApache" | "logoAPM" | "logoAppSearch" | "logoAWS" | "logoAWSMono" | "logoAzure" | "logoAzureMono" | "logoBeats" | "logoBusinessAnalytics" | "logoCeph" | "logoCloud" | "logoCloudEnterprise" | "logoCodesandbox" | "logoCouchbase" | "logoDocker" | "logoDropwizard" | "logoElastic" | "logoElasticsearch" | "logoElasticStack" | "logoEnterpriseSearch" | "logoEtcd" | "logoGCP" | "logoGCPMono" | "logoGithub" | "logoGmail" | "logoGolang" | "logoHAproxy" | "logoIBM" | "logoIBMMono" | "logoKafka" | "logoKibana" | "logoKubernetes" | "logoLogstash" | "logoMemcached" | "logoMetrics" | "logoMongodb" | "logoMySQL" | "logoNginx" | "logoOsquery" | "logoPhp" | "logoPostgres" | "logoPrometheus" | "logoRabbitmq" | "logoRedis" | "logoSiteSearch" | "logoSketch" | "logoSlack" | "logoWebhook" | "logoWindows" | "logoXpack" | "logstashFilter" | "logstashIf" | "logstashInput" | "logstashOutput" | "logstashQueue" | "machineLearningApp" | "managementApp" | "mapMarker" | "metricbeatApp" | "minusInCircle" | "minusInCircleFilled" | "monitoringApp" | "notebookApp" | "packetbeatApp" | "pinFilled" | "pipelineApp" | "plusInCircle" | "plusInCircleFilled" | "questionInCircle" | "reportingApp" | "savedObjectsApp" | "searchProfilerApp" | "securityAnalyticsApp" | "securityApp" | "sortDown" | "sortUp" | "spacesApp" | "sqlApp" | "starEmpty" | "starEmptySpace" | "starFilled" | "starFilledSpace" | "starMinusEmpty" | "starMinusFilled" | "stopFilled" | "timelionApp" | "upgradeAssistantApp" | "uptimeApp" | "usersRolesApp" | "visArea" | "visBarHorizontal" | "visBarVertical" | "visControls" | "visGauge" | "visGoal" | "visHeatmap" | "visLine" | "visMapCoordinate" | "visMapRegion" | "visMetric" | "visPie" | "visTable" | "visTagCloud" | "visText" | "visTimelion" | "visualizeApp" | "visVega" | "visVisualBuilder" | "watchesApp" | "tokenClass" | "tokenProperty" | "tokenEnum" | "tokenVariable" | "tokenMethod" | "tokenAnnotation" | "tokenException" | "tokenInterface" | "tokenParameter" | "tokenField" | "tokenElement" | "tokenFunction" | "tokenBoolean" | "tokenString" | "tokenArray" | "tokenNumber" | "tokenConstant" | "tokenObject" | "tokenEvent" | "tokenKey" | "tokenNull" | "tokenStruct" | "tokenPackage" | "tokenOperator" | "tokenEnumMember" | "tokenRepo" | "tokenSymbol" | "tokenFile" | "tokenModule" | "tokenNamespace") => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiIcon, IconColor, IconSize, IconType, IconPropType, TYPES as ICON_TYPES, SIZES as ICON_SIZES, COLORS as ICON_COLORS, } from '@elastic/eui/src/components/icon/icon';

}
declare module '@elastic/eui' {
	import { IconType } from '@elastic/eui';
	

	import {
	  HTMLAttributes,
	  MouseEventHandler,
	  FunctionComponent,
	  ReactNode,
	} from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  type IconSide = 'left' | 'right';

	  export interface EuiBadgeProps {
	    iconType?: IconType;
	    iconSide?: IconSide;
	    iconOnClick?: MouseEventHandler<HTMLButtonElement>;
	    iconOnClickAriaLabel?: string;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    onClickAriaLabel?: string;
	    color?: string;
	    closeButtonProps?: object;
	  }

	  export const EuiBadge: FunctionComponent<
	    CommonProps &
	      Omit<HTMLAttributes<HTMLSpanElement>, 'color'> &
	      Omit<HTMLAttributes<HTMLButtonElement>, 'color'> &
	      EuiBadgeProps
	  >;

	  export interface EuiBetaBadgeProps {
	    iconType?: IconType;
	    label: ReactNode;
	    tooltipContent?: ReactNode;
	    tooltipPosition?: ToolTipPositions;
	    title?: string;
	  }

	  export const EuiBetaBadge: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLSpanElement> & EuiBetaBadgeProps
	  >;
	}

}
declare module '@elastic/eui/src/components/toggle/toggle' {
	import React from 'react';
	import { ChangeEventHandler, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const typeToInputTypeMap: {
	    single: string;
	    multi: string;
	};
	export const TYPES: string[];
	export type ToggleType = keyof typeof typeToInputTypeMap;
	export type EuiToggleProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    id?: string;
	    /**
	     * Initial state of the toggle
	     */
	    checked?: boolean;
	    /**
	     * For handling the onChange event of the input
	     */
	    onChange?: ChangeEventHandler<HTMLInputElement>;
	    isDisabled?: boolean;
	    name?: string;
	    /**
	     * Determines the input type based on multiple or single item(s)
	     */
	    type?: ToggleType;
	    /**
	     * What would typically be the input's label. Required for accessibility.
	     */
	    label: string;
	    /**
	     * Additional classNames for the input itself
	     */
	    inputClassName?: string;
	    value?: string | number;
	};
	export const EuiToggle: React.SFC<EuiToggleProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiToggle, ToggleType, TYPES as TOGGLE_TYPES } from '@elastic/eui/src/components/toggle/toggle';

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconType, IconSize } from '@elastic/eui'
	import { ToggleType } from '@elastic/eui'

	import { FunctionComponent, ButtonHTMLAttributes, AnchorHTMLAttributes, ChangeEventHandler, MouseEventHandler, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  type EuiButtonPropsForButtonOrLink<Props> = (
	    (Props & { onClick: MouseEventHandler<HTMLButtonElement> } & ButtonHTMLAttributes<HTMLButtonElement>) |
	    (Props & { href: string; onClick: MouseEventHandler<HTMLAnchorElement> } & AnchorHTMLAttributes<HTMLAnchorElement>) |
	    (Props & AnchorHTMLAttributes<HTMLAnchorElement> & ButtonHTMLAttributes<HTMLButtonElement>)
	  )

	  /**
	   * Normal button type defs
	   *
	   * @see './button.js'
	   */

	  export type ButtonIconSide = 'left' | 'right';
	  export type ButtonColor =
	    | 'primary'
	    | 'secondary'
	    | 'warning'
	    | 'danger'
	    | 'ghost';
	  export type ButtonSize = 's' | 'm' | 'l';

	  export interface EuiButtonProps {
	    iconType?: IconType;
	    iconSide?: ButtonIconSide;
	    fill?: boolean;
	    color?: ButtonColor;
	    size?: ButtonSize;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    fullWidth?: boolean;
	    contentProps?: HTMLAttributes<HTMLSpanElement>;
	    textProps?: HTMLAttributes<HTMLSpanElement>;
	  }
	  export const EuiButton: FunctionComponent<
	    EuiButtonPropsForButtonOrLink<CommonProps & EuiButtonProps>
	  >;

	  /**
	   * button icon type defs
	   *
	   * @see './button_icon/button_icon.js'
	   */

	  export type ButtonIconColor =
	    | 'danger'
	    | 'disabled'
	    | 'ghost'
	    | 'primary'
	    | 'subdued'
	    | 'success'
	    | 'text'
	    | 'warning';

	  export interface EuiButtonIconProps {
	    iconType?: IconType;
	    color?: ButtonIconColor;
	    'aria-label'?: string;
	    'aria-labelledby'?: string;
	    isDisabled?: boolean;
	    size?: ButtonSize;
	    iconSize?: IconSize
	  }
	  export const EuiButtonIcon: FunctionComponent<
	    EuiButtonPropsForButtonOrLink<CommonProps & EuiButtonIconProps>
	  >;

	  /**
	   * empty button type defs
	   *
	   * @see './button_empty/button_empty.js'
	   */

	  export type EmptyButtonIconSide = 'left' | 'right';
	  export type EmptyButtonColor =
	    | 'primary'
	    | 'danger'
	    | 'disabled'
	    | 'text'
	    | 'ghost';
	  export type EmptyButtonSizes = 'xs' | 's' | 'l';
	  export type EmptyButtonFlush = 'left' | 'right';

	  export type EuiButtonEmptyProps = EuiButtonPropsForButtonOrLink<CommonProps & {
	    iconType?: IconType;
	    iconSide?: EmptyButtonIconSide;
	    color?: EmptyButtonColor;
	    size?: EmptyButtonSizes;
	    flush?: EmptyButtonFlush;
	    isLoading?: boolean;
	    isDisabled?: boolean;
	    contentProps?: HTMLAttributes<HTMLSpanElement>;
	    textProps?: HTMLAttributes<HTMLSpanElement>;
	  }>

	  export const EuiButtonEmpty: FunctionComponent<EuiButtonEmptyProps>;

	  /**
	   * button toggle type defs
	   *
	   * @see './button_toggle/button_toggle.js'
	   */

	  export type EuiButtonToggleProps = EuiButtonProps & {
	      isEmpty?: boolean;
	      isIconOnly?: boolean;
	      isSelected?: boolean;
	      label: string;
	      toggleClassName?: string;
	      type?: ToggleType;
	    }

	  export const EuiButtonToggle: FunctionComponent<
	    EuiButtonPropsForButtonOrLink<CommonProps & EuiButtonToggleProps>
	  >;

	  /**
	   * button group type defs
	   *
	   * @see './button_group/button_group.js'
	   */

	  export type EuiButtonGroupIdToSelectedMap = { [id: string]: boolean };
	  export type GroupButtonSize = 's' | 'm';

	  export interface EuiButtonGroupOption {
	    id: string,
	    label: string,
	    isDisabled?: boolean,
	  }
	  export interface EuiButtonGroupProps {
	      options: EuiButtonGroupOption[],
	      onChange: (id: string, value: any) => void;
	      buttonSize?: GroupButtonSize;
	      isDisabled?: boolean,
	      isFullWidth?: boolean;
	      isIconOnly?: boolean;
	      idSelected?: string;
	      idToSelectedMap?: EuiButtonGroupIdToSelectedMap;
	      legend?: string,
	      color?: ButtonColor,
	      type?: ToggleType,
	      name?: string;
	    }

	  export const EuiButtonGroup: FunctionComponent<
	    Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & EuiButtonGroupProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui'

	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiCallOut type defs
	   *
	   * @see './code.js'
	   */

	  type Color = 'primary' | 'success' | 'warning' | 'danger';
	  type Size = 's' | 'm';

	  export interface EuiCallOutProps {
	    title?: ReactNode,
	    iconType?: IconType,
	    color?: Color,
	    size?: Size,
	  }

	  export const EuiCallOut: FunctionComponent<
	    CommonProps & EuiCallOutProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'>
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  type FontSize = 's' | 'm' | 'l';
	  type PaddingSize = 'none' | 's' | 'm' | 'l';

	  // there isn't a specific type for the <code> element, and MDN
	  // says that it only supports the HTMLElement interface
	  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
	  type HTMLCodeElement = HTMLElement

	  interface EuiCodeSharedProps {
	    paddingSize?: PaddingSize;

	    /**
	     * Sets the syntax highlighting for a specific language
	     * See http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html#language-names-and-aliases
	     * for options
	     */
	    language?: string;

	    overflowHeight?: number;
	    fontSize?: FontSize;
	    transparentBackground?: boolean;
	    isCopyable?: boolean;
	  }


	  /**
	   * EuiCode type defs
	   *
	   * @see './code.js'
	   */

	  export interface EuiCodeProps extends EuiCodeSharedProps {
	    inline?: true
	  }

	  export const EuiCode: FunctionComponent<
	    CommonProps & EuiCodeProps & HTMLAttributes<HTMLCodeElement>
	  >;

	  /**
	   * EuiCodeBlock type defs
	   *
	   * @see './code_block.js'
	   */

	  export interface EuiCodeBlockProps extends EuiCodeSharedProps {
	    inline?: false
	  }

	  export const EuiCodeBlock: FunctionComponent<
	    CommonProps & EuiCodeBlockProps & HTMLAttributes<HTMLCodeElement>
	  >;
	}

}
declare module '@elastic/eui/src/components/card/card_graphic' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiCardGraphicColor = 'blue' | 'green' | 'purple';
	export const GRAPHIC_COLORS: EuiCardGraphicColor[];
	export type EuiCardGraphicProps = HTMLAttributes<SVGElement> & CommonProps & {
	    /**
	     * Determines the brand-driven color codes used in the SVG
	     */
	    color?: EuiCardGraphicColor;
	};
	export const EuiCardGraphic: FunctionComponent<EuiCardGraphicProps>;

}
declare module '@elastic/eui' {
	export { EuiCardGraphic } from '@elastic/eui/src/components/card/card_graphic';

}
declare module '@elastic/eui' {
	import { ButtonHTMLAttributes, ReactNode, FunctionComponent, FocusEventHandler } from 'react';
	import { ListProps } from 'react-virtualized';
	import {
	  EuiComboBoxOption,
	  EuiComboBoxOptionProps,
	  EuiComboBoxOptionsListPosition,
	  EuiComboBoxOptionsListProps,
	} from '@elastic/eui';
	import { RefCallback, CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiComboBoxOptionProps = CommonProps &
	    ButtonHTMLAttributes<HTMLButtonElement> & {
	      label: string;
	      isGroupLabelOption?: boolean;
	      options?: EuiComboBoxOptionProps[];
	    };

	  export type EuiComboBoxOptionsListPosition = 'top' | 'bottom';

	  export interface EuiComboBoxOption {
	    option: EuiComboBoxOptionProps;
	    children?: ReactNode;
	    className?: string;
	    optionRef?: RefCallback<HTMLButtonElement>;
	    onClick: (option: EuiComboBoxOptionProps) => any;
	    onEnterKey: (option: EuiComboBoxOptionProps) => any;
	    disabled?: boolean;
	  }

	  export interface EuiComboBoxOptionsListProps {
	    options?: EuiComboBoxOptionProps[];
	    isLoading?: boolean;
	    selectedOptions?: any[];
	    onCreateOption?: any;
	    searchValue?: string;
	    matchingOptions?: EuiComboBoxOptionProps[];
	    optionRef?: EuiComboBoxOption['optionRef'];
	    onOptionClick?: EuiComboBoxOption['onClick'];
	    onOptionEnterKey?: EuiComboBoxOption['onEnterKey'];
	    areAllOptionsSelected?: boolean;
	    getSelectedOptionForSearchValue?: (
	      searchValue: string,
	      selectedOptions: any[]
	    ) => EuiComboBoxOptionProps;
	    updatePosition: (parameter?: UIEvent | EuiPanelProps['panelRef']) => any;
	    position?: EuiComboBoxOptionsListPosition;
	    listRef: EuiPanelProps['panelRef'];
	    renderOption?: (
	      option: EuiComboBoxOptionProps,
	      searchValue: string,
	      OPTION_CONTENT_CLASSNAME: string
	    ) => ReactNode;
	    width?: number;
	    scrollToIndex?: number;
	    onScroll?: ListProps['onScroll'];
	    rowHeight?: number;
	    fullWidth?: boolean;
	  }
	  export const EuiComboBoxOptionsList: FunctionComponent<
	    EuiComboBoxOptionsListProps
	  >;

	  export type EuiComboBoxSingleSelectionShape = { asPlainText?: boolean; };

	  export interface EuiComboBoxProps {
	    id?: string;
	    isDisabled?: boolean;
	    className?: string;
	    placeholder?: string;
	    isLoading?: boolean;
	    async?: boolean;
	    singleSelection?: EuiComboBoxSingleSelectionShape | boolean;
	    noSuggestions?: boolean;
	    options?: EuiComboBoxOptionsListProps['options'];
	    selectedOptions?: EuiComboBoxOptionsListProps['selectedOptions'];
	    onBlur?: FocusEventHandler<HTMLInputElement>;
	    onChange?: (options: Array<EuiComboBoxOptionProps>) => any;
	    onFocus?: FocusEventHandler<HTMLInputElement>;
	    onSearchChange?: (searchValue: string) => any;
	    onCreateOption?: EuiComboBoxOptionsListProps['onCreateOption'];
	    renderOption?: EuiComboBoxOptionsListProps['renderOption'];
	    isInvalid?: boolean;
	    rowHeight?: number;
	    isClearable?: boolean;
	    fullWidth?: boolean;
	    inputRef?: (element: HTMLInputElement) => void;
	  }
	  export const EuiComboBox: FunctionComponent<EuiComboBoxProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, RefCallback, NoArgCallback, Omit } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  ButtonHTMLAttributes,
	  HTMLAttributes,
	  ReactElement,
	  ReactNode
	} from 'react';
	import * as React from 'react'; module '@elastic/eui' {
	  /**
	   * context menu panel type defs
	   *
	   * @see './context_menu_panel.js`
	   */

	  export type EuiContextMenuPanelHeightChangeHandler = (height: number) => void;
	  export type EuiContextMenuPanelTransitionType = 'in' | 'out';
	  export type EuiContextMenuPanelTransitionDirection = 'next' | 'previous';
	  export type EuiContextMenuPanelShowPanelCallback = (
	    currentPanelIndex: number
	  ) => void;

	  export interface EuiContextMenuPanelProps {
	    items?: ReactNode[];
	    title?: ReactNode;
	    onClose?: NoArgCallback<void>;
	    onHeightChange?: EuiContextMenuPanelHeightChangeHandler;
	    transitionType?: EuiContextMenuPanelTransitionType;
	    transitionDirection?: EuiContextMenuPanelTransitionDirection;
	    onTransitionComplete?: NoArgCallback<void>;
	    onUseKeyboardToNavigate?: NoArgCallback<void>;
	    hasFocus?: boolean;
	    showNextPanel?: EuiContextMenuPanelShowPanelCallback;
	    showPreviousPanel?: EuiContextMenuPanelShowPanelCallback;
	    initialFocusedItemIndex?: number;
	  }

	  export const EuiContextMenuPanel: FunctionComponent<
	    CommonProps &
	      Omit<
	        HTMLAttributes<HTMLDivElement>,
	        'onKeyDown' | 'tabIndex' | 'onAnimationEnd'
	      > &
	      EuiContextMenuPanelProps
	  >;

	  /**
	   * context menu item type defs
	   *
	   * @see './context_menu_item.js`
	   */

	  export type EuiContextMenuItemIcon = ReactElement<any> | string | HTMLElement;

	  export interface EuiContextMenuItemProps extends CommonProps {
	    icon?: EuiContextMenuItemIcon;
	    hasPanel?: boolean;
	    disabled?: boolean;
	    onClick?: () => void;
	    buttonRef?: RefCallback<HTMLButtonElement>;
	    toolTipContent?: ReactNode;
	    toolTipTitle?: ReactNode;
	    toolTipPosition?: string;
	    href?: string;
	    target?: string;
	    rel?: string;
	    children?: ReactNode;
	  }

	  export const EuiContextMenuItem: FunctionComponent<
	    CommonProps &
	      Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'> &
	      EuiContextMenuItemProps
	  >;

	  /**
	   * context menu type defs
	   *
	   * @see './context_menu.js`
	   */

	  export type EuiContextMenuPanelId = string | number;

	  export type EuiContextMenuPanelItemDescriptor = Omit<
	    EuiContextMenuItemProps,
	    'hasPanel'
	  > & {
	    name: string;
	    panel?: EuiContextMenuPanelId;
	  };

	  interface EuiContextMenuPanelDescriptor {
	    id: EuiContextMenuPanelId;
	    title?: string;
	    items?: EuiContextMenuPanelItemDescriptor[];
	    content?: React.ReactNode;
	    width?: number;
	  }

	  export type EuiContextMenuProps = CommonProps &
	    Omit<HTMLAttributes<HTMLDivElement>, 'style'> & {
	      panels?: EuiContextMenuPanelDescriptor[];
	      initialPanelId?: EuiContextMenuPanelId;
	    };

	  export const EuiContextMenu: FunctionComponent<EuiContextMenuProps>;
	}

}
declare module '@elastic/eui/src/components/date_picker/react-datepicker' {
	// Type definitions for react-datepicker 1.8
	// Project: https://github.com/Hacker0x01/react-datepicker
	// Definitions by: Rajab Shakirov <https://github.com/radziksh>,
	//                 Andrey Balokha <https://github.com/andrewBalekha>,
	//                 Greg Smith <https://github.com/smrq>,
	//                 Platon Pronko <https://github.com/Rogach>
	//                 Roy Xue <https://github.com/royxue>
	//                 Koala Human <https://github.com/KoalaHuman>
	//                 Sean Kelley <https://github.com/seansfkelley>
	//                 Justin Grant <https://github.com/justingrant>
	// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
	// TypeScript Version: 2.8

	import * as React from 'react';
	import * as moment from 'moment';

	export interface ReactDatePickerProps {
	  adjustDateOnChange?: boolean;
	  allowSameDay?: boolean;
	  autoComplete?: string;
	  autoFocus?: boolean;
	  calendarClassName?: string;
	  children?: React.ReactNode;
	  className?: string;
	  customInput?: React.ReactNode;
	  customInputRef?: string;
	  dateFormat?: string | string[];
	  dateFormatCalendar?: string;
	  dayClassName?(date: moment.Moment): string | null;
	  disabled?: boolean;
	  disabledKeyboardNavigation?: boolean;
	  dropdownMode?: 'scroll' | 'select';
	  endDate?: moment.Moment;
	  excludeDates?: moment.Moment[];
	  excludeTimes?: moment.Moment[];
	  filterDate?(date: moment.Moment): boolean;
	  fixedHeight?: boolean;
	  forceShowMonthNavigation?: boolean;
	  formatWeekNumber?(date: moment.Moment): string | number;
	  highlightDates?: moment.Moment[];
	  id?: string;
	  includeDates?: moment.Moment[];
	  includeTimes?: moment.Moment[];
	  inline?: boolean;
	  isClearable?: boolean;
	  locale?: string;
	  maxDate?: moment.Moment;
	  maxTime?: moment.Moment;
	  minDate?: moment.Moment;
	  minTime?: moment.Moment;
	  monthsShown?: number;
	  name?: string;
	  onBlur?(event: React.FocusEvent<HTMLInputElement>): void;
	  onChange(date: moment.Moment | null, event: React.SyntheticEvent<any> | undefined): void;
	  onChangeRaw?(event: React.FocusEvent<HTMLInputElement>): void;
	  onClickOutside?(event: React.MouseEvent<HTMLDivElement>): void;
	  onFocus?(event: React.FocusEvent<HTMLInputElement>): void;
	  onKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;
	  onMonthChange?(date: moment.Moment): void;
	  onSelect?(date: moment.Moment, event: React.SyntheticEvent<any> | undefined): void;
	  onWeekSelect?(firstDayOfWeek: moment.Moment, weekNumber: string | number, event: React.SyntheticEvent<any> | undefined): void;
	  onYearChange?(date: moment.Moment): void;
	  openToDate?: moment.Moment;
	  peekNextMonth?: boolean;
	  placeholderText?: string;
	  popperClassName?: string;
	  popperContainer?(props: { children: React.ReactNode[] }): React.ReactNode;
	  popperPlacement?: string;
	  preventOpenOnFocus?: boolean;
	  readOnly?: boolean;
	  required?: boolean;
	  scrollableMonthYearDropdown?: boolean;
	  scrollableYearDropdown?: boolean;
	  selected?: moment.Moment | null;
	  selectsEnd?: boolean;
	  selectsStart?: boolean;
	  shouldCloseOnSelect?: boolean;
	  showDisabledMonthNavigation?: boolean;
	  showMonthDropdown?: boolean;
	  showMonthYearDropdown?: boolean;
	  showTimeSelect?: boolean;
	  showTimeSelectOnly?: boolean;
	  showWeekNumbers?: boolean;
	  showYearDropdown?: boolean;
	  startDate?: moment.Moment;
	  startOpen?: boolean;
	  tabIndex?: number;
	  timeCaption?: string;
	  timeFormat?: string;
	  timeIntervals?: number;
	  title?: string;
	  todayButton?: string;
	  useShortMonthInDropdown?: boolean;
	  useWeekdaysShort?: boolean;
	  utcOffset?: number;
	  value?: string;
	  weekLabel?: string;
	  withPortal?: boolean;
	  yearDropdownItemNumber?: number;
	} const ReactDatePicker: React.ClassicComponentClass<ReactDatePickerProps>;
	export default ReactDatePicker;

}
declare module '@elastic/eui' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	import _ReactDatePicker, {
	  ReactDatePickerProps as _ReactDatePickerProps,
	} from '@elastic/eui/src/components/date_picker/react-datepicker';
	import { Moment } from 'moment'; module '@elastic/eui' {
	  interface OnTimeChangeProps {
	    start: string;
	    end: string;
	    isInvalid: boolean;
	    isQuickSelection: boolean;
	  }

	  interface OnRefreshProps {
	    start: string;
	    end: string;
	    refreshInterval: number;
	  }

	  interface OnRefreshChangeProps {
	    isPaused: boolean;
	    refreshInterval: number;
	  }

	  interface EuiExtendedDatePickerProps extends _ReactDatePickerProps {
	    fullWidth?: boolean;
	    isInvalid?: boolean;
	    isLoading?: boolean;
	    injectTimes?: Moment[]; // added here because the type is missing in @types/react-datepicker@1.8.0
	    inputRef?: React.Ref<typeof _ReactDatePicker>;
	    placeholder?: string;
	    shadow?: boolean;
	    showIcon?: boolean;
	  }

	  export type EuiDatePickerProps = CommonProps & EuiExtendedDatePickerProps;
	  export const EuiDatePicker: React.SFC<EuiDatePickerProps>;

	  export type EuiDatePickerRangeProps = CommonProps & {
	    startDateControl: React.ReactElement<EuiDatePickerProps>;
	    endDateControl: React.ReactElement<EuiDatePickerProps>;
	    iconType?: boolean | IconType;
	    fullWidth?: boolean;
	    isCustom?: boolean;
	  };

	  export const EuiDatePickerRange: React.SFC<EuiDatePickerRangeProps>;

	  export interface EuiSuperDatePickerCommonRange {
	    start: string;
	    end: string;
	    label: string;
	  }

	  export interface EuiSuperDatePickerRecentRange {
	    start: string;
	    end: string;
	  }

	  export interface EuiSuperDatePickerQuickSelectPanel {
	    title: string;
	    content: React.ReactNode;
	  }

	  export type EuiSuperDatePickerProps = CommonProps & {
	    isLoading?: boolean;
	    start?: string;
	    end?: string;
	    isPaused?: boolean;
	    refreshInterval?: number;
	    onTimeChange: (props: OnTimeChangeProps) => void;
	    onRefresh?: (props: OnRefreshProps) => void;
	    onRefreshChange?: (props: OnRefreshChangeProps) => void;
	    commonlyUsedRanges?: EuiSuperDatePickerCommonRange[];
	    dateFormat?: string;
	    recentlyUsedRanges?: EuiSuperDatePickerRecentRange[];
	    showUpdateButton?: boolean;
	    isAutoRefreshOnly?: boolean;
	    customQuickSelectPanels?: EuiSuperDatePickerQuickSelectPanel[];
	  };

	  export const EuiSuperDatePicker: React.SFC<EuiSuperDatePickerProps>;

	  export const ReactDatePicker: typeof _ReactDatePicker;
	  export const ReactDatePickerProps: _ReactDatePickerProps;
	}

}
declare module '@elastic/eui/src/components/title/title' {
	import { FunctionComponent, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const titleSizeToClassNameMap: {
	    xxxs: string;
	    xxs: string;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const TITLE_SIZES: ("s" | "m" | "l" | "xxxs" | "xxs" | "xs")[];
	export type EuiTitleSize = keyof typeof titleSizeToClassNameMap; const textTransformToClassNameMap: {
	    uppercase: string;
	};
	export const TEXT_TRANSFORM: "uppercase"[];
	export type EuiTitleTextTransform = keyof typeof textTransformToClassNameMap;
	export type EuiTitleProps = CommonProps & {
	    children: ReactElement<any>;
	    className?: string;
	    size?: EuiTitleSize;
	    textTransform?: EuiTitleTextTransform;
	};
	export const EuiTitle: FunctionComponent<EuiTitleProps>;
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { IconColor, IconType } from '@elastic/eui';
	import { EuiTitleSize } from '@elastic/eui/src/components/title/title';

	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * EuiEmptyPrompt type defs
	   *
	   * @see './empty_prompt.js'
	   */

	  export interface EuiEmptyPromptProps {
	    iconType?: IconType;
	    iconColor?: IconColor;
	    title?: ReactNode;
	    titleSize?: EuiTitleSize;
	    body?: ReactNode;
	    actions?: ReactNode;
	  }

	  export const EuiEmptyPrompt: FunctionComponent<
	    CommonProps & EuiEmptyPromptProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'>
	  >;


	}

}
declare module '@elastic/eui' {
	import { HTMLAttributes, Component } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export class EuiErrorBoundary extends Component<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	    > {}
	}

}
declare module '@elastic/eui' {
	import React, {
	  ButtonHTMLAttributes,
	  HTMLAttributes,
	  ReactNode,
	  MouseEventHandler,
	  FunctionComponent,
	} from 'react';
	import { CommonProps, RefCallback } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  /**
	   * Facet button type defs
	   *
	   * @see './facet_button.js'
	   */

	  export interface EuiFacetButtonProps {
	    children: ReactNode;
	    icon?: ReactNode;
	    isDisabled?: boolean;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    isLoading?: boolean;
	    isSelected?: boolean;
	    quantity: number;
	    buttonRef: RefCallback<HTMLButtonElement>;
	  }
	  export const EuiFacetButton: FunctionComponent<CommonProps &
	    ButtonHTMLAttributes<HTMLButtonElement> & EuiFacetButtonProps>;

	  /**
	   * Facet group type defs
	   *
	   * @see './facet_group.js'
	   */

	  export type FacetGroupLayouts = 'vertical' | 'horizontal';
	  export interface EuiFacetGroupProps {
	    layout?: FacetGroupLayouts
	  }

	  export const EuiFacetGroup: FunctionComponent<CommonProps &
	    HTMLAttributes<HTMLDivElement> & EuiFacetGroupProps>;
	}

}
declare module '@elastic/eui/src/components/filter_group/filter_group' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFilterGroupProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    children?: ReactNode;
	    /**
	     * Expand the whole bar to fill its parent's width
	     */
	    fullWidth?: boolean;
	};
	export const EuiFilterGroup: FunctionComponent<EuiFilterGroupProps>;

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType, IconSize } from '@elastic/eui';
	

	import { Component, FunctionComponent, ButtonHTMLAttributes, HTMLAttributes } from 'react';

	import { EuiFilterGroupProps } from '@elastic/eui/src/components/filter_group/filter_group'; module '@elastic/eui' {
	  /**
	   * Filter button type defs
	   *
	   * @see './filter_button.js'
	   */

	  export interface EuiFilterButtonProps {
	    numFilters?: number;
	    numActiveFilters?: number;
	    hasActiveFilters?: boolean;
	    isSelected?: boolean;
	    isDisabled?: boolean;
	    type?: string;
	    grow?: boolean;
	    withNext?: boolean;
	    /**
	     * _DEPRECATED use `withNext`_
	     */
	    noDivider?: boolean;
	  }
	  export const EuiFilterButton: FunctionComponent<EuiButtonEmptyProps & EuiFilterButtonProps>;

	  /**
	   * Filter group type defs
	   *
	   * @see './filter_group.js'
	   */
	  export const EuiFilterGroup: FunctionComponent<EuiFilterGroupProps>;

	  /**
	   * Filter select item type defs
	   *
	   * @see './filter_select_item.js'
	   */

	  export type FilterChecked = 'on' | 'off';
	  export interface EuiFilterSelectItemProps {
	    checked?: FilterChecked;
	  }

	  export const EuiFilterSelectItem: Component<CommonProps &
	    ButtonHTMLAttributes<HTMLButtonElement> & EuiFilterSelectItemProps>;
	}

}
declare module '@elastic/eui/src/components/flyout/flyout_footer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiFlyoutFooter: EuiFlyoutFooterProps;

}
declare module '@elastic/eui/src/components/flyout/flyout_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutHeaderProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps & {
	    hasBorder?: boolean;
	}>;
	export const EuiFlyoutHeader: EuiFlyoutHeaderProps;

}
declare module '@elastic/eui/src/components/flyout/flyout_body' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiFlyoutBodyProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiFlyoutBody: EuiFlyoutBodyProps;

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { EuiFlyoutFooterProps } from '@elastic/eui/src/components/flyout/flyout_footer';
	import { EuiFlyoutHeaderProps } from '@elastic/eui/src/components/flyout/flyout_header';
	import { EuiFlyoutBodyProps } from '@elastic/eui/src/components/flyout/flyout_body'; module '@elastic/eui' {
	  export interface EuiFlyoutProps {
	    onClose: () => void;
	    size?: 's' | 'm' | 'l';
	    /**
	     * Hides the default close button. You must provide another close button somewhere within the flyout.
	     */
	    hideCloseButton?: boolean;
	    /**
	     * Locks the mouse / keyboard focus to within the flyout
	     */
	    ownFocus?: boolean;
	    /**
	     * Specify an aria-label for the close button of the flyout.
	     */
	    closeButtonAriaLabel?: string;
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	  }

	  export const EuiFlyout: React.FunctionComponent<CommonProps & EuiFlyoutProps>;

	  /**
	   * Flyout body type defs
	   *
	   * @see './flyout_body.js'
	   */
	  export const EuiFlyoutBody: EuiFlyoutBodyProps;

	  /**
	   * Flyout footer type defs
	   *
	   * @see './flyout_footer.js'
	   */
	  export const EuiFlyoutFooter: EuiFlyoutFooterProps;

	  /**
	   * Flyout header type defs
	   *
	   * @see './flyout_header.js'
	   */
	  export const EuiFlyoutHeader: EuiFlyoutHeaderProps;
	}

}
declare module '@elastic/eui' {
	import { SFC } from 'react';
	import { Props as ReactFocusLockProps } from 'react-focus-lock';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  /**
	   * A DOM node, a selector string (which will be passed to
	   * `document.querySelector()` to find the DOM node), or a function that
	   * returns a DOM node.
	   */
	  export type FocusTarget = HTMLElement | string | { (): HTMLElement };
	  /**
	   * FocusTrap type defs
	   *
	   * @see './focus_trap.js'
	   */
	  interface EuiFocusTrapProps {
	    clickOutsideDisables?: boolean,
	    initialFocus?: FocusTarget
	  }

	  export const EuiFocusTrap: SFC<
	    CommonProps & ReactFocusLockProps & EuiFocusTrapProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	
	
	
	
	
	
	
	
	
	
	
	

	import { FunctionComponent, FormHTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form.js'
	   */
	  export type EuiFormProps = CommonProps &
	    FormHTMLAttributes<HTMLFormElement> & {
	      isInvalid?: boolean;
	      error?: ReactNode | ReactNode[];
	    };

	  export const EuiForm: FunctionComponent<EuiFormProps>;
	}

}
declare module '@elastic/eui' {
	import { IconColor } from '@elastic/eui'

	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  /**
	   * health type defs
	   *
	   * @see './health.js'
	   */

	  type EuiHealthProps = CommonProps &
	    HTMLAttributes<HTMLDivElement> & {
	      color: IconColor;
	    };

	  export const EuiHealth: FunctionComponent<EuiHealthProps>;
	}

}
declare module '@elastic/eui/src/components/header/header_logo' {
	import { FunctionComponent, HTMLAttributes, ReactNode } from 'react';
	import { IconType } from '@elastic/eui';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiHeaderLogoProps {
	    href?: string;
	    iconType?: IconType;
	    iconTitle?: string;
	    children?: ReactNode;
	}
	export const EuiHeaderLogo: FunctionComponent<CommonProps & HTMLAttributes<HTMLAnchorElement> & EuiHeaderLogoProps>;

}
declare module '@elastic/eui' {
	import {
	  EuiHeaderLogoProps as HeaderLogoProps,
	  EuiHeaderLogo as HeaderLogo,
	} from '@elastic/eui/src/components/header/header_logo'; module '@elastic/eui' {
	  /**
	   * header logo type defs
	   *
	   * @see './header_logo.js'
	   */
	  export interface EuiHeaderLogoProps extends HeaderLogoProps {}
	  export const EuiHeaderLogo: typeof HeaderLogo;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { AnchorHTMLAttributes, ButtonHTMLAttributes, HTMLAttributes, MouseEventHandler, ReactNode, FunctionComponent } from 'react'; module '@elastic/eui' {

	  export const EuiKeyPadMenu: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement>
	  >;

	  interface EuiKeyPadMenuItemCommonProps {
	    label: ReactNode;
	    betaBadgeLabel?: string;
	    betaBadgeIconType?: IconType;
	    betaBadgeTooltipContent?: ReactNode;
	  }

	  export const EuiKeyPadMenuItemButton: FunctionComponent<
	    CommonProps & ButtonHTMLAttributes<HTMLButtonElement> & EuiKeyPadMenuItemCommonProps
	  >;

	  export const EuiKeyPadMenuItem: FunctionComponent<
	    CommonProps & AnchorHTMLAttributes<HTMLAnchorElement> & EuiKeyPadMenuItemCommonProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import {
	  FunctionComponent,
	  AnchorHTMLAttributes,
	  ButtonHTMLAttributes,
	  MouseEventHandler
	} from 'react'; module '@elastic/eui' {
	  /**
	   * link type defs
	   *
	   * @see './link.js'
	   */

	  export type EuiLinkType = 'button' | 'reset' | 'submit';
	  export type EuiLinkColor =
	    | 'primary'
	    | 'subdued'
	    | 'secondary'
	    | 'accent'
	    | 'danger'
	    | 'warning'
	    | 'text'
	    | 'ghost';

	  export interface LinkButtonProps {
	    type?: EuiLinkType;
	    color?: EuiLinkColor;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	  }

	  type EuiLinkButtonProps = CommonProps &
	    ButtonHTMLAttributes<HTMLButtonElement> &
	    LinkButtonProps;

	  export interface LinkAnchorProps {
	    type?: EuiLinkType;
	    color?: EuiLinkColor;
	  }

	  type EuiLinkAnchorProps = CommonProps &
	    Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick'> &
	    LinkAnchorProps;

	  export const EuiLink: FunctionComponent<EuiLinkButtonProps | EuiLinkAnchorProps>;
	}

}
declare module '@elastic/eui/src/components/modal/modal_footer' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalFooter: EuiModalFooterProps;

}
declare module '@elastic/eui/src/components/modal/modal_header' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalHeaderProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalHeader: EuiModalHeaderProps;

}
declare module '@elastic/eui/src/components/modal/modal_body' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalBodyProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalBody: EuiModalBodyProps;

}
declare module '@elastic/eui/src/components/modal/modal_header_title' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiModalHeaderTitleProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiModalHeaderTitle: EuiModalHeaderTitleProps;

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	
	

	import { ReactNode, FunctionComponent, HTMLAttributes } from 'react';

	import { EuiModalFooterProps } from '@elastic/eui/src/components/modal/modal_footer';
	import { EuiModalHeaderProps } from '@elastic/eui/src/components/modal/modal_header';
	import { EuiModalBodyProps } from '@elastic/eui/src/components/modal/modal_body';
	import { EuiModalHeaderTitleProps } from '@elastic/eui/src/components/modal/modal_header_title'; module '@elastic/eui' {
	  /**
	   * Modal type defs
	   *
	   * @see './modal.js'
	   */
	  export interface EuiModalProps {
	    onClose: () => void;
	    /**
	     * Sets the max-width of the modal,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;

	    /**
	     * Specifies what element should initially have focus;
	     * Can be a DOM node, or a selector string (which will be passed to document.querySelector() to find the DOM node), or a function that returns a DOM node.
	     */
	    initialFocus?: FocusTarget;
	  }

	  export const EuiModal: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiModalProps
	  >;

	  /**
	   * Confirm modal type defs
	   *
	   * @see './confirm_modal.js'
	   */

	  // index.js re-exports values from confirm_modal.js with these names.
	  export const EUI_MODAL_CONFIRM_BUTTON: 'confirm';
	  export const EUI_MODAL_CANCEL_BUTTON: 'cancel';

	  export interface EuiConfirmModalProps {
	    buttonColor?: ButtonColor;
	    cancelButtonText?: ReactNode;
	    confirmButtonText?: ReactNode;
	    confirmButtonDisabled?: boolean;
	    defaultFocusedButton?: 'confirm' | 'cancel';
	    title?: ReactNode;
	    onCancel?: () => void;
	    onConfirm?: () => void;
	    /**
	     * Sets the max-width of the modal,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    maxWidth?: boolean | number | string;
	  }

	  // `title` from the React defs conflicts with our definition above
	  export const EuiConfirmModal: FunctionComponent<
	    CommonProps &
	      Omit<HTMLAttributes<HTMLDivElement>, 'title'> &
	      EuiConfirmModalProps
	  >;

	  /**
	   * Modal body type defs
	   *
	   * @see './modal_body.js'
	   */
	  export const EuiModalBody: EuiModalBodyProps;

	  /**
	   * Modal footer type defs
	   *
	   * @see './modal_footer.js'
	   */
	  export const EuiModalFooter: EuiModalFooterProps;

	  /**
	   * Modal header type defs
	   *
	   * @see './modal_header.js'
	   */
	  export const EuiModalHeader: EuiModalHeaderProps;

	  /**
	   * Modal header title type defs
	   *
	   * @see './modal_header_title.js'
	   */
	  export const EuiModalHeaderTitle: EuiModalHeaderTitleProps;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent } from 'react'; module '@elastic/eui' {

	  /**
	   * MutationObserver type defs
	   *
	   * @see './mutation_observer.js'
	   */
	  export interface EuiMutationObserverProps {
	    observerOptions: MutationObserverInit, // [MutationObserverInit](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit)
	    onMutation: MutationCallback
	  }

	  export const EuiMutationObserver: FunctionComponent<
	    CommonProps & EuiMutationObserverProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent } from 'react'; module '@elastic/eui' {

	  /**
	   * ResizeObserver type defs
	   *
	   * @see './resize_observer.js'
	   */
	  export interface EuiResizeObserverProps {
	    onResize: (dimensions: { width: number, height: number }) => void
	  }

	  export const EuiResizeObserver: FunctionComponent<
	    CommonProps & EuiResizeObserverProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	

	import { FunctionComponent, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  export interface EuiPageWidthProps {
	    /**
	     * Sets the max-width of the page,
	     * set to `true` to use the default size,
	     * set to `false` to not restrict the width,
	     * set to a number for a custom width in px,
	     * set to a string for a custom width in custom measurement.
	     */
	    restrictWidth?: boolean | number | string;
	  }

	  /**
	   * @see './page.js'
	   */
	  export const EuiPage: FunctionComponent<CommonProps & EuiPageWidthProps &HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_header/page_header.js
	   */
	  export const EuiPageHeader: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_header/page_header_section.js
	   */
	  export const EuiPageHeaderSection: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_body/page_body.js
	   */
	  export const EuiPageBody: FunctionComponent<CommonProps & EuiPageWidthProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_content/page_content.js
	   */

	  export type EuiPageContentPaddingSize = 'none' | 's' | 'm' | 'l';
	  export type EuiPageContentVerticalPosition = 'center';
	  export type EuiPageContentHorizontalPosition = 'center';

	  export interface EuiPageContentProps {
	    panelPaddingSize?: EuiPageContentPaddingSize;
	    verticalPosition?: EuiPageContentVerticalPosition;
	    horizontalPosition?: EuiPageContentHorizontalPosition;
	  }

	  export const EuiPageContent: FunctionComponent<CommonProps & EuiPanelProps & EuiPageContentProps>;

	  /**
	   * @see ./page_content/page_content_body.js
	   */
	  export const EuiPageContentBody: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_content/page_content_header.js
	   */
	  export const EuiPageContentHeader: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_content/page_content_header_section.js
	   */
	  export const EuiPageContentHeaderSection: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

	  /**
	   * @see ./page_side_bar/page_side_bar.js
	   */
	  export const EuiPageSideBar: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	

	import { HTMLAttributes, FunctionComponent } from 'react'; module '@elastic/eui' {
	  /**
	   * pagination type defs
	   *
	   * @see './pagination.js'
	   */

	  export type PageClickHandler = (pageIndex: number) => void;

	  export interface EuiPaginationProps {
	    pageCount?: number;
	    activePage?: number;
	    onPageClick?: PageClickHandler;
	  }

	  export const EuiPagination: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiPaginationProps
	  >;

	  /**
	   * pagination button type defs
	   *
	   * @see './pagination_button.js'
	   */

	  export interface EuiPaginationButtonProps {
	    isActive?: boolean;
	    isPlaceholder?: boolean;
	    hideOnMobile?: boolean;
	  }

	  export const EuiPaginationButton: FunctionComponent<
	    CommonProps &
	      Omit<EuiButtonEmptyProps, 'size' | 'color'> &
	      EuiPaginationButtonProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, RefCallback } from '@elastic/eui/src/components/common';

	import { HTMLAttributes, FunctionComponent } from 'react'; module '@elastic/eui' {
	  /**
	   * panel type defs
	   *
	   * @see './panel.js'
	   */

	  export type PanelPaddingSize = 'none' | 's' | 'm' | 'l';

	  export interface EuiPanelProps {
	    hasShadow?: boolean;
	    paddingSize?: PanelPaddingSize;
	    grow?: boolean;
	    panelRef?: RefCallback<HTMLDivElement>;
	  }

	  export const EuiPanel: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiPanelProps
	  >;
	}

}
declare module '@elastic/eui/src/components/popover/popover_title' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiPopoverTitleProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiPopoverTitle: EuiPopoverTitleProps;

}
declare module '@elastic/eui/src/components/popover/popover_footer' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiPopoverFooterProps = FunctionComponent<HTMLAttributes<HTMLDivElement> & CommonProps>;
	export const EuiPopoverFooter: EuiPopoverFooterProps;

}
declare module '@elastic/eui' {
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	
	

	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react';
	import { EuiPopoverTitleProps } from '@elastic/eui/src/components/popover/popover_title';
	import { EuiPopoverFooterProps } from '@elastic/eui/src/components/popover/popover_footer'; module '@elastic/eui' {
	  /**
	   * popover type defs
	   *
	   * @see './popover.js'
	   */

	  export type PopoverAnchorPosition =
	    | 'upCenter'
	    | 'upLeft'
	    | 'upRight'
	    | 'downCenter'
	    | 'downLeft'
	    | 'downRight'
	    | 'leftCenter'
	    | 'leftUp'
	    | 'leftDown'
	    | 'rightCenter'
	    | 'rightUp'
	    | 'rightDown';

	  interface EuiPopoverProps {
	    id: string;
	    closePopover: NoArgCallback<void>;
	    button: ReactNode;
	    withTitle?: boolean;
	    isOpen?: boolean;
	    ownFocus?: boolean;
	    initialFocus?: FocusTarget;
	    hasArrow?: boolean;
	    anchorClassName?: string;
	    anchorPosition?: PopoverAnchorPosition;
	    panelClassName?: string;
	    panelPaddingSize?: PanelPaddingSize;
	    repositionOnScroll?: boolean;
	  }

	  export const EuiPopover: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiPopoverProps
	  >;

	  /**
	   * Popover title type defs
	   *
	   * @see './popover_title.js'
	   */
	  export const EuiPopoverTitle: EuiPopoverTitleProps;

	  /**
	   * Popover footer type defs
	   *
	   * @see './popover_footer.js'
	   */
	  export const EuiPopoverFooter: EuiPopoverFooterProps;
	}

}
declare module '@elastic/eui' {
	import { FunctionComponent, ReactNode, HTMLAttributes, MouseEventHandler } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type EuiStepStatus = 'complete' | 'incomplete' | 'warning' | 'danger' | 'disabled'

	  /**
	   * @see './step.js'
	   */

	  export interface EuiStepProps {
	    children: ReactNode, // required
	    status?: EuiStepStatus,
	    step: number,
	    title: string,
	    headingElement?: string,
	  }

	  type StandaloneEuiStepProps =
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepProps

	  export const EuiStep: FunctionComponent<StandaloneEuiStepProps>;

	  /**
	   * @see './steps.js'
	   */

	  export type EuiContainedStepProps = Omit<StandaloneEuiStepProps, 'step'>;

	  export interface EuiStepsProps {
	    firstStepNumber?: number,
	    headingElement?: string,
	    steps: Array<EuiContainedStepProps>,
	  }

	  export const EuiSteps: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepsProps
	  >;

	  /**
	   * @see './sub_steps.js'
	   */

	  export interface EuiSubStepsProps {
	  }

	  export const EuiSubSteps: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiSubStepsProps
	  >;

	  /**
	   * @see './steps_horizontal.js'
	   */

	  // EuiStepHorizontal is not exported by EUI
	  type EuiStepHorizontalProp = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    isSelected?: boolean,
	    isComplete?: boolean,
	    onClick: MouseEventHandler<HTMLDivElement>, // required
	    step: number,
	    title: ReactNode,
	    disabled?: boolean,
	    status?: EuiStepStatus,
	  };

	  type ContainedEuiStepHorizontalProps = Omit<EuiStepHorizontalProp, 'step'>;

	  export interface EuiStepsHorizontalProps {
	    steps: Array<ContainedEuiStepHorizontalProps>,
	  }

	  export const EuiStepsHorizontal: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiStepsHorizontalProps
	  >;
	}


}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent } from 'react'; module '@elastic/eui' {
	  /**
	   * table pagination type defs
	   *
	   * @see './table_pagination.js'
	   */

	  export type PageChangeHandler = (pageIndex: number) => void;
	  export type ItemsPerPageChangeHandler = (pageSize: number) => void;

	  export interface EuiTablePaginationProps {
	    activePage?: number;
	    itemsPerPage?: number;
	    itemsPerPageOptions?: number[];
	    onChangeItemsPerPage?: ItemsPerPageChangeHandler;
	    onChangePage?: PageChangeHandler;
	    pageCount?: number;
	  }

	  export const EuiTablePagination: FunctionComponent<EuiTablePaginationProps>;
	}

}
declare module '@elastic/eui/src/components/table/mobile/table_header_mobile' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiTableHeaderMobile: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui' {
	export { EuiTableHeaderMobile } from '@elastic/eui/src/components/table/mobile/table_header_mobile';

}
declare module '@elastic/eui/src/services/alignment' {
	export const LEFT_ALIGNMENT = "left";
	export const RIGHT_ALIGNMENT = "right";
	export const CENTER_ALIGNMENT = "center";
	export type HorizontalAlignment = 'left' | 'right' | 'center';

}
declare module '@elastic/eui' {
	
	
	import { CommonProps, NoArgCallback } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	import { HorizontalAlignment } from '@elastic/eui/src/services/alignment';

	import {
	  FunctionComponent,
	  HTMLAttributes,
	  TableHTMLAttributes,
	  ButtonHTMLAttributes,
	  ThHTMLAttributes,
	  TdHTMLAttributes,
	  ReactNode
	} from 'react'; module '@elastic/eui' {
	  /**
	   * table type defs
	   *
	   * @see './table.js'
	   */

	  export interface EuiTableProps {
	    compressed?: boolean;
	    responsive?: boolean;
	  }

	  export const EuiTable: FunctionComponent<
	    CommonProps & TableHTMLAttributes<HTMLTableElement> & EuiTableProps
	  >;

	  /**
	   * table body type defs
	   *
	   * @see './table_body.js'
	   */

	  export interface EuiTableBodyProps {}

	  export const EuiTableBody: FunctionComponent<CommonProps & EuiTableBodyProps>;

	  /**
	   * table header type defs
	   *
	   * @see './table_header.js'
	   */

	  export interface EuiTableHeaderProps {}

	  export const EuiTableHeader: FunctionComponent<CommonProps & EuiTableHeaderProps>;

	  /**
	   * table header button type defs
	   *
	   * @see './table_header_button.js'
	   */

	  export interface EuiTableHeaderButtonProps {
	    iconType?: IconType;
	  }

	  export const EuiTableHeaderButton: FunctionComponent<
	    CommonProps &
	      ButtonHTMLAttributes<HTMLButtonElement> &
	      EuiTableHeaderButtonProps
	  >;

	  /**
	   * table header cell type defs
	   *
	   * @see './table_header_cell.js'
	   */

	  export type TableHeaderCellScope = 'col' | 'row' | 'colgroup' | 'rowgroup';

	  export interface EuiTableHeaderCellProps {
	    align?: HorizontalAlignment;
	    width?: string;
	    onSort?: NoArgCallback<void>;
	    isSorted?: boolean;
	    isSortAscending?: boolean;
	    scope?: TableHeaderCellScope;
	    isMobileHeader?: boolean;
	    hideForMobile?: boolean;
	    mobileOptions?: {
	      show?: boolean;
	      only?: boolean;
	    };
	  }

	  export const EuiTableHeaderCell: FunctionComponent<
	    CommonProps &
	      ThHTMLAttributes<HTMLTableHeaderCellElement> &
	      EuiTableHeaderCellProps
	  >;

	  /**
	   * table header cell checkbox type defs
	   *
	   * @see './table_header_cell_checkbox.js'
	   */

	  export type EuiTableHeaderCellCheckboxScope =
	    | 'col'
	    | 'row'
	    | 'colgroup'
	    | 'rowgroup';

	  export interface EuiTableHeaderCellCheckboxProps {
	    width?: string;
	    scope?: EuiTableHeaderCellCheckboxScope;
	  }

	  export const EuiTableHeaderCellCheckbox: FunctionComponent<
	    CommonProps &
	      TdHTMLAttributes<HTMLTableCellElement> &
	      EuiTableHeaderCellCheckboxProps
	  >;

	  /**
	   * table row type defs
	   *
	   * @see './table_row.js'
	   */

	  export interface EuiTableRowProps {
	    isSelected?: boolean;
	  }

	  export const EuiTableRow: FunctionComponent<
	    CommonProps & EuiTableRowProps & HTMLAttributes<HTMLTableRowElement>
	  >;

	  /**
	   * table row cell type defs
	   *
	   * @see './table_row_cell.js'
	   */

	  interface EuiTableRowCellSharedPropsShape {
	    align?: HorizontalAlignment;
	    showOnHover?: boolean;
	    textOnly?: boolean;
	    truncateText?: boolean;
	  }

	  export type EuiTableRowCellMobileOptionsShape = {
	    show?: boolean;
	    only?: boolean;
	    render?: ReactNode;
	    header?: ReactNode | boolean;
	    enlarge?: boolean;
	    fullWidth?: boolean;
	  }

	  export interface EuiTableRowCellProps {
	    hasActions?: boolean;
	    header?: string;
	    hideForMobile?: boolean;
	    isExpander?: boolean;
	    isMobileFullWidth?: boolean;
	    isMobileHeader?: boolean;
	    mobileOptions?: EuiTableRowCellMobileOptionsShape & EuiTableRowCellSharedPropsShape;
	  }

	  export const EuiTableRowCell: FunctionComponent<
	    CommonProps & TdHTMLAttributes<HTMLTableCellElement> & EuiTableRowCellSharedPropsShape & EuiTableRowCellProps
	  >;

	  /**
	   * table row cell checkbox type defs
	   *
	   * @see './table_row_cell_checkbox.js'
	   */

	  export interface EuiTableRowCellCheckboxProps {}

	  export const EuiTableRowCellCheckbox: FunctionComponent<
	    CommonProps &
	      TdHTMLAttributes<HTMLTableCellElement> &
	      EuiTableRowCellCheckboxProps
	  >;
	}

}
declare module '@elastic/eui' {
	import {
	  MouseEventHandler,
	  ReactNode,
	  FunctionComponent,
	  HTMLAttributes,
	} from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  type TAB_SIZES = 's' | 'm';

	  type TAB_DISPLAYS = 'default' | 'condensed';

	  type EuiTabProps = {
	    onClick: MouseEventHandler<HTMLButtonElement>;
	    isSelected?: boolean;
	    disabled?: boolean;
	  };

	  type EuiTabsProps = {
	    size?: TAB_SIZES;
	    display?: TAB_DISPLAYS;
	    expand?: boolean;
	  };

	  export interface EuiTabbedContentTab {
	    id: string;
	    name: string;
	    content: ReactNode;
	  }

	  type EuiTabbedContentProps = {
	    tabs: EuiTabbedContentTab[];
	    onTabClick?: (tab: EuiTabbedContentTab) => void;
	    selectedTab?: EuiTabbedContentTab;
	    initialSelectedTab?: EuiTabbedContentTab;
	    size?: TAB_SIZES;
	    display?: TAB_DISPLAYS;
	    expand?: boolean;
	  };

	  export const EuiTab: FunctionComponent<
	    EuiTabProps & CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	  export const EuiTabs: FunctionComponent<
	    EuiTabsProps & CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	  export const EuiTabbedContent: FunctionComponent<
	    EuiTabbedContentProps & CommonProps & HTMLAttributes<HTMLDivElement>
	  >;
	}

}
declare module '@elastic/eui/src/components/toast/global_toast_list_item' {
	import { FunctionComponent, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface EuiGlobalToastListItemProps {
	    isDismissed?: boolean;
	    children?: ReactElement;
	}
	export const EuiGlobalToastListItem: FunctionComponent<CommonProps & EuiGlobalToastListItemProps>;

}
declare module '@elastic/eui' {
	import {
	  EuiGlobalToastListItemProps as ToastListItemProps,
	  EuiGlobalToastListItem as ToastListItem,
	} from '@elastic/eui/src/components/toast/global_toast_list_item';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import {
	  Component,
	  FunctionComponent,
	  HTMLAttributes,
	  ReactChild,
	} from 'react'; module '@elastic/eui' {
	  /**
	   * EuiToast type def
	   *
	   * @see './toast.js'
	   */
	  export interface EuiToastProps
	    extends CommonProps,
	      HTMLAttributes<HTMLDivElement> {
	    title?: string,
	    color?: 'primary' | 'success' | 'warning' | 'danger',
	    iconType?: IconType,
	    onClose?: () => void,
	  }

	  export const EuiToast: FunctionComponent<EuiToastProps>;
	  export interface EuiGlobalToastListItemProps extends ToastListItemProps {}
	  export const EuiGlobalToastListItem: typeof ToastListItem;

	  /**
	   * EuiGlobalToastList type def
	   *
	   * @see './global_toast_list.js'
	   */
	  export interface Toast extends EuiToastProps {
	    id: string;
	    text?: ReactChild;
	    toastLifeTimeMs?: number;
	  }

	  export interface EuiGlobalToastListProps {
	    toasts?: Toast[];
	    dismissToast: (this: EuiGlobalToastList, toast: Toast) => void;
	    toastLifeTimeMs: number;
	  }

	  export class EuiGlobalToastList extends Component<EuiGlobalToastListProps> {
	    scheduleAllToastsForDismissal(): void;
	    scheduleToastForDismissal(toast: Toast): void;
	    dismissToast(toast: Toast): void;
	  }
	}

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip_popover' {
	import { HTMLAttributes, Component, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiToolTipPopoverProps = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    positionToolTip: (rect: ClientRect | DOMRect) => void;
	    children?: ReactNode;
	    title?: ReactNode;
	    popoverRef?: (ref: HTMLDivElement) => void;
	};
	export class EuiToolTipPopover extends Component<EuiToolTipPopoverProps> {
	    private popover;
	    updateDimensions: () => void;
	    setPopoverRef: (ref: HTMLDivElement) => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui' {
	export { EuiToolTipPopover } from '@elastic/eui/src/components/tool_tip/tool_tip_popover';
	import { ReactElement, ReactNode, FunctionComponent } from 'react';
	import { EuiIcon, IconType } from '@elastic/eui';
	import { Omit, PropsOf } from '@elastic/eui/src/components/common'; module '@elastic/eui' {
	  export type ToolTipPositions =
	    | 'top'
	    | 'right'
	    | 'bottom'
	    | 'left';

	  export type ToolTipDelay =
	    | 'regular'
	    | 'long';

	  export interface EuiToolTipProps {
	    anchorClassName?: string;
	    children: ReactElement<any>;
	    className?: string;
	    content?: ReactNode;
	    delay?: ToolTipDelay;
	    title?: ReactNode;
	    id?: string;
	    position?: ToolTipPositions;
	  }
	  export const EuiToolTip: FunctionComponent<EuiToolTipProps>;

	  export interface EuiIconTipProps {
	    color?: string;
	    type?: IconType;
	    size?: string;
	    'aria-label'?: string;

	    // EuiIconTip's `type` is passed to EuiIcon, so we want to exclude `type` from
	    // iconProps; however, due to TS's bivariant function arguments `type` could be
	    // passed without any error/feedback so we explicitly set it to `never` type
	    iconProps?: Omit<PropsOf<EuiIcon>, 'type'> & { type?: never };
	  }

	  export const EuiIconTip: FunctionComponent<Omit<EuiToolTipProps, 'children'> & EuiIconTipProps>;
	}

}

































declare module '@elastic/eui' {
  // @ts-ignore
  export * from '@elastic/eui/src/components/common';
}
declare module "@elastic/eui/dist/eui_theme_*.json" {
    const value: any;
    export default value;
}


declare module '@elastic/eui/src/services/key_codes' {
	export const ENTER = 13;
	export const SPACE = 32;
	export const ESCAPE = 27;
	export const TAB = 9;
	export const BACKSPACE = 8;
	export const DOWN = 40;
	export const UP = 38;
	export const LEFT = 37;
	export const RIGHT = 39;
	export enum keyCodes {
	    ENTER = 13,
	    SPACE = 32,
	    ESCAPE = 27,
	    TAB = 9,
	    BACKSPACE = 8,
	    DOWN = 40,
	    UP = 38,
	    LEFT = 37,
	    RIGHT = 39
	}

}
declare module '@elastic/eui/src/services/accessibility/accessible_click_keys' {
	import { ENTER, SPACE } from '@elastic/eui/src/services/key_codes';
	export const accessibleClickKeys: {
	    [ENTER]: string;
	    [SPACE]: string;
	};

}
declare module '@elastic/eui/src/services/accessibility/cascading_menu_key_codes' {
	/**
	 * These keys are used for navigating cascading menu UI components.
	 *
	 * UP: Select the previous item in the list.
	 * DOWN: Select the next item in the list.
	 * LEFT: Show the previous menu.
	 * RIGHT: Show the next menu for the selected item.
	 * ESC: Deselect the current selection and hide the list.
	 * TAB: Normal tabbing navigation is still supported.
	 */
	export const cascadingMenuKeyCodes: {
	    DOWN: number;
	    ESCAPE: number;
	    LEFT: number;
	    RIGHT: number;
	    UP: number;
	    TAB: number;
	};

}
declare module '@elastic/eui/src/services/accessibility/combo_box_key_codes' {
	/**
	 * These keys are used for navigating combobox UI components.
	 *
	 * UP: Select the previous item in the list.
	 * DOWN: Select the next item in the list.
	 * ENTER / TAB: Complete input with the current selection.
	 * ESC: Deselect the current selection and hide the list.
	 */
	export const comboBoxKeyCodes: {
	    DOWN: number;
	    ENTER: number;
	    ESCAPE: number;
	    TAB: number;
	    UP: number;
	};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator' {
	/**
	 * This function returns a function to generate ids.
	 * This can be used to generate unique, but predictable ids to pair labels
	 * with their inputs. It takes an optional prefix as a parameter. If you don't
	 * specify it, it generates a random id prefix. If you specify a custom prefix
	 * it should begin with an letter to be HTML4 compliant.
	 */
	export function htmlIdGenerator(idPrefix?: string): (suffix?: string | undefined) => string;

}
declare module '@elastic/eui/src/services/accessibility' {
	export { accessibleClickKeys } from '@elastic/eui/src/services/accessibility/accessible_click_keys';
	export { cascadingMenuKeyCodes } from '@elastic/eui/src/services/accessibility/cascading_menu_key_codes';
	export { comboBoxKeyCodes } from '@elastic/eui/src/services/accessibility/combo_box_key_codes';
	export { htmlIdGenerator } from '@elastic/eui/src/services/accessibility/html_id_generator';

}
declare module '@elastic/eui/src/services/color/is_color_dark' {
	/**
	 * This function calculates if the specified color is "dark", which usually means
	 * you need light text if you use it as a background color to fulfill WCAG contrast
	 * requirement.
	 * The color must be specified via its red, green and blue value in the range of
	 * 0 to 255.
	 * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023
	 * which itself is based upon the WCAG recommendation for color contrast.
	 *
	 * @param {number} red The red component in the range 0 to 255
	 * @param {number} green The green component in the range 0 to 255
	 * @param {number} blue The blue component in the range 0 to 255
	 * @returns {boolean} True if the color is dark, false otherwise.
	 */
	export function isColorDark(red: number, green: number, blue: number): boolean;

}
declare module '@elastic/eui/src/services/color/color_types' {
	export type rgbDef = [number, number, number];

}
declare module '@elastic/eui/src/services/color/hex_to_rgb' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function hexToRgb(hex: string): rgbDef;

}
declare module '@elastic/eui/src/services/color/rgb_to_hex' {
	export function rgbToHex(rgb: string): string;

}
declare module '@elastic/eui/src/services/color/luminance_and_contrast' {
	import { rgbDef } from '@elastic/eui/src/services/color/color_types';
	export function calculateLuminance(r: number, g: number, b: number): number;
	export function calculateContrast(rgb1: rgbDef, rgb2: rgbDef): number;

}
declare module '@elastic/eui/src/services/color/visualization_colors' {
	export const VISUALIZATION_COLORS: string[];
	export const DEFAULT_VISUALIZATION_COLOR: string;

}
declare module '@elastic/eui/src/services/color/color_palette' {
	/**
	 * This function takes a color palette name and returns an array of hex color
	 * codes for use in UI elements such as charts.
	 *
	 * @param {string} hexStart The beginning hexadecimal color code
	 * @param {string} hexEnd The ending hexadecimal color code
	 * @param {number} len The number of colors in the resulting array (default 10)
	 * @returns {Array} Returns an array of hexadecimal color codes
	 */
	export function colorPalette(hexStart: string, hexEnd: string, len?: number): string[];

}
declare module '@elastic/eui/src/services/color/eui_palettes' {
	interface EuiPalette {
	    colors: string[];
	}
	export const palettes: {
	    euiPaletteColorBlind: EuiPalette;
	    euiPaletteForLightBackground: EuiPalette;
	    euiPaletteForDarkBackground: EuiPalette;
	    euiPaletteForStatus: EuiPalette;
	};
	export {};

}
declare module '@elastic/eui/src/services/color' {
	export { isColorDark } from '@elastic/eui/src/services/color/is_color_dark';
	export { hexToRgb } from '@elastic/eui/src/services/color/hex_to_rgb';
	export { rgbToHex } from '@elastic/eui/src/services/color/rgb_to_hex';
	export { calculateContrast, calculateLuminance, } from '@elastic/eui/src/services/color/luminance_and_contrast';
	export { VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, } from '@elastic/eui/src/services/color/visualization_colors';
	export { colorPalette } from '@elastic/eui/src/services/color/color_palette';
	export { palettes } from '@elastic/eui/src/services/color/eui_palettes';
	export { rgbDef } from '@elastic/eui/src/services/color/color_types';

}
declare module '@elastic/eui/src/services/copy_to_clipboard' {
	export function copyToClipboard(text: string): boolean;

}
declare module '@elastic/eui/src/services/predicate/common_predicates' {
	export const always: (value?: any) => boolean;
	export const never: (value?: any) => boolean;
	export const isUndefined: (value: any) => value is undefined;
	export const isNull: (value: any) => value is null;
	export const isNil: (value: any) => value is null | undefined;
	export const isMoment: (value: any) => boolean;
	export const isDate: (value: any) => value is Date;
	export const isDateLike: (value: any) => boolean;

}
declare module '@elastic/eui/src/services/predicate/lodash_predicates' {
	export const isFunction: (value: any) => value is (...args: any[]) => any;
	export const isArray: (value: any) => value is any[];
	export const isString: (value: any) => value is string;
	export const isBoolean: (value: any) => value is boolean;
	export const isNumber: (value: any) => value is number;
	export const isNaN: (value: any) => boolean;

}
declare module '@elastic/eui/src/services/predicate' {
	export * from '@elastic/eui/src/services/predicate/common_predicates';
	export * from '@elastic/eui/src/services/predicate/lodash_predicates';

}
declare module '@elastic/eui/src/services/format/format_boolean' {
	export const formatBoolean: (value: boolean, { yes, no, nil }?: {
	    yes?: string | undefined;
	    no?: string | undefined;
	    nil?: string | undefined;
	}) => string;

}
declare module '@elastic/eui/src/services/format/format_date' {
	
	import moment, { CalendarSpec, MomentInput } from 'moment'; type CalendarOptions = CalendarSpec & {
	    refTime?: MomentInput;
	};
	export const dateFormatAliases: {
	    date: string;
	    longDate: string;
	    shortDate: string;
	    dateTime: string;
	    longDateTime: string;
	    shortDateTime: string;
	    dobShort: string;
	    dobLong: string;
	    iso8601: string;
	    calendar: (value: moment.MomentInput, options?: CalendarOptions) => string;
	    calendarDateTime: (value: moment.MomentInput, options: moment.CalendarSpec) => string;
	    calendarDate: (value: moment.MomentInput, options: moment.CalendarSpec) => string;
	}; type DateFormat = keyof typeof dateFormatAliases;
	interface FormatDateConfig {
	    format: DateFormat;
	    nil: string;
	    options: any;
	}
	export const formatDate: (value?: string | number | void | Date | moment.Moment | import("react").ReactText[] | moment.MomentInputObject | undefined, dateFormatKeyOrConfig?: string | Partial<FormatDateConfig>) => any;
	export {};

}
declare module '@elastic/eui/src/services/format/format_number' {
	interface FormatNumberConfig {
	    format: string;
	    nil: string;
	    round: boolean;
	}
	export const formatNumber: (value?: number | null | undefined, numberFormatOrConfig?: string | Partial<FormatNumberConfig>) => string;
	export {};

}
declare module '@elastic/eui/src/services/format/format_text' {
	interface FormatTextOptions {
	    nil: string;
	}
	export const formatText: (value?: any, options?: Partial<FormatTextOptions>) => any;
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto' {
	export const formatAuto: (value: any) => string;

}
declare module '@elastic/eui/src/services/format' {
	export { formatAuto } from '@elastic/eui/src/services/format/format_auto';
	export { formatBoolean } from '@elastic/eui/src/services/format/format_boolean';
	export { formatDate, dateFormatAliases } from '@elastic/eui/src/services/format/format_date';
	export { formatNumber } from '@elastic/eui/src/services/format/format_number';
	export { formatText } from '@elastic/eui/src/services/format/format_text';

}
declare module '@elastic/eui/src/services/number/number' {
	
	export const isWithinRange: (min: import("react").ReactText, max: import("react").ReactText, value: import("react").ReactText) => boolean;
	export function isEvenlyDivisibleBy(num: number, factor: number): boolean;

}
declare module '@elastic/eui/src/services/number' {
	export * from '@elastic/eui/src/services/number/number';

}
declare module '@elastic/eui/src/services/paging/pager' {
	export class Pager {
	    currentPageIndex: number;
	    firstItemIndex: number;
	    itemsPerPage: number;
	    lastItemIndex: number;
	    totalItems: number;
	    totalPages: number;
	    constructor(totalItems: number, itemsPerPage: number, initialPageIndex?: number);
	    setTotalItems: (totalItems: number) => void;
	    setItemsPerPage: (itemsPerPage: number) => void;
	    isPageable: () => boolean;
	    getTotalPages: () => number;
	    getCurrentPageIndex: () => number;
	    getFirstItemIndex: () => number;
	    getLastItemIndex: () => number;
	    hasNextPage: () => boolean;
	    hasPreviousPage: () => boolean;
	    goToNextPage: () => void;
	    goToPreviousPage: () => void;
	    goToPageIndex: (pageIndex: number) => void;
	    update: () => void;
	}

}
declare module '@elastic/eui/src/services/paging' {
	export { Pager } from '@elastic/eui/src/services/paging/pager';

}
declare module '@elastic/eui/src/services/utils' {
	export function times<T>(count: number): number[];
	export function times<T>(count: number, iteratee: (index: number) => T): T[];
	export function memoize<T extends (...args: any[]) => any>(func: T, resolver?: (...args: any[]) => any): (...args: Parameters<T>) => ReturnType<T>;
	export const browserTick: (callback: FrameRequestCallback) => void;

}
declare module '@elastic/eui/src/services/random' {
	import moment from 'moment';
	export class Random {
	    private readonly rand;
	    constructor(rand?: () => number);
	    boolean: () => boolean;
	    number: (options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => number;
	    integer: (options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => number;
	    oneOf: <T>(values: T[]) => T;
	    oneToOne: <T>(values: T[], index: number) => T;
	    setOf: <T>(values: T[], options?: {
	        min?: number | undefined;
	        max?: number | undefined;
	    }) => T[];
	    date: (options?: {
	        min?: Date | undefined;
	        max?: Date | undefined;
	    }) => Date;
	    moment: (options?: {
	        min?: moment.Moment | undefined;
	        max?: moment.Moment | undefined;
	    }) => moment.Moment;
	}

}
declare module '@elastic/eui/src/services/url' {
	export const isDomainSecure: (url?: string) => boolean;

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target' {
	export const getSecureRelForTarget: ({ href, target, rel, }: {
	    href?: string | undefined;
	    target?: string | undefined;
	    rel?: string | undefined;
	}) => string | undefined;

}
declare module '@elastic/eui/src/services/security' {
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security/get_secure_rel_for_target';

}
declare module '@elastic/eui/src/services/string/to_initials' {
	/**
	 * This function calculates the initials/acronym for a given name.
	 * It defaults to only 2 characters and will take the first character (of each word).
	 * If only one word is supplied for the name, it will only pass back the first letter of the word,
	 * unless forced to 2 letters by setting `initialsLength` to `2`.
	 * It will pass back the characters with the same casing as the original string
	 * unless otherwise specified.
	 *
	 * @param {string} name The full name of the item to turn into initials
	 * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)
	 * @param {string} initials (Optional) Custom initials (max 2 characters)
	 * @returns {string} True if the color is dark, false otherwise.
	 */
	export const MAX_INITIALS: number;
	export function toInitials(name: string, initialsLength?: 1 | 2, initials?: string): string | null;

}
declare module '@elastic/eui/src/services/string' {
	export { toInitials } from '@elastic/eui/src/services/string/to_initials';

}
declare module '@elastic/eui/src/services/sort/sort_direction' {
	import PropTypes from 'prop-types'; const ASC: 'asc'; const DESC: 'desc';
	export type Direction = typeof ASC | typeof DESC;
	export const SortDirection: Readonly<{
	    ASC: "asc";
	    DESC: "desc";
	    isAsc(direction: Direction): boolean;
	    reverse(direction: Direction): Direction;
	}>;
	export const SortDirectionType: PropTypes.Requireable<Direction>;
	export {};

}
declare module '@elastic/eui/src/services/objects' {
	export const get: (object: {}, path: string | string[], defaultValue?: any) => any;
	export const omit: (object: {} | null | undefined, paths: string[]) => {};

}
declare module '@elastic/eui/src/services/sort/comparators' {
	export type Primitive = string | boolean | number | null | undefined; type Comparator<T = Primitive> = (a: T, b: T) => number;
	export const Comparators: Readonly<{
	    default: (direction?: import ("@elastic/eui/src/services/sort/sort_direction").Direction) => (v1: Primitive, v2: Primitive) => number;
	    reverse: <T>(comparator: Comparator<T>) => Comparator<T>;
	    value<T>(valueCallback: (value: T) => Primitive, comparator?: Comparator<Primitive> | undefined): Comparator<T>;
	    property<T>(prop: string, comparator?: Comparator<Primitive> | undefined): Comparator<T>;
	}>;
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties' {
	import { Primitive } from '@elastic/eui/src/services/sort/comparators';
	export interface SortableProperty<T> {
	    name: string;
	    getValue: (obj: T) => Primitive;
	    isAscending: boolean;
	}
	/**
	 * @typedef {Object} SortableProperty
	 * @property {string} sortableProperty.name - Name of the property.
	 * @property {function} sortableProperty.getValue - A function that takes in an object and returns a value to sort
	 * by.
	 * @property {boolean} sortableProperty.isAscending - The direction of the last sort by this property. Used to preserve
	 * past sort orders.
	 */
	/**
	 * Stores sort information for a set of SortableProperties, including which property is currently being sorted on, as
	 * well as the last sort order for each property.
	 */
	export class SortableProperties<T> {
	    sortableProperties: Array<SortableProperty<T>>;
	    currentSortedProperty: SortableProperty<T>;
	    /**
	     * @param {Array<SortableProperty>} sortableProperties - a set of sortable properties.
	     * @param {string} initialSortablePropertyName - Which sort property should be sorted on by default.
	     */
	    constructor(sortableProperties: Array<SortableProperty<T>>, initialSortablePropertyName: string);
	    /**
	     * @returns {SortableProperty} The current property that is being sorted on. Undefined if no sort order is applied.
	     */
	    getSortedProperty(): SortableProperty<T>;
	    /**
	     * Sorts the items passed in and returns a newly sorted array.
	     * @param items {Array.<Object>}
	     * @returns {Array.<Object>} sorted array of items, based off the sort properties.
	     */
	    sortItems(items: T[]): T[];
	    /**
	     * Returns the SortProperty with the given name, if found.
	     * @param {String} propertyName
	     * @returns {SortableProperty|undefined}
	     */
	    getSortablePropertyByName(propertyName: string): SortableProperty<T> | undefined;
	    /**
	     * Updates the sort property, potentially flipping the sort order based on whether the same
	     * property was already being sorted.
	     * @param propertyName {String}
	     */
	    sortOn(propertyName: string): void;
	    /**
	     * @returns {boolean} True if the current sortable property is sorted in ascending order.
	     */
	    isCurrentSortAscending(): boolean;
	    /**
	     * @param {string} propertyName
	     * @returns {boolean} True if the given sort property is sorted in ascending order.
	     */
	    isAscendingByName(propertyName: string): boolean;
	    /**
	     * Flips the current sorted property sort order.
	     */
	    flipCurrentSortOrder(): void;
	}

}
declare module '@elastic/eui/src/services/sort/property_sort' {
	import PropTypes from 'prop-types';
	export const PropertySortType: PropTypes.Requireable<PropTypes.InferProps<{
	    field: PropTypes.Validator<string>;
	    direction: PropTypes.Validator<import ("@elastic/eui/src/services/sort/sort_direction").Direction>;
	}>>;

}
declare module '@elastic/eui/src/services/sort' {
	export { SortableProperties } from '@elastic/eui/src/services/sort/sortable_properties';
	export { SortDirectionType, SortDirection } from '@elastic/eui/src/services/sort/sort_direction';
	export { PropertySortType } from '@elastic/eui/src/services/sort/property_sort';
	export { Comparators } from '@elastic/eui/src/services/sort/comparators';

}
declare module '@elastic/eui/src/services/popover/types' {
	export type EuiPopoverPosition = 'top' | 'right' | 'bottom' | 'left';

}
declare module '@elastic/eui/src/services/popover/calculate_popover_position' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	interface EuiPopoverBoundingBox {
	    top: number;
	    left: number;
	    width: number;
	    height: number;
	}
	interface EuiPopoverAnchorRect extends EuiPopoverBoundingBox {
	    right: number;
	    bottom: number;
	}
	interface EuiPopoverDimensions {
	    width: number;
	    height: number;
	}
	interface EuiPopoverPositionedBox extends EuiPopoverBoundingBox {
	    position: EuiPopoverPosition;
	}
	/**
	 * Determine the best position for a popover that avoids clipping by the window view port.
	 *
	 * @param {Object} anchorBounds - getBoundingClientRect() of the node the popover is tethered to (e.g. a button).
	 * @param {Object} popoverBounds - getBoundingClientRect() of the popover node (e.g. the tooltip).
	 * @param {string} requestedPosition - Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param {number} buffer - The space between the wrapper and the popover. Also the minimum space between the
	 * popover and the window.
	 * @param {Array} positions - List of acceptable positions. Defaults to ["top", "right", "bottom", "left"].
	 *
	 * @returns {Object} With properties position (one of ["top", "right", "bottom", "left"]), left, top, width, and height.
	 */
	export function calculatePopoverPosition(anchorBounds: EuiPopoverAnchorRect, popoverBounds: EuiPopoverDimensions, requestedPosition: EuiPopoverPosition, buffer?: number, positions?: EuiPopoverPosition[]): EuiPopoverPositionedBox;
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning' {
	import { EuiPopoverPosition } from '@elastic/eui/src/services/popover/types';
	export const POSITIONS: EuiPopoverPosition[];
	interface BoundingBox {
	    [position: string]: number;
	    top: number;
	    right: number;
	    bottom: number;
	    left: number;
	}
	export interface EuiClientRect extends BoundingBox {
	    height: number;
	    width: number;
	}
	interface FindPopoverPositionArgs {
	    anchor: HTMLElement;
	    popover: HTMLElement;
	    align?: EuiPopoverPosition;
	    position: EuiPopoverPosition;
	    forcePosition?: boolean;
	    buffer?: number;
	    offset?: number;
	    allowCrossAxis?: boolean;
	    container?: HTMLElement;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	}
	/**
	 * Calculates the absolute positioning (relative to document.body) to place a popover element
	 *
	 * @param anchor {HTMLElement} Element to anchor the popover to
	 * @param popover {HTMLElement} Element containing the popover content
	 * @param position {string} Position the user wants. One of ["top", "right", "bottom", "left"]
	 * @param [forcePosition] {boolean} If true, use only the provided `position` value and don't try any other position
	 * @param [align] {string} Cross-axis alignment. One of ["top", "right", "bottom", "left"]
	 * @param [buffer=16] {number} Minimum distance between the popover and the bounding container
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [allowCrossAxis=true] {boolean} Whether to allow the popover to be positioned on the cross-axis
	 * @param [container] {HTMLElement} Element the popover must be constrained to fit within
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If
	 *  present, describes the size & constraints for an arrow element, and the
	 *  function return value will include an `arrow` param with position details
	 *
	 * @returns {{
	 *   top: number,
	 *   left: number,
	 *   position: string,
	 *   fit: number,
	 *   arrow?: {left: number, top: number}
	 * } | null} absolute page coordinates for the popover, and the
	 *  placements's relation to the anchor; if there's no room this returns null
	 */
	export function findPopoverPosition({ anchor, popover, align, position, forcePosition, buffer, offset, allowCrossAxis, container, arrowConfig, }: FindPopoverPositionArgs): {
	    fit: number;
	    position: EuiPopoverPosition;
	    top: number;
	    left: number;
	    arrow: {
	        [x: string]: number | undefined;
	    } | undefined;
	} | null;
	interface GetPopoverScreenCoordinatesArgs {
	    position: EuiPopoverPosition;
	    align?: EuiPopoverPosition;
	    anchorBoundingBox: EuiClientRect;
	    popoverBoundingBox: EuiClientRect;
	    windowBoundingBox: EuiClientRect;
	    containerBoundingBox: EuiClientRect;
	    arrowConfig?: {
	        arrowWidth: number;
	        arrowBuffer: number;
	    };
	    offset?: number;
	    buffer?: number;
	}
	/**
	 * Given a target position and the popover's surrounding context, returns either an
	 * object with {top, left} screen coordinates or `null` if it's not possible to show
	 * content in the target position
	 * @param position {string} the target position, one of ["top", "right", "bottom", "left"]
	 * @param align {string} target alignment on the cross-axis, one of ["top", "right", "bottom", "left"]
	 * @param anchorBoundingBox {Object} bounding box of the anchor element
	 * @param popoverBoundingBox {Object} bounding box of the popover element
	 * @param windowBoundingBox {Object} bounding box of the window
	 * @param containerBoundingBox {Object} bounding box of the container
	 * @param [arrowConfig] {{arrowWidth: number, arrowBuffer: number}} If present, describes the size &
	 *  constraints for an arrow element, and the function return value will include an `arrow` param
	 *  with position details
	 * @param [offset=0] {number} Distance between the popover and the anchor
	 * @param [buffer=0] {number} Minimum distance between the popover's
	 *  placement and the container edge
	 *
	 * @returns {{top: number, left: number, relativePlacement: string, fit:
	 * number, arrow?: {top: number, left: number}}|null}
	 *  object with top/left coordinates, the popover's relative position to the anchor, and how well the
	 *  popover fits in the location (0.0 -> 1.0) oordinates and the popover's relative position, if
	 *  there is no room in this placement then null
	 */
	export function getPopoverScreenCoordinates({ position, align, anchorBoundingBox, popoverBoundingBox, windowBoundingBox, containerBoundingBox, arrowConfig, offset, buffer, }: GetPopoverScreenCoordinatesArgs): {
	    fit: number;
	    top: number;
	    left: number;
	    arrow: {
	        [x: string]: number | undefined;
	    } | undefined;
	};
	/**
	 * Finds the client pixel coordinate of each edge for the element's bounding box,
	 * and the bounding box's width & height
	 *
	 * @param {HTMLElement} element
	 * @returns {{top: number, right: number, bottom: number, left: number, height: number, width: number}}
	 */
	export function getElementBoundingBox(element: HTMLElement): EuiClientRect;
	/**
	 * Calculates the available content space between anchor and container
	 *
	 * @param {Object} anchorBoundingBox Client bounding box of the anchor element
	 * @param {Object} containerBoundingBox Client bounding box of the container element
	 * @param {number} buffer Minimum distance between the popover and the bounding container
	 * @param {number} offset Distance between the popover and the anchor
	 * @param {string} offsetSide Side the offset needs to be applied to, one
	 *  of ["top", "right", "bottom", "left"]
	 * @returns {{top: number, right: number, bottom: number, left: number}}
	 */
	export function getAvailableSpace(anchorBoundingBox: BoundingBox, containerBoundingBox: BoundingBox, buffer: number, offset: number, offsetSide: EuiPopoverPosition): BoundingBox;
	/**
	 * Computes the fit (overlap) of the content within the container, fit is in range 0.0 => 1.0
	 * @param contentBoundingBox bounding box of content to calculate fit for
	 * @param containerBoundingBox bounding box of container
	 * @returns {number}
	 */
	export function getVisibleFit(contentBoundingBox: BoundingBox, containerBoundingBox: BoundingBox): number;
	/**
	 * Calculates the intersection space between two bounding boxes
	 *
	 * @param firstBox
	 * @param secondBox
	 * @returns {EuiClientRect}
	 */
	export function intersectBoundingBoxes(firstBox: BoundingBox, secondBox: BoundingBox): EuiClientRect;
	/**
	 * Returns the top-most defined z-index in the element's ancestor hierarchy
	 * relative to the `target` element; if no z-index is defined, returns "0"
	 * @param element {HTMLElement}
	 * @param cousin {HTMLElement}
	 * @returns {string}
	 */
	export function getElementZIndex(element: HTMLElement, cousin: HTMLElement): string;
	export {};

}
declare module '@elastic/eui/src/services/popover' {
	export { calculatePopoverPosition } from '@elastic/eui/src/services/popover/calculate_popover_position';
	export { findPopoverPosition } from '@elastic/eui/src/services/popover/popover_positioning';

}
declare module '@elastic/eui/src/services/window_event/window_event' {
	import { Component } from 'react'; type EventNames = keyof WindowEventMap;
	interface Props<Ev extends EventNames> {
	    event: Ev;
	    handler: (this: Window, ev: WindowEventMap[Ev]) => any;
	}
	export class EuiWindowEvent<E extends EventNames> extends Component<Props<E>> {
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: Props<E>): void;
	    componentWillUnmount(): void;
	    addEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    removeEvent<Ev extends EventNames>({ event, handler }: Props<Ev>): void;
	    render(): null;
	}
	export {};

}
declare module '@elastic/eui/src/services/window_event' {
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event/window_event';

}
declare module '@elastic/eui' {
	import * as keyCodes from '@elastic/eui/src/services/key_codes';
	export { keyCodes };
	export { accessibleClickKeys, cascadingMenuKeyCodes, comboBoxKeyCodes, htmlIdGenerator, } from '@elastic/eui/src/services/accessibility';
	export { LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT } from '@elastic/eui/src/services/alignment';
	export { isColorDark, calculateContrast, calculateLuminance, hexToRgb, rgbToHex, VISUALIZATION_COLORS, DEFAULT_VISUALIZATION_COLOR, colorPalette, palettes, } from '@elastic/eui/src/services/color';
	export { copyToClipboard } from '@elastic/eui/src/services/copy_to_clipboard';
	export { formatAuto, formatBoolean, formatDate, formatNumber, formatText, } from '@elastic/eui/src/services/format';
	export { isEvenlyDivisibleBy, isWithinRange } from '@elastic/eui/src/services/number';
	export { Pager } from '@elastic/eui/src/services/paging';
	export { Random } from '@elastic/eui/src/services/random';
	export { getSecureRelForTarget } from '@elastic/eui/src/services/security';
	export { toInitials } from '@elastic/eui/src/services/string';
	export { PropertySortType, SortDirectionType, SortDirection, SortableProperties, Comparators, } from '@elastic/eui/src/services/sort';
	export { calculatePopoverPosition, findPopoverPosition } from '@elastic/eui/src/services/popover';
	export { EuiWindowEvent } from '@elastic/eui/src/services/window_event';

}
declare module '@elastic/eui/src/components/accessibility/keyboard_accessible' {
	/**
	 * Interactive elements must be able to receive focus.
	 *
	 * Ideally, this means using elements that are natively keyboard accessible (<a href="">,
	 * <input type="button">, or <button>). Note that links should be used when navigating and buttons
	 * should be used when performing an action on the page.
	 *
	 * If, however, you need to use elements that aren't natively keyboard accessible (for example, <div>,
	 * <p>, or <a> without the href attribute), then you need to allow them to receive focus and to
	 * respond to keyboard input. The workaround is to:
	 *
	 *   - Give the element tabindex="0" so that it can receive keyboard focus.
	 *   - Add a JavaScript onkeyup event handler that triggers element functionality if the Enter key
	 *     is pressed while the element is focused. This is necessary because some browsers do not trigger
	 *    onclick events for such elements when activated via the keyboard.
	 *   - If the item is meant to function as a button, the onkeyup event handler should also detect the
	 *     Spacebar in addition to the Enter key, and the element should be given role="button".
	 *
	 * Wrap any such elements that aren't natively keyboard accessible in this component to automatically
	 * apply the above workaround to them.
	 */
	import { Component, KeyboardEvent, ReactElement } from 'react';
	interface Props {
	    children: ReactElement<any>;
	}
	export class EuiKeyboardAccessible extends Component<Props> {
	    onKeyDown: (e: KeyboardEvent<any>) => void;
	    onKeyUp: (e: KeyboardEvent<any>) => void;
	    applyKeyboardAccessibility: (child: ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>) => ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	}
	export {};

}
declare module '@elastic/eui/src/components/accessibility/screen_reader' {
	import { ReactElement, FunctionComponent } from 'react';
	export interface EuiScreenReaderOnlyProps {
	    children: ReactElement<any>;
	}
	export const EuiScreenReaderOnly: FunctionComponent<EuiScreenReaderOnlyProps>;

}
declare module '@elastic/eui' {
	export { EuiKeyboardAccessible } from '@elastic/eui/src/components/accessibility/keyboard_accessible';
	export { EuiScreenReaderOnly } from '@elastic/eui/src/components/accessibility/screen_reader';

}
declare module '@elastic/eui/src/components/accessibility/keyboard_accessible.test' {
	export {};

}
declare module '@elastic/eui/src/components/accessibility/screen_reader.test' {
	export {};

}
declare module '@elastic/eui/src/test/required_props' {
	export const requiredProps: {
	    'aria-label': string;
	    className: string;
	    'data-test-subj': string;
	};

}
declare module '@elastic/eui/src/components/avatar/avatar' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl" | "none")[];
	export type EuiAvatarSize = keyof typeof sizeToClassNameMap; const typeToClassNameMap: {
	    space: string;
	    user: string;
	};
	export const TYPES: ("user" | "space")[];
	export type EuiAvatarType = keyof typeof typeToClassNameMap;
	export type EuiAvatarProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * Full name of avatar for title attribute and calculating initial if not provided
	     */
	    name: string;
	    /**
	     * Accepts hex value `#FFFFFF`, `#000` otherwise a viz palette color will be assigned
	     */
	    color?: string;
	    /**
	     * Custom initials (max 2 characters).
	     * By default will take the first character (of each word).
	     */
	    initials?: string;
	    /**
	     * Specify how many characters to show (max 2 allowed).
	     * By default, will show based on number of words.
	     */
	    initialsLength?: 1 | 2;
	    /**
	     * The type of avatar this is displaying
	     */
	    type?: EuiAvatarType;
	    imageUrl?: string;
	    size?: EuiAvatarSize;
	};
	export const EuiAvatar: FunctionComponent<EuiAvatarProps>;
	export {};

}
declare module '@elastic/eui/src/components/avatar/avatar.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiAvatar } from '@elastic/eui/src/components/avatar/avatar';

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const colorToClassMap: {
	    [color: string]: string | null;
	};
	export const COLORS: BadgeNotificationColor[];
	export type BadgeNotificationColor = keyof typeof colorToClassMap; const sizeToClassNameMap: {
	    s: null;
	    m: string;
	};
	export const SIZES: BadgeNotificationSize[];
	export type BadgeNotificationSize = keyof typeof sizeToClassNameMap;
	export interface EuiNotificationBadgeProps extends CommonProps, Omit<HTMLAttributes<HTMLSpanElement>, 'color'> {
	    children: ReactNode;
	    size?: BadgeNotificationSize;
	    color?: BadgeNotificationColor;
	}
	export const EuiNotificationBadge: FunctionComponent<EuiNotificationBadgeProps>;
	export {};

}
declare module '@elastic/eui/src/components/badge/notification_badge/badge_notification.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiNotificationBadge } from '@elastic/eui/src/components/badge/notification_badge/badge_notification';

}
declare module '@elastic/eui/src/components/card/card_graphic.test' {
	export {};

}
declare module '@elastic/eui/src/components/color_picker/color_picker_empty_swatch' {
	import { FunctionComponent } from 'react';
	export const EuiColorPickerEmptySwatch: FunctionComponent<{}>;

}
declare module '@elastic/eui/src/components/color_picker/color_picker_swatch' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	export interface EuiColorPickerSwatchProps extends HTMLAttributes<HTMLDivElement> {
	    color?: string;
	}
	export const EuiColorPickerSwatch: FunctionComponent<EuiColorPickerSwatchProps>;

}
declare module '@elastic/eui/src/components/combo_box/matching_options' {
	import { EuiComboBoxOptionProps } from '@elastic/eui';
	export const flattenOptionGroups: (optionsOrGroups: EuiComboBoxOptionProps[]) => EuiComboBoxOptionProps[];
	export const getSelectedOptionForSearchValue: (searchValue: string, selectedOptions: EuiComboBoxOptionProps[]) => EuiComboBoxOptionProps | undefined;
	export const getMatchingOptions: (options: EuiComboBoxOptionProps[], selectedOptions: EuiComboBoxOptionProps[], searchValue: string, isPreFiltered: boolean, showPrevSelected: boolean) => EuiComboBoxOptionProps[];

}
declare module '@elastic/eui/src/components/combo_box/matching_options.test' {
	export {};

}
declare module '@elastic/eui/src/components/combo_box/combo_box_options_list/combo_box_title' {
	import { FunctionComponent } from 'react';
	export const EuiComboBoxTitle: FunctionComponent<{}>;

}
declare module '@elastic/eui/src/components/context/context' {
	import React, { ReactChild } from 'react';
	export interface RenderableValues {
	    [key: string]: ReactChild;
	}
	export type Renderable<T> = ReactChild | ((values: T) => ReactChild);
	export interface I18nShape {
	    mapping?: {
	        [key: string]: Renderable<object>;
	    };
	    mappingFunc?: (value: string) => string;
	    formatNumber?: (x: number) => string;
	    formatDateTime?: (x: Date) => string;
	} const EuiI18nConsumer: React.ExoticComponent<React.ConsumerProps<I18nShape>>;
	interface IEuiContextProps {
	    i18n: I18nShape;
	    children: React.ReactNode;
	} const EuiContext: React.FunctionComponent<IEuiContextProps>;
	export { EuiContext, EuiI18nConsumer };

}
declare module '@elastic/eui' {
	export { EuiContext, EuiI18nConsumer } from '@elastic/eui/src/components/context/context';

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide' {
	import { Component, ReactNode } from 'react';
	export interface EuiDelayHideProps {
	    hide: boolean;
	    minimumDuration: number;
	    render: () => ReactNode;
	}
	interface EuiDelayHideState {
	    hide: boolean;
	    countdownExpired?: boolean;
	}
	export class EuiDelayHide extends Component<EuiDelayHideProps, EuiDelayHideState> {
	    static defaultProps: {
	        hide: boolean;
	        minimumDuration: number;
	    };
	    static getDerivedStateFromProps(nextProps: EuiDelayHideProps, prevState: EuiDelayHideState): {
	        hide: boolean;
	        countdownExpired: boolean | undefined;
	    };
	    state: {
	        hide: boolean;
	        countdownExpired: boolean;
	    };
	    private timeoutId?;
	    componentDidMount(): void;
	    componentDidUpdate(prevProps: EuiDelayHideProps): void;
	    componentWillUnmount(): void;
	    startCountdown: () => void;
	    finishCountdown: () => void;
	    render(): {} | null | undefined;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiDelayHide } from '@elastic/eui/src/components/delay_hide/delay_hide';

}
declare module '@elastic/eui/src/components/delay_hide/delay_hide.test' {
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list_title' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiDescriptionListTitle: FunctionComponent<CommonProps & HTMLAttributes<HTMLElement>>;

}
declare module '@elastic/eui/src/components/description_list/description_list_description' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiDescriptionListDescription: FunctionComponent<CommonProps & HTMLAttributes<HTMLElement>>;

}
declare module '@elastic/eui/src/components/description_list/description_list' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiDescriptionListType = keyof typeof typesToClassNameMap;
	export type EuiDescriptionListAlignment = keyof typeof alignmentsToClassNameMap;
	export type EuiDescriptionListTextStyle = keyof typeof textStylesToClassNameMap;
	export interface EuiDescriptionListProps {
	    listItems?: Array<{
	        title: NonNullable<ReactNode>;
	        description: NonNullable<ReactNode>;
	    }>;
	    /**
	     * Text alignment
	     */
	    align?: EuiDescriptionListAlignment;
	    /**
	     * Smaller text and condensed spacing
	     */
	    compressed?: boolean;
	    /**
	     * How should the content be styled, by default
	     * this will emphasize the title
	     */
	    textStyle?: EuiDescriptionListTextStyle;
	    /**
	     * How each item should be layed out
	     */
	    type?: EuiDescriptionListType;
	    /**
	     * Props object to be passed to `EuiDescriptionListTitle`
	     */
	    titleProps?: HTMLAttributes<HTMLElement>;
	    /**
	     * Props object to be passed to `EuiDescriptionListDescription`
	     */
	    descriptionProps?: HTMLAttributes<HTMLElement>;
	} const typesToClassNameMap: {
	    row: string;
	    column: string;
	    inline: string;
	};
	export const TYPES: ("inline" | "row" | "column")[]; const alignmentsToClassNameMap: {
	    center: string;
	    left: string;
	};
	export const ALIGNMENTS: ("left" | "center")[]; const textStylesToClassNameMap: {
	    normal: string;
	    reverse: string;
	};
	export const TEXT_STYLES: ("reverse" | "normal")[];
	export const EuiDescriptionList: FunctionComponent<CommonProps & HTMLAttributes<HTMLDListElement> & EuiDescriptionListProps>;
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list.test' {
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list_description.test' {
	export {};

}
declare module '@elastic/eui/src/components/description_list/description_list_title.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiDescriptionList } from '@elastic/eui/src/components/description_list/description_list';
	export { EuiDescriptionListTitle } from '@elastic/eui/src/components/description_list/description_list_title';
	export { EuiDescriptionListDescription } from '@elastic/eui/src/components/description_list/description_list_description';

}
declare module '@elastic/eui/src/test/take_mounted_snapshot' {
	import { ReactWrapper } from 'enzyme';
	import { Component } from 'react';
	/**
	 * Use this function to generate a Jest snapshot of components that have been fully rendered
	 * using Enzyme's `mount` method. Typically, a mounted component will result in a snapshot
	 * containing both React components and HTML elements. This function removes the React components,
	 * leaving only HTML elements in the snapshot.
	 */
	export const takeMountedSnapshot: (mountedComponent: ReactWrapper<{}, {}, Component<{}, {}, any>>) => ChildNode | null;

}
declare module '@elastic/eui/src/test/find_test_subject' {
	import { ReactWrapper, ShallowWrapper } from 'enzyme'; type FindTestSubject<T extends ShallowWrapper | ReactWrapper> = (mountedComponent: T, testSubjectSelector: string) => ReturnType<T['find']>;
	export const findTestSubject: FindTestSubject<ShallowWrapper | ReactWrapper>;
	export {};

}
declare module '@elastic/eui/src/test/react_warnings' {
	export const startThrowingReactWarnings: () => void;
	export const stopThrowingReactWarnings: () => void;

}
declare module '@elastic/eui' {
	export { requiredProps } from '@elastic/eui/src/test/required_props';
	export { takeMountedSnapshot } from '@elastic/eui/src/test/take_mounted_snapshot';
	export { findTestSubject } from '@elastic/eui/src/test/find_test_subject';
	export { startThrowingReactWarnings, stopThrowingReactWarnings, } from '@elastic/eui/src/test/react_warnings';

}
declare module '@elastic/eui/src/components/drag_and_drop/drag_drop_context' {
	import React, { FunctionComponent } from 'react';
	import { DragDropContextProps } from 'react-beautiful-dnd'; type EuiDraggingType = string | null;
	interface EuiDraggingContext {
	    isDraggingType: EuiDraggingType;
	}
	export const EuiDragDropContextContext: React.Context<EuiDraggingContext>;
	export const EuiDragDropContext: FunctionComponent<DragDropContextProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/droppable' {
	import React, { CSSProperties, FunctionComponent, ReactElement } from 'react';
	import { DroppableProps } from 'react-beautiful-dnd';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const spacingToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	};
	export const SPACING: ("s" | "m" | "l" | "none")[];
	export type EuiDroppableSpacing = keyof typeof spacingToClassNameMap;
	export interface EuiDroppableProps extends CommonProps, Omit<DroppableProps, 'children'> {
	    children: ReactElement | DroppableProps['children'];
	    className?: string;
	    /**
	     * Makes its items immutable. Dragging creates cloned items that can be dropped elsewhere.
	     */
	    cloneDraggables?: boolean;
	    style?: CSSProperties;
	    /**
	     * Adds padding to the droppable area
	     */
	    spacing?: EuiDroppableSpacing;
	    /**
	     * Adds an EuiPanel style to the droppable area
	     */
	    withPanel?: boolean;
	    /**
	     * Allow the panel to flex-grow?
	     */
	    grow?: boolean;
	}
	export const EuiDroppableContext: React.Context<{
	    cloneItems: boolean;
	}>;
	export const EuiDroppable: FunctionComponent<EuiDroppableProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/draggable' {
	import { CSSProperties, FunctionComponent, ReactElement } from 'react';
	import { DraggableProps } from 'react-beautiful-dnd';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common'; const spacingToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	};
	export const SPACING: ("s" | "m" | "l" | "none")[];
	export type EuiDraggableSpacing = keyof typeof spacingToClassNameMap;
	export interface EuiDraggableProps extends CommonProps, Omit<DraggableProps, 'children'> {
	    children: ReactElement | DraggableProps['children'];
	    className?: string;
	    /**
	     * Whether the `children` will provide and set up its own drag handle
	     */
	    customDragHandle?: boolean;
	    /**
	     * Whether the item is currently in a position to be removed
	     */
	    isRemovable?: boolean;
	    /**
	     * Adds padding to the draggable item
	     */
	    spacing?: EuiDraggableSpacing;
	    style?: CSSProperties;
	}
	export const EuiDraggable: FunctionComponent<EuiDraggableProps>;
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/services' {
	
	import { DraggableLocation } from 'react-beautiful-dnd';
	interface DropResult {
	    [droppableId: string]: any[];
	}
	export const reorder: (list: [], startIndex: number, endIndex: number) => {}[];
	export const move: (sourceList: any[], destinationList: any[], dropResultSource: DraggableLocation, dropResultDestination: DraggableLocation) => DropResult;
	export const copy: (sourceList: any[], destinationList: any[], dropResultSource: DraggableLocation, dropResultDestination: DraggableLocation, idModification: {
	    property: import("react").ReactText;
	    modifier: () => import("react").ReactText;
	}) => DropResult;
	export {};

}
declare module '@elastic/eui' {
	export { EuiDragDropContext } from '@elastic/eui/src/components/drag_and_drop/drag_drop_context';
	export { EuiDraggable } from '@elastic/eui/src/components/drag_and_drop/draggable';
	export { EuiDroppable } from '@elastic/eui/src/components/drag_and_drop/droppable';
	export { copy, move, reorder } from '@elastic/eui/src/components/drag_and_drop/services';

}
declare module '@elastic/eui/src/components/drag_and_drop/drag_drop_context.test' {
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/draggable.test' {
	export {};

}
declare module '@elastic/eui/src/components/drag_and_drop/droppable.test' {
	export {};

}
declare module '@elastic/eui/src/components/expression/expression' {
	import React, { ButtonHTMLAttributes, HTMLAttributes, MouseEventHandler, ReactNode } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const colorToClassNameMap: {
	    subdued: string;
	    primary: string;
	    secondary: string;
	    accent: string;
	    warning: string;
	    danger: string;
	};
	export const COLORS: ("primary" | "secondary" | "accent" | "warning" | "danger" | "subdued")[];
	export type ExpressionColor = keyof typeof colorToClassNameMap;
	export type EuiExpressionProps = CommonProps & {
	    /**
	     * First part of the expression
	     */
	    description: ReactNode;
	    descriptionProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Second part of the expression
	     */
	    value: ReactNode;
	    valueProps?: HTMLAttributes<HTMLSpanElement>;
	    /**
	     * Color of the `description`
	     */
	    color?: ExpressionColor;
	    /**
	     * Should the `description` auto-uppercase?
	     */
	    uppercase?: boolean;
	    /**
	     * Adds an solid border at the bottom
	     */
	    isActive?: boolean;
	    /**
	     * Turns the component into a button and adds an editable style border at the bottom
	     */
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	}; type Buttonlike = EuiExpressionProps & ButtonHTMLAttributes<HTMLButtonElement> & {
	    onClick: MouseEventHandler<HTMLButtonElement>;
	}; type Spanlike = EuiExpressionProps & HTMLAttributes<HTMLSpanElement>;
	export const EuiExpression: React.FunctionComponent<ExclusiveUnion<Buttonlike, Spanlike>>;
	export {};

}
declare module '@elastic/eui/src/components/expression/expression.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiExpression } from '@elastic/eui/src/components/expression/expression';

}
declare module '@elastic/eui/src/components/filter_group/filter_group.test' {
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_grid' {
	import { HTMLAttributes, ReactNode, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexGridGutterSize = keyof typeof gutterSizeToClassNameMap;
	export type FlexGridColumns = 0 | 1 | 2 | 3 | 4;
	export interface EuiFlexGridProps {
	    children?: ReactNode;
	    columns?: FlexGridColumns;
	    gutterSize?: FlexGridGutterSize;
	    responsive?: boolean;
	} const gutterSizeToClassNameMap: {
	    none: null;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const GUTTER_SIZES: FlexGridGutterSize[];
	export const COLUMNS: FlexGridColumns[];
	export const EuiFlexGrid: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiFlexGridProps>;
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_grid.test' {
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_group' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexGroupAlignItems = keyof typeof alignItemsToClassNameMap;
	export type FlexGroupComponentType = 'div' | 'span';
	export type FlexGroupDirection = keyof typeof directionToClassNameMap;
	export type FlexGroupGutterSize = keyof typeof gutterSizeToClassNameMap;
	export type FlexGroupJustifyContent = keyof typeof justifyContentToClassNameMap;
	export interface EuiFlexGroupProps {
	    alignItems?: FlexGroupAlignItems;
	    component?: FlexGroupComponentType;
	    direction?: FlexGroupDirection;
	    gutterSize?: FlexGroupGutterSize;
	    justifyContent?: FlexGroupJustifyContent;
	    responsive?: boolean;
	    wrap?: boolean;
	} const gutterSizeToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const GUTTER_SIZES: ("s" | "m" | "l" | "xl" | "none" | "xs")[]; const alignItemsToClassNameMap: {
	    stretch: null;
	    flexStart: string;
	    flexEnd: string;
	    center: string;
	    baseline: string;
	};
	export const ALIGN_ITEMS: ("baseline" | "center" | "stretch" | "flexStart" | "flexEnd")[]; const justifyContentToClassNameMap: {
	    flexStart: null;
	    flexEnd: string;
	    center: string;
	    spaceBetween: string;
	    spaceAround: string;
	    spaceEvenly: string;
	};
	export const JUSTIFY_CONTENTS: ("center" | "flexStart" | "flexEnd" | "spaceBetween" | "spaceAround" | "spaceEvenly")[]; const directionToClassNameMap: {
	    row: string;
	    rowReverse: string;
	    column: string;
	    columnReverse: string;
	};
	export const DIRECTIONS: ("row" | "column" | "rowReverse" | "columnReverse")[];
	export const EuiFlexGroup: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement | HTMLSpanElement> & EuiFlexGroupProps>;
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_group.test' {
	export {};

}
declare module '@elastic/eui/src/components/flex/flex_item' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type FlexItemGrowSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | true | false | null;
	export type FlexItemComponentType = 'div' | 'span' | 'figure';
	export interface EuiFlexItemProps {
	    grow?: FlexItemGrowSize;
	    component?: FlexItemComponentType;
	}
	export const GROW_SIZES: FlexItemGrowSize[];
	export const EuiFlexItem: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement | HTMLSpanElement> & EuiFlexItemProps>;

}
declare module '@elastic/eui/src/components/flex/flex_item.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFlexGroup } from '@elastic/eui/src/components/flex/flex_group';
	export { EuiFlexGrid } from '@elastic/eui/src/components/flex/flex_grid';
	export { EuiFlexItem } from '@elastic/eui/src/components/flex/flex_item';

}
declare module '@elastic/eui/src/components/flyout/flyout_body.test' {
	export {};

}
declare module '@elastic/eui/src/components/flyout/flyout_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/flyout/flyout_header.test' {
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, ReactNode, HTMLAttributes, ChangeEventHandler, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * checkbox type defs
	   *
	   * @see './checkbox.js'
	   */

	  export type EuiCheckboxType = 'inList';

	  export interface EuiCheckboxProps {
	    id: string;
	    checked?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>; // overriding to make it required
	    label?: ReactNode;
	    type?: EuiCheckboxType;
	    disabled?: boolean;
	    indeterminate?: boolean;
	  }

	  export const EuiCheckbox: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiCheckboxProps
	  >;

	  /**
	   * checkbox group type defs
	   *
	   * @see './checkbox_group.js'
	   */

	  export type EuiCheckboxGroupOption = {
	    id: string;
	    label?: ReactNode;
	  };

	  export type EuiCheckboxGroupIdToSelectedMap = { [id: string]: boolean };

	  export interface EuiCheckboxGroupProps {
	    options: EuiCheckboxGroupOption[];
	    idToSelectedMap: EuiCheckboxGroupIdToSelectedMap;
	    onChange: ChangeEventHandler<HTMLInputElement>;
	  }

	  export const EuiCheckboxGroup: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiCheckboxGroupProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';

	import { ReactNode, FunctionComponent, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {

	  /**
	   * text field type defs
	   *
	   * @see './field_number.js'
	   */
	  export interface EuiFieldNumberProps {
	    icon?: IconType;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	    prepend?: ReactNode | ReactNode[];
	    append?: ReactNode | ReactNode[];
	    inputRef?: Ref<HTMLInputElement>;
	  }

	  export const EuiFieldNumber: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldNumberProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {

	  /**
	   * password field type defs
	   *
	   * @see './field_password.js'
	   */
	  export interface EuiFieldPasswordProps {
	    isInvalid?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    compressed?: boolean;
	  }

	  export const EuiFieldPassword: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldPasswordProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * search field type defs
	   *
	   * @see './field_search.js'
	   */

	  export interface EuiFieldSearchProps {
	    name?: string;
	    id?: string;
	    placeholder?: string;
	    value?: string;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    incremental?: boolean;
	    onSearch?: (value: string) => void;
	  }

	  export const EuiFieldSearch: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldSearchProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes, Ref } from 'react'; module '@elastic/eui' {

	  /**
	   * text field type defs
	   *
	   * @see './field_text.js'
	   */
	  export interface EuiFieldTextProps {
	    icon?: string;
	    isInvalid?: boolean;
	    inputRef?: Ref<HTMLInputElement>;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    prepend?: React.ReactNode;
	    append?: React.ReactNode;
	  }

	  export const EuiFieldText: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiFieldTextProps
	    >;
	}

}
declare module '@elastic/eui/src/components/form/form_error_text/form_error_text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiFormErrorText: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/form/form_error_text/form_error_text.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormErrorText } from '@elastic/eui/src/components/form/form_error_text/form_error_text';

}
declare module '@elastic/eui/src/components/form/form_help_text/form_help_text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const EuiFormHelpText: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement>>;

}
declare module '@elastic/eui/src/components/form/form_help_text/form_help_text.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormHelpText } from '@elastic/eui/src/components/form/form_help_text/form_help_text';

}
declare module '@elastic/eui/src/components/form/form_label/form_label' {
	import { FunctionComponent, LabelHTMLAttributes, HTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiFormLabelCommonProps {
	    isFocused?: boolean;
	    isInvalid?: boolean;
	    /**
	     * Default type is a `label` but can be changed to a `legend`
	     * if using inside a `fieldset`.
	     */
	    type?: 'label' | 'legend';
	} type LabelProps = {
	    type?: 'label';
	} & EuiFormLabelCommonProps & LabelHTMLAttributes<HTMLLabelElement>; type LegendProps = {
	    type: 'legend';
	} & EuiFormLabelCommonProps & HTMLAttributes<HTMLLegendElement>;
	export type EuiFormLabelProps = CommonProps & ExclusiveUnion<LabelProps, LegendProps>;
	export const EuiFormLabel: FunctionComponent<EuiFormLabelProps>;
	export {};

}
declare module '@elastic/eui/src/components/form/form_label/form_label.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiFormLabel } from '@elastic/eui/src/components/form/form_label/form_label';

}
declare module '@elastic/eui' {
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';

	import { FunctionComponent, ReactNode, HTMLAttributes } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './form_row.js'
	   */
	  export type EuiFormRowCommonProps = CommonProps & {
	    error?: ReactNode | ReactNode[];
	    fullWidth?: boolean;
	    hasEmptyLabelSpace?: boolean;
	    helpText?: ReactNode;
	    isInvalid?: boolean;
	    label?: ReactNode;
	    labelAppend?: ReactNode;
	    describedByIds?: string[];
	    compressed?: boolean;
	    displayOnly?: boolean;
	  };

	  type LabelProps = {
	    labelType?: 'label';
	  } & EuiFormRowCommonProps &
	    HTMLAttributes<HTMLDivElement>;

	  type LegendProps = {
	    labelType?: 'legend';
	  } & EuiFormRowCommonProps &
	  HTMLAttributes<HTMLFieldSetElement>;

	  export type EuiFormRowProps = ExclusiveUnion<LabelProps, LegendProps>;

	  export const EuiFormRow: FunctionComponent<EuiFormRowProps>;
	}

}
declare module '@elastic/eui/src/components/form/form_row/make_id' {
	 function makeId(): string;
	export default makeId;

}
declare module '@elastic/eui/src/components/form/form_row/make_id.test' {
	export {};

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import { FunctionComponent, ChangeEventHandler, HTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './radio_group.js'
	   */
	  export interface EuiRadioGroupOption {
	    id: string;
	    label?: ReactNode;
	  }

	  export type EuiRadioGroupChangeCallback = (id: string, value: string) => void;

	  export type EuiRadioGroupProps = CommonProps &
	    Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & {
	      disabled?: boolean;
	      name?: string;
	      options?: EuiRadioGroupOption[];
	      idSelected?: string;
	      onChange: EuiRadioGroupChangeCallback;
	    };

	  export type x = EuiRadioGroupProps['onChange'];

	  export const EuiRadioGroup: FunctionComponent<EuiRadioGroupProps>;

	  export interface EuiRadioProps {
	    autoFocus?: boolean;
	    compressed?: boolean;
	    label?: ReactNode;
	    name?: string;
	    value?: string;
	    checked?: boolean;
	    disabled?: boolean;
	    onChange: ChangeEventHandler<HTMLInputElement>; // overriding to make it required
	  }

	  export const EuiRadio: FunctionComponent<
	    CommonProps & HTMLAttributes<HTMLDivElement> & EuiRadioProps
	  >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';

	import { FunctionComponent, ReactNode, HTMLAttributes, ChangeEventHandler, InputHTMLAttributes } from 'react'; module '@elastic/eui' {
	  export type EuiRangeLevelColor = 'primary' | 'success' | 'warning' | 'danger';

	  /**
	   * single range type def
	   *
	   * @see './range.js'
	   */

	  export interface EuiRangeProps {
	    compressed?: boolean;
	    fullWidth?: boolean;
	    id?: string;
	    levels?: Array<{ min?: number; max?: number; color?: EuiRangeLevelColor }>;
	    // `min` and `max` are optional in HTML but required for our component,
	    // so we override them.
	    max: number;
	    min: number;
	    // The spec allows string values for `step` but the component requires
	    // a number.
	    step?: number;
	    showInput?: boolean;
	    showLabels?: boolean;
	    showRange?: boolean;
	    showTicks?: boolean;
	    showValue?: boolean;
	    tickInterval?: number;
	  }

	  export const EuiRange: FunctionComponent<
	    CommonProps & InputHTMLAttributes<HTMLInputElement> & EuiRangeProps
	  >;

	  /**
	   * dual range type defs
	   *
	   * @see './dual_range.js'
	   */

	    export interface EuiDualRangeProps {
	      // Override acceptable value type
	      value: [number | string, number | string]
	    }

	    export const EuiDualRange: FunctionComponent<
	      CommonProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> & EuiRangeProps & EuiDualRangeProps
	    >;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import {FunctionComponent, ReactNode, Ref, OptionHTMLAttributes, SelectHTMLAttributes} from 'react'; module '@elastic/eui' {
	  /**
	   * @see './select.js'
	   */

	  export type EuiSelectProps = CommonProps &
	    SelectHTMLAttributes<HTMLSelectElement> & {
	    name?: string;
	    id?: string;
	    options: Array<{ text: ReactNode } & OptionHTMLAttributes<HTMLOptionElement>>;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    isLoading?: boolean;
	    hasNoInitialSelection?: boolean;
	    inputRef?: Ref<HTMLSelectElement>;
	    compressed?: boolean;
	    prepend?: ReactNode | ReactNode[];
	    append?: ReactNode | ReactNode[];
	  };

	  export const EuiSelect: FunctionComponent<EuiSelectProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, InputHTMLAttributes, ReactNode } from 'react'; module '@elastic/eui' {
	  /**
	   * @see './switch.js'
	   */
	  export type EuiSwitchProps = CommonProps &
	    InputHTMLAttributes<HTMLInputElement> & {
	      label?: ReactNode;
	    };

	  export const EuiSwitch: FunctionComponent<EuiSwitchProps>;
	}

}
declare module '@elastic/eui' {
	import { CommonProps } from '@elastic/eui/src/components/common';

	import { FunctionComponent, TextareaHTMLAttributes } from 'react'; module '@elastic/eui' {

	  /**
	   * @see './text_area.js'
	   */
	  export interface EuiTextAreaProps {
	    rows?: number;
	    isInvalid?: boolean;
	    fullWidth?: boolean;
	    inputRef?: (input: any) => void;
	  }

	  export const EuiTextArea: FunctionComponent<
	    CommonProps & TextareaHTMLAttributes<HTMLTextAreaElement> & EuiTextAreaProps
	    >;
	}

}
declare module '@elastic/eui/src/components/form/validatable_control/validatable_control' {
	import { Component, ReactElement } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export interface HTMLConstraintValidityElement extends Element {
	    setCustomValidity: (error: string) => void;
	}
	export interface ReactElementWithRef extends ReactElement {
	    ref?: (element: HTMLConstraintValidityElement) => void;
	}
	export interface EuiValidatableControlProps {
	    isInvalid?: boolean;
	    children: ReactElementWithRef;
	}
	export class EuiValidatableControl extends Component<CommonProps & EuiValidatableControlProps> {
	    private control?;
	    updateValidity(): void;
	    componentDidMount(): void;
	    componentDidUpdate(): void;
	    setRef: (element: HTMLConstraintValidityElement) => void;
	    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>;
	}

}
declare module '@elastic/eui' {
	export { EuiValidatableControl } from '@elastic/eui/src/components/form/validatable_control/validatable_control';

}
declare module '@elastic/eui/src/components/form/validatable_control/validatable_control.test' {
	export {};

}
declare module '@elastic/eui/src/components/header/header_logo.test' {
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type EuiHorizontalRuleSize = keyof typeof sizeToClassNameMap;
	export type EuiHorizontalRuleMargin = keyof typeof marginToClassNameMap;
	export interface EuiHorizontalRuleProps {
	    /**
	     * Defines the width of the HR.
	     */
	    size?: EuiHorizontalRuleSize;
	    margin?: EuiHorizontalRuleMargin;
	} const sizeToClassNameMap: {
	    full: string;
	    half: string;
	    quarter: string;
	};
	export const SIZES: string[]; const marginToClassNameMap: {
	    none: null;
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const MARGINS: string[];
	export const EuiHorizontalRule: FunctionComponent<CommonProps & HTMLAttributes<HTMLHRElement> & EuiHorizontalRuleProps>;
	export {};

}
declare module '@elastic/eui/src/components/horizontal_rule/horizontal_rule.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiHorizontalRule } from '@elastic/eui/src/components/horizontal_rule/horizontal_rule';

}
declare module '@elastic/eui/src/components/i18n/i18n_util' {
	import { ReactChild } from 'react';
	import { RenderableValues } from '@elastic/eui/src/components/context/context';
	/**
	 * Replaces placeholder values in `input` with their matching value in `values`
	 * e.g. input:'Hello, {name}' will replace `{name}` with `values[name]`
	 * @param {string} input
	 * @param {RenderableValues} values
	 * @param {Function} i18nMappingFunc
	 * @returns {string | React.ReactChild[]}
	 */
	export function processStringToChildren(input: string, values: RenderableValues, i18nMappingFunc?: (token: string) => string): string | ReactChild[];

}
declare module '@elastic/eui/src/components/i18n/i18n' {
	import { ReactChild } from 'react';
	import { Renderable } from '@elastic/eui/src/components/context/context'; type ResolvedType<T> = T extends (...args: any[]) => any ? ReturnType<T> : T;
	interface I18nTokenShape<T, DEFAULT extends Renderable<T>> {
	    token: string;
	    default: DEFAULT;
	    children?: (x: ResolvedType<DEFAULT>) => ReactChild;
	    values?: T;
	}
	interface I18nTokensShape {
	    tokens: string[];
	    defaults: ReactChild[];
	    children: (x: ReactChild[]) => ReactChild;
	} const EuiI18n: <T extends {}, DEFAULT extends Renderable<T>>(props: (import ("@elastic/eui/src/components/common").DisambiguateSet<I18nTokenShape<T, DEFAULT>, I18nTokensShape> & I18nTokensShape) | (import ("@elastic/eui/src/components/common").DisambiguateSet<I18nTokensShape, I18nTokenShape<T, DEFAULT>> & I18nTokenShape<T, DEFAULT>)) => JSX.Element;
	export { EuiI18n };

}
declare module '@elastic/eui/src/components/i18n/i18n.test' {
	export {};

}
declare module '@elastic/eui/src/components/i18n/i18n_number' {
	import React, { ReactChild, ReactElement } from 'react';
	import { ExclusiveUnion } from '@elastic/eui/src/components/common';
	interface EuiI18nNumberValueShape {
	    value: number;
	    children?: (x: ReactChild) => ReactElement<any>;
	}
	interface EuiI18nNumberValuesShape {
	    values: number[];
	    children: (x: ReactChild[]) => ReactElement<any>;
	} type EuiI18nNumberProps = ExclusiveUnion<EuiI18nNumberValueShape, EuiI18nNumberValuesShape>; const EuiI18nNumber: React.FunctionComponent<EuiI18nNumberProps>;
	export { EuiI18nNumber };

}
declare module '@elastic/eui/src/components/i18n/i18n_util.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiI18n } from '@elastic/eui/src/components/i18n/i18n';
	export { EuiI18nNumber } from '@elastic/eui/src/components/i18n/i18n_number';

}
declare module '@elastic/eui/src/components/icon/icon.test' {
	export {};

}
declare module '@elastic/eui' {
	import { EuiButtonIconProps, EuiButtonPropsForButtonOrLink } from '@elastic/eui';
	import { IconType } from '@elastic/eui';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import {
	  AnchorHTMLAttributes,
	  ButtonHTMLAttributes,
	  FunctionComponent,
	  HTMLAttributes,
	  MouseEventHandler,
	  ReactElement,
	  ReactNode
	} from 'react'; module '@elastic/eui' {
	  /**
	   * list group type defs
	   *
	   * @see './list_group.js'
	   */

	  type EuiListGroupProps = CommonProps & HTMLAttributes<HTMLUListElement> & {
	    bordered?: boolean;
	    flush?: boolean;
	    listItems?: FunctionComponent<EuiListGroupItemProps>[];
	    maxWidth?: boolean | number | string;
	    showToolTips?: boolean;
	    wrapText?: boolean;
	  };

	  export const EuiListGroup: FunctionComponent<EuiListGroupProps>;

	  /**
	   * list group item type defs
	   *
	   * @see './list_group_item.js'
	   */

	  type EuiListGroupItemPropsBasics = {
	    size?: 'xs' | 's' | 'm' | 'l';
	    label: ReactNode;
	    isActive?: boolean;
	    isDisabled?: boolean;
	    href?: string;
	    iconType?: IconType;
	    icon?: ReactElement;
	    showToolTip?: boolean;
	    extraAction?: EuiButtonPropsForButtonOrLink<
	      CommonProps &
	        EuiButtonIconProps & {
	          iconType: IconType;
	          alwaysShow?: boolean;
	        }
	    >;
	    onClick?: MouseEventHandler<HTMLButtonElement>;
	    wrapText?: boolean;
	  };

	  type EuiListGroupItemProps = EuiListGroupItemPropsBasics &
	  CommonProps &
	  ExclusiveUnion<
	    ExclusiveUnion<
	      ButtonHTMLAttributes<HTMLButtonElement>,
	      AnchorHTMLAttributes<HTMLAnchorElement>
	    >,
	    HTMLAttributes<HTMLSpanElement>
	  >;

	  export const EuiListGroupItem: FunctionComponent<EuiListGroupItemProps>;
	}

}
declare module '@elastic/eui/src/components/loading/loading_kibana' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("m" | "l" | "xl")[];
	export interface EuiLoadingKibanaProps {
	    size?: keyof typeof sizeToClassNameMap;
	}
	export const EuiLoadingKibana: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & EuiLoadingKibanaProps>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_chart' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("m" | "l" | "xl")[];
	export type EuiLoadingChartSize = keyof typeof sizeToClassNameMap;
	export const EuiLoadingChart: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & {
	    /**
	     * Makes the loader animation black and white
	     */
	    mono?: boolean;
	    size?: EuiLoadingChartSize;
	}>;
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_content' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type LineRange = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
	export const EuiLoadingContent: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & {
	    lines?: LineRange;
	}>;

}
declare module '@elastic/eui/src/components/loading/loading_spinner' {
	import { HTMLAttributes, FunctionComponent } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	};
	export const SIZES: ("s" | "m" | "l" | "xl")[];
	export type EuiLoadingSpinnerSize = keyof typeof sizeToClassNameMap;
	export const EuiLoadingSpinner: FunctionComponent<CommonProps & HTMLAttributes<HTMLDivElement> & {
	    size?: EuiLoadingSpinnerSize;
	}>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiLoadingKibana } from '@elastic/eui/src/components/loading/loading_kibana';
	export { EuiLoadingChart } from '@elastic/eui/src/components/loading/loading_chart';
	export { EuiLoadingContent } from '@elastic/eui/src/components/loading/loading_content';
	export { EuiLoadingSpinner } from '@elastic/eui/src/components/loading/loading_spinner';

}
declare module '@elastic/eui/src/components/loading/loading_chart.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_content.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_kibana.test' {
	export {};

}
declare module '@elastic/eui/src/components/loading/loading_spinner.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_body.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_header.test' {
	export {};

}
declare module '@elastic/eui/src/components/modal/modal_header_title.test' {
	export {};

}
declare module '@elastic/eui/src/components/overlay_mask/overlay_mask' {
	/**
	 * NOTE: We can't test this component because Enzyme doesn't support rendering
	 * into portals.
	 */
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	export interface EuiOverlayMaskProps {
	    onClick?: () => void;
	    children: ReactNode;
	}
	export type Props = CommonProps & Omit<Partial<Record<keyof HTMLAttributes<HTMLDivElement>, string>>, keyof EuiOverlayMaskProps> & EuiOverlayMaskProps;
	export class EuiOverlayMask extends Component<Props> {
	    private overlayMaskNode?;
	    constructor(props: Props);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    render(): import("react").ReactPortal;
	}

}
declare module '@elastic/eui' {
	export { EuiOverlayMask } from '@elastic/eui/src/components/overlay_mask/overlay_mask';

}
declare module '@elastic/eui/src/components/popover/popover_footer.test' {
	export {};

}
declare module '@elastic/eui/src/components/popover/popover_title.test' {
	export {};

}
declare module '@elastic/eui/src/components/portal/portal' {
	/**
	 * NOTE: We can't test this component because Enzyme doesn't support rendering
	 * into portals.
	 */
	import React from 'react';
	interface InsertPositionsMap {
	    after: InsertPosition;
	    before: InsertPosition;
	}
	export const insertPositions: InsertPositionsMap;
	export const INSERT_POSITIONS: EuiPortalInsertPosition[]; type EuiPortalInsertPosition = keyof typeof insertPositions;
	interface EuiPortalProps {
	    children: React.ReactNode;
	    insert?: {
	        sibling: HTMLElement;
	        position: EuiPortalInsertPosition;
	    };
	    portalRef?: (ref: HTMLDivElement | null) => void;
	}
	export class EuiPortal extends React.Component<EuiPortalProps> {
	    portalNode: HTMLDivElement;
	    constructor(props: EuiPortalProps);
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	    updatePortalRef(ref: HTMLDivElement | null): void;
	    render(): React.ReactPortal;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiPortal } from '@elastic/eui/src/components/portal/portal';

}
declare module '@elastic/eui/src/components/portal/portal.test' {
	export {};

}
declare module '@elastic/eui/src/components/progress/progress' {
	import { FunctionComponent, HTMLAttributes, ProgressHTMLAttributes } from 'react';
	import { CommonProps, ExclusiveUnion } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	};
	export const SIZES: string[];
	export type EuiProgressSize = keyof typeof sizeToClassNameMap; const colorToClassNameMap: {
	    primary: string;
	    secondary: string;
	    danger: string;
	    subdued: string;
	    accent: string;
	};
	export const COLORS: string[];
	export type EuiProgressColor = keyof typeof colorToClassNameMap; const positionsToClassNameMap: {
	    fixed: string;
	    absolute: string;
	    static: string;
	};
	export const POSITIONS: string[];
	export type EuiProgressPosition = keyof typeof positionsToClassNameMap;
	export type EuiProgressProps = CommonProps & {
	    size?: EuiProgressSize;
	    color?: EuiProgressColor;
	    position?: EuiProgressPosition;
	}; type Indeterminate = EuiProgressProps & HTMLAttributes<HTMLDivElement>; type Determinate = EuiProgressProps & ProgressHTMLAttributes<HTMLProgressElement> & {
	    max: number;
	};
	export const EuiProgress: FunctionComponent<ExclusiveUnion<Determinate, Indeterminate>>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiProgress } from '@elastic/eui/src/components/progress/progress';

}
declare module '@elastic/eui/src/components/progress/progress.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/types' {
	import React from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export type OptionCheckedType = 'on' | 'off' | undefined;
	export interface Option extends CommonProps {
	    /**
	     * Must be unique across items (todo: fix this)
	     */
	    label: string;
	    /**
	     * Leave off to indicate not selected,
	     * 'on' to indicate inclusion and
	     * 'off' to indicate exclusion
	     */
	    checked?: OptionCheckedType;
	    disabled?: boolean;
	    /**
	     * Set to true to indicate object is just a grouping label, not a selectable item
	     */
	    isGroupLabel?: boolean;
	    /**
	     * Node to add between the selection icon and the label
	     */
	    prepend?: React.ReactNode;
	    /**
	     * Node to add to the far right of the item
	     */
	    append?: React.ReactNode;
	    ref?: (optionIndex: number) => void;
	}

}
declare module '@elastic/eui/src/components/selectable/matching_options' {
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export const getMatchingOptions: (options: Option[], searchValue: string, isPreFiltered?: boolean | undefined, selectedOptions?: Option[] | undefined) => Option[];

}
declare module '@elastic/eui/src/components/selectable/selectable_search/selectable_search' {
	import { Component, InputHTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	import { EuiFieldSearchProps } from '@elastic/eui';
	export type EuiSelectableSearchProps = Omit<InputHTMLAttributes<HTMLInputElement> & EuiFieldSearchProps, 'onChange'> & CommonProps & {
	    /**
	     * Passes back (matchingOptions, searchValue)
	     */
	    onChange?: (matchingOptions: Option[], searchValue: string) => void;
	    options: Option[];
	    defaultValue: string;
	};
	export interface EuiSelectableSearchState {
	    searchValue: string;
	}
	export class EuiSelectableSearch extends Component<EuiSelectableSearchProps, EuiSelectableSearchState> {
	    static defaultProps: {
	        defaultValue: string;
	    };
	    constructor(props: EuiSelectableSearchProps);
	    componentDidMount(): void;
	    onSearchChange: (value: string) => void;
	    passUpMatches: (matches: Option[], searchValue: string) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_search' {
	export { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search/selectable_search';

}
declare module '@elastic/eui/src/components/text/text_color' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const colorsToClassNameMap: {
	    default: string;
	    subdued: string;
	    secondary: string;
	    accent: string;
	    danger: string;
	    warning: string;
	    ghost: string;
	};
	export type TextColor = keyof typeof colorsToClassNameMap;
	export const COLORS: ("default" | "secondary" | "accent" | "warning" | "danger" | "subdued" | "ghost")[]; type Props = CommonProps & HTMLAttributes<HTMLDivElement> & HTMLAttributes<HTMLSpanElement> & {
	    color?: TextColor;
	    /**
	     * Determines the root element
	     */
	    component?: 'div' | 'span';
	};
	export const EuiTextColor: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/text/text_align' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	export const alignmentToClassNameMap: {
	    left: string;
	    right: string;
	    center: string;
	};
	export type TextAlignment = keyof typeof alignmentToClassNameMap;
	export const ALIGNMENTS: ("left" | "right" | "center")[]; type Props = CommonProps & HTMLAttributes<HTMLDivElement> & {
	    textAlign?: TextAlignment;
	};
	export const EuiTextAlign: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui/src/components/text/text' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	import { TextColor } from '@elastic/eui/src/components/text/text_color';
	import { TextAlignment } from '@elastic/eui/src/components/text/text_align'; const textSizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	};
	export type TextSize = keyof typeof textSizeToClassNameMap;
	export const TEXT_SIZES: ("s" | "m" | "xs")[]; type Props = CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'color'> & {
	    textAlign?: TextAlignment;
	    size?: TextSize;
	    color?: TextColor;
	    grow?: boolean;
	};
	export const EuiText: FunctionComponent<Props>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiText } from '@elastic/eui/src/components/text/text';
	export { EuiTextColor } from '@elastic/eui/src/components/text/text_color';
	export { EuiTextAlign } from '@elastic/eui/src/components/text/text_align';

}
declare module '@elastic/eui/src/components/selectable/selectable_message/selectable_message' {
	import React, { HTMLAttributes } from 'react';
	import { CommonProps, Omit } from '@elastic/eui/src/components/common';
	export type EuiSelectableMessageProps = Omit<HTMLAttributes<HTMLDivElement>, 'color'> & CommonProps & {};
	export const EuiSelectableMessage: React.FunctionComponent<EuiSelectableMessageProps>;

}
declare module '@elastic/eui/src/components/selectable/selectable_message' {
	export { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message/selectable_message';

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item' {
	import React, { Component, ButtonHTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { OptionCheckedType } from '@elastic/eui/src/components/selectable/types';
	export type EuiSelectableListItemProps = ButtonHTMLAttributes<HTMLButtonElement> & CommonProps & {
	    children?: React.ReactNode;
	    /**
	     * Applies an icon and visual styling to activated items
	     */
	    checked?: OptionCheckedType;
	    /**
	     * Shows icons based on `checked` type
	     */
	    showIcons: boolean;
	    /**
	     * Highlights the item for pseudo focus
	     */
	    isFocused?: boolean;
	    disabled?: boolean;
	    prepend?: React.ReactNode;
	    append?: React.ReactNode;
	};
	export class EuiSelectableListItem extends Component<EuiSelectableListItemProps> {
	    static defaultProps: {
	        showIcons: boolean;
	    };
	    constructor(props: EuiSelectableListItemProps);
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list' {
	import { Component, HTMLAttributes, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { ListProps } from 'react-virtualized';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export type EuiSelectableSingleOptionProps = 'always' | boolean;
	export type EuiSelectableOptionsListProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    /**
	     * The index of the option to be highlighted as pseudo-focused;
	     * Good for use when only one selection is allowed and needing to open
	     * directly to that option
	     */
	    activeOptionIndex?: number;
	    /**
	     *  The height of each option in pixels. Defaults to `32`
	     */
	    rowHeight: number;
	    /**
	     * Show the check/cross selection indicator icons
	     */
	    showIcons?: boolean;
	    singleSelection?: EuiSelectableSingleOptionProps;
	    /**
	     * Any props to send specifically to the react-virtualized `List`
	     */
	    virtualizedProps?: ListProps;
	    /**
	     * Adds a border around the list to indicate the bounds;
	     * Useful when the list scrolls, otherwise use your own container
	     */
	    bordered?: boolean;
	};
	export type EuiSelectableListProps = EuiSelectableOptionsListProps & {
	    /**
	     * All possible options
	     */
	    options: Option[];
	    /**
	     * Filtered options list (if applicable)
	     */
	    visibleOptions?: Option[];
	    /**
	     * Search value to highlight on the option render
	     */
	    searchValue: string;
	    /**
	     * Returns the array of options with altered checked state
	     */
	    onOptionClick: (options: Option[]) => void;
	    /**
	     * Custom render for the label portion of the option;
	     * Takes (option, searchValue), returns ReactNode
	     */
	    renderOption?: (option: Option, searchValue: string) => ReactNode;
	    /**
	     * Sets the max height in pixels or pass `full` to allow
	     * the whole group to fill the height of its container and
	     * allows the list grow as well
	     */
	    height?: number | 'full';
	    /**
	     * Allow cycling through the on, off and undefined state of option.checked
	     * and not just on and undefined
	     */
	    allowExclusions?: boolean;
	    rootId?: (appendix?: string) => string;
	};
	export class EuiSelectableList extends Component<EuiSelectableListProps> {
	    static defaultProps: {
	        rowHeight: number;
	        searchValue: string;
	    };
	    rootId: (suffix?: string | undefined) => string;
	    constructor(props: EuiSelectableListProps);
	    render(): JSX.Element;
	    onAddOrRemoveOption: (option: Option) => void;
	    private onAddOption;
	    private onRemoveOption;
	    private onExcludeOption;
	}

}
declare module '@elastic/eui/src/components/selectable/selectable_list' {
	export { EuiSelectableList } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list';
	export { EuiSelectableListItem } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item';

}
declare module '@elastic/eui/src/components/selectable/selectable' {
	import { Component, HTMLAttributes, ReactNode, ReactElement } from 'react';
	import { CommonProps, Omit, ExclusiveUnion } from '@elastic/eui/src/components/common';
	import { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search';
	import { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message';
	import { EuiSelectableList } from '@elastic/eui/src/components/selectable/selectable_list';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	import { EuiSelectableOptionsListProps, EuiSelectableSingleOptionProps } from '@elastic/eui/src/components/selectable/selectable_list/selectable_list'; type RequiredEuiSelectableOptionsListProps = Omit<EuiSelectableOptionsListProps, keyof typeof EuiSelectableList['defaultProps']>; type OptionalEuiSelectableOptionsListProps = Omit<EuiSelectableOptionsListProps, keyof RequiredEuiSelectableOptionsListProps>; type EuiSelectableOptionsListPropsWithDefaults = RequiredEuiSelectableOptionsListProps & Partial<OptionalEuiSelectableOptionsListProps>; type EuiSelectableSearchableProps = ExclusiveUnion<{
	    searchable?: false;
	}, {
	    /**
	     * Hooks up a search box to filter the list
	     */
	    searchable: true;
	    /**
	     * Passes props down to the `EuiFieldSearch`
	     */
	    searchProps?: {};
	}>;
	export type EuiSelectableProps = Omit<HTMLAttributes<HTMLDivElement>, 'children' | 'onChange'> & CommonProps & EuiSelectableSearchableProps & {
	    /**
	     * Function that takes the `list` node and then
	     * the `search` node (if `searchable` is applied)
	     */
	    children?: (list: ReactElement<typeof EuiSelectableMessage | typeof EuiSelectableList>, search: ReactElement<EuiSelectableSearch> | undefined) => ReactNode;
	    /**
	     * Array or Option objects, see docs for props
	     */
	    options: Option[];
	    /**
	     * Passes back the altered `options` array with selected options as
	     */
	    onChange?: (options: Option[]) => void;
	    /**
	     * Sets the single selection policy of
	     * `false`: allows multiple selection
	     * `true`: only allows one selection
	     * `always`: can and must have only one selection
	     */
	    singleSelection?: EuiSelectableSingleOptionProps;
	    /**
	     * Allows marking options as checked = 'off' as well as 'on'
	     */
	    allowExclusions?: boolean;
	    /**
	     * Show an loading indicator while you load and hook up your data
	     */
	    isLoading?: boolean;
	    /**
	     * Sets the max height in pixels or pass `full` to allow
	     * the whole group to fill the height of its container and
	     * allows the list grow as well
	     */
	    height?: number | 'full';
	    /**
	     * See `EuiSelectableList`
	     */
	    listProps?: EuiSelectableOptionsListPropsWithDefaults;
	    /**
	     * Custom render function for each option.
	     * Returns (option, searchValue)
	     */
	    renderOption?: (option: Option, searchValue: string) => {};
	};
	export interface EuiSelectableState {
	    activeOptionIndex?: number;
	    searchValue: string;
	    visibleOptions: Option[];
	}
	export class EuiSelectable extends Component<EuiSelectableProps, EuiSelectableState> {
	    static defaultProps: {
	        options: never[];
	        singleSelection: boolean;
	    };
	    private optionsListRef;
	    constructor(props: EuiSelectableProps);
	    hasActiveOption: () => boolean;
	    onKeyDown: (e: any) => void;
	    incrementActiveOptionIndex: (amount: number) => void;
	    clearActiveOption: () => void;
	    onSearchChange: (visibleOptions: Option[], searchValue: string) => void;
	    onContainerBlur: () => void;
	    onOptionClick: (options: Option[]) => void;
	    render(): JSX.Element;
	}
	export {};

}
declare module '@elastic/eui' {
	export { EuiSelectable } from '@elastic/eui/src/components/selectable/selectable';
	export { EuiSelectableList, EuiSelectableListItem } from '@elastic/eui/src/components/selectable/selectable_list';
	export { EuiSelectableMessage } from '@elastic/eui/src/components/selectable/selectable_message';
	export { EuiSelectableSearch } from '@elastic/eui/src/components/selectable/selectable_search';

}
declare module '@elastic/eui/src/components/selectable/selectable.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_list/selectable_list_item.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_message/selectable_message.test' {
	export {};

}
declare module '@elastic/eui/src/components/selectable/selectable_search/selectable_search.test' {
	export {};

}
declare module '@elastic/eui/src/components/spacer/spacer' {
	import React from 'react';
	import { HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common'; const sizeToClassNameMap: {
	    xs: string;
	    s: string;
	    m: string;
	    l: string;
	    xl: string;
	    xxl: string;
	};
	export const SIZES: string[];
	export type SpacerSize = keyof typeof sizeToClassNameMap;
	export type EuiSpacerProps = HTMLAttributes<HTMLDivElement> & CommonProps & {
	    size?: SpacerSize;
	};
	export const EuiSpacer: React.FunctionComponent<EuiSpacerProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiSpacer } from '@elastic/eui/src/components/spacer/spacer';

}
declare module '@elastic/eui/src/components/spacer/spacer.test' {
	export {};

}
declare module '@elastic/eui/src/components/stat/stat' {
	import { HTMLAttributes, FunctionComponent, ReactNode } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { EuiTitleSize } from '@elastic/eui/src/components/title/title';
	import { Omit } from '@elastic/eui/src/components/common'; const colorToClassNameMap: {
	    default: null;
	    subdued: string;
	    primary: string;
	    secondary: string;
	    danger: string;
	    accent: string;
	};
	export const COLORS: ("default" | "primary" | "secondary" | "accent" | "danger" | "subdued")[]; const textAlignToClassNameMap: {
	    left: string;
	    center: string;
	    right: string;
	};
	export const ALIGNMENTS: ("left" | "right" | "center")[];
	export interface EuiStatProps {
	    /**
	     * Set the description (label) text
	     */
	    description: ReactNode;
	    /**
	     * Will hide the title with an animation until false
	     */
	    isLoading?: boolean;
	    /**
	     * Flips the order of the description and title
	     */
	    reverse?: boolean;
	    textAlign?: keyof typeof textAlignToClassNameMap;
	    /**
	     * The (value) text
	     */
	    title: ReactNode;
	    /**
	     * The color of the title text
	     */
	    titleColor?: keyof typeof colorToClassNameMap;
	    /**
	     * Size of the title. See EuiTitle for options ('s', 'm', 'l'... etc)
	     */
	    titleSize?: EuiTitleSize;
	}
	export const EuiStat: FunctionComponent<CommonProps & Omit<HTMLAttributes<HTMLDivElement>, 'title'> & EuiStatProps>;
	export {};

}
declare module '@elastic/eui' {
	export { EuiStat } from '@elastic/eui/src/components/stat/stat';

}
declare module '@elastic/eui/src/components/stat/stat.test' {
	export {};

}
declare module '@elastic/eui/src/components/table/mobile/table_header_mobile.test' {
	export {};

}
declare module '@elastic/eui/src/components/text/text.test' {
	export {};

}
declare module '@elastic/eui/src/components/text/text_align.test' {
	export {};

}
declare module '@elastic/eui/src/components/text/text_color.test' {
	export {};

}
declare module '@elastic/eui' {
	export { EuiTitle } from '@elastic/eui/src/components/title/title';

}
declare module '@elastic/eui/src/components/title/title.test' {
	export {};

}
declare module '@elastic/eui/src/components/toast/global_toast_list_item.test' {
	export {};

}
declare module '@elastic/eui/src/components/toggle/toggle.test' {
	export {};

}
declare module '@elastic/eui/src/components/token/token_map' {
	export type TokenColor = 'tokenTint01' | 'tokenTint02' | 'tokenTint03' | 'tokenTint04' | 'tokenTint05' | 'tokenTint06' | 'tokenTint07' | 'tokenTint08' | 'tokenTint09' | 'tokenTint10' | 'tokenTint11' | 'tokenTint12';
	export type TokenShape = 'circle' | 'square' | 'rectangle';
	export interface EuiTokenMapDisplayOptions {
	    color?: TokenColor;
	    shape?: TokenShape;
	    fill?: boolean;
	    hasBorder?: boolean;
	}
	export type EuiTokenMapType = 'tokenClass' | 'tokenProperty' | 'tokenEnum' | 'tokenVariable' | 'tokenMethod' | 'tokenAnnotation' | 'tokenException' | 'tokenInterface' | 'tokenParameter' | 'tokenField' | 'tokenFunction' | 'tokenElement' | 'tokenBoolean' | 'tokenString' | 'tokenArray' | 'tokenConstant' | 'tokenNumber' | 'tokenObject' | 'tokenEvent' | 'tokenKey' | 'tokenNull' | 'tokenStruct' | 'tokenPackage' | 'tokenOperator' | 'tokenEnumMember' | 'tokenRepo' | 'tokenSymbol' | 'tokenFile' | 'tokenNamespace' | 'tokenModule';
	export const TOKEN_MAP: Record<EuiTokenMapType, EuiTokenMapDisplayOptions>;

}
declare module '@elastic/eui' {
	import { FunctionComponent, HTMLAttributes } from 'react';
	import { CommonProps } from '@elastic/eui/src/components/common';
	import { IconType } from '@elastic/eui';
	import {
	  EuiTokenMapDisplayOptions as DisplayOptions,
	  TokenShape as TkShape,
	  TokenColor as TkColor,
	  EuiTokenMapType as TkMapType,
	} from '@elastic/eui/src/components/token/token_map'; module '@elastic/eui' {
	  /**
	   * token type defs
	   *
	   * @see './token.js'
	  */
	  export type TokenSize = 's' | 'm' | 'l';
	  export interface EuiTokenProps {
	    iconType: IconType;
	    size?: TokenSize;
	    displayOptions?: DisplayOptions;
	  }

	  export type TokenShape = TkShape;
	  export type TokenColor = TkColor;
	  export type TokenType = TkMapType;
	  export interface EuiTokenMapDisplayOptions extends DisplayOptions {}

	  export const EuiToken: FunctionComponent<
	    CommonProps & EuiTokenProps & HTMLAttributes<HTMLDivElement>
	  >;
	}

}
declare module '@elastic/eui/src/components/tool_tip/tool_tip_popover.test' {
	export {};

}
declare module '@elastic/eui/src/services/random.test' {
	export {};

}
declare module '@elastic/eui/src/services/url.test' {
	export {};

}
declare module '@elastic/eui/src/services/accessibility/html_id_generator.test' {
	export {};

}
declare module '@elastic/eui/src/services/browser/browser' {
	interface IBrowser {
	    isEventSupported: (name: string, element: EventTarget) => boolean;
	}
	export const Browser: Readonly<IBrowser>;
	export {};

}
declare module '@elastic/eui/src/services/browser' {
	export { Browser } from '@elastic/eui/src/services/browser/browser';

}
declare module '@elastic/eui/src/services/color/color_palette.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/hex_to_rgb.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/is_color_dark.test' {
	export {};

}
declare module '@elastic/eui/src/services/color/rgb_to_hex.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_auto.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_boolean.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_date.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_number.test' {
	export {};

}
declare module '@elastic/eui/src/services/format/format_text.test' {
	export {};

}
declare module '@elastic/eui/src/services/number/number.test' {
	export {};

}
declare module '@elastic/eui/src/services/paging/pager.test' {
	export {};

}
declare module '@elastic/eui/src/services/popover/popover_positioning.test' {
	export {};

}
declare module '@elastic/eui/src/services/predicate/common_predicates.test' {
	export {};

}
declare module '@elastic/eui/src/services/security/get_secure_rel_for_target.test' {
	export {};

}
declare module '@elastic/eui/src/services/sort/comparators.test' {
	export {};

}
declare module '@elastic/eui/src/services/sort/sortable_properties.test' {
	export {};

}
declare module '@elastic/eui/src/services/string/to_initials.test' {
	export {};

}
declare module '@elastic/eui/src/services/time/timer' {
	export class Timer {
	    id: any;
	    callback: undefined | (() => void);
	    finishTime: number | undefined;
	    timeRemaining: number | undefined;
	    constructor(callback: () => void, timeMs: number);
	    pause: () => void;
	    resume: () => void;
	    clear: () => void;
	    finish: () => void;
	}

}
declare module '@elastic/eui/src/services/time' {
	export { Timer } from '@elastic/eui/src/services/time/timer';

}
declare module '@elastic/eui/src/services/time/timer.test' {
	export {};

}
declare module '@elastic/eui/src/services/window_event/window_event.test' {
	export {};

}
declare module '@elastic/eui/src/test/patch_random' {
	export function patchRandom(): void;
	export function unpatchRandom(): void;

}
declare module '@elastic/eui/src/test/time_execution' {
	export function timeExecution(fn: () => void): number;
	export function benchmarkFunction(fn: () => void, warmupRuns?: number, benchmarkRuns?: number): number;

}
declare module '@elastic/eui/src-docs/src/services/string/pseudo_locale_translator' {
	export function translateUsingPseudoLocale(message: string): string;

}
declare module '@elastic/eui/src-docs/src/views/accessibility/screen_reader' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/badge/notification_badge' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/expression/colors' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/expression/stringing' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/component_span' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/direction' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grid' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grid_columns' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_group' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_group_wrap' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grow_numeric' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_grow_zero' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_gutter' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_items' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_nest' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/flex/flex_responsive' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/horizontal_rule/horizontal_rule' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/horizontal_rule/horizontal_rule_margin' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_chart' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_content' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_kibana' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/loading/loading_spinner' {
	 const _default: () => JSX.Element;
	export default _default;

}
declare module '@elastic/eui/src-docs/src/views/selectable/data' {
	export const Options: ({
	    label: string;
	    'data-test-subj': string;
	    disabled?: undefined;
	    checked?: undefined;
	} | {
	    label: string;
	    disabled: boolean;
	    'data-test-subj'?: undefined;
	    checked?: undefined;
	} | {
	    label: string;
	    checked: string;
	    'data-test-subj'?: undefined;
	    disabled?: undefined;
	} | {
	    label: string;
	    'data-test-subj'?: undefined;
	    disabled?: undefined;
	    checked?: undefined;
	})[];

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable_exclusion' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable_search' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/selectable/selectable_single' {
	import { Component } from 'react';
	import { Option } from '@elastic/eui/src/components/selectable/types';
	export default class extends Component<{}, {
	    options: Option[];
	}> {
	    constructor(props: any);
	    onChange: (options: Option[]) => void;
	    render(): JSX.Element;
	}

}
declare module '@elastic/eui/src-docs/src/views/spacer/spacer' {
	 const _default: () => JSX.Element;
	export default _default;

}
